// Generated by jextract

package org.eclipse.swt.opengl.panama;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public interface PFNGLCOPYIMAGESUBDATANVPROC {

    void apply(int x0, int x1, int x2, int x3, int x4, int x5, int x6, int x7, int x8, int x9, int x10, int x11, int x12, int x13, int x14);
    static MemoryAddress allocate(PFNGLCOPYIMAGESUBDATANVPROC fi) {
        return RuntimeHelper.upcallStub(PFNGLCOPYIMAGESUBDATANVPROC.class, fi, constants$736.PFNGLCOPYIMAGESUBDATANVPROC$FUNC, "(IIIIIIIIIIIIIII)V");
    }
    static MemoryAddress allocate(PFNGLCOPYIMAGESUBDATANVPROC fi, ResourceScope scope) {
        return RuntimeHelper.upcallStub(PFNGLCOPYIMAGESUBDATANVPROC.class, fi, constants$736.PFNGLCOPYIMAGESUBDATANVPROC$FUNC, "(IIIIIIIIIIIIIII)V", scope);
    }
    static PFNGLCOPYIMAGESUBDATANVPROC ofAddress(MemoryAddress addr) {
        return (int x0, int x1, int x2, int x3, int x4, int x5, int x6, int x7, int x8, int x9, int x10, int x11, int x12, int x13, int x14) -> {
            try {
                constants$736.PFNGLCOPYIMAGESUBDATANVPROC$MH.invokeExact((Addressable)addr, x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


