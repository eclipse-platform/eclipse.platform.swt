// Generated by jextract

package org.eclipse.swt.opengl.panama;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public interface PFNGLPATHGLYPHINDEXARRAYNVPROC {

    int apply(int x0, int x1, jdk.incubator.foreign.MemoryAddress x2, int x3, int x4, int x5, int x6, float x7);
    static MemoryAddress allocate(PFNGLPATHGLYPHINDEXARRAYNVPROC fi) {
        return RuntimeHelper.upcallStub(PFNGLPATHGLYPHINDEXARRAYNVPROC.class, fi, constants$797.PFNGLPATHGLYPHINDEXARRAYNVPROC$FUNC, "(IILjdk/incubator/foreign/MemoryAddress;IIIIF)I");
    }
    static MemoryAddress allocate(PFNGLPATHGLYPHINDEXARRAYNVPROC fi, ResourceScope scope) {
        return RuntimeHelper.upcallStub(PFNGLPATHGLYPHINDEXARRAYNVPROC.class, fi, constants$797.PFNGLPATHGLYPHINDEXARRAYNVPROC$FUNC, "(IILjdk/incubator/foreign/MemoryAddress;IIIIF)I", scope);
    }
    static PFNGLPATHGLYPHINDEXARRAYNVPROC ofAddress(MemoryAddress addr) {
        return (int x0, int x1, jdk.incubator.foreign.MemoryAddress x2, int x3, int x4, int x5, int x6, float x7) -> {
            try {
                return (int)constants$797.PFNGLPATHGLYPHINDEXARRAYNVPROC$MH.invokeExact((Addressable)addr, x0, x1, x2, x3, x4, x5, x6, x7);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


