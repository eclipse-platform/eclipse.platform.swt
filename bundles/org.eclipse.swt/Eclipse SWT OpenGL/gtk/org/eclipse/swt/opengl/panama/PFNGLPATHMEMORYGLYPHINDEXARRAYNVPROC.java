// Generated by jextract

package org.eclipse.swt.opengl.panama;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public interface PFNGLPATHMEMORYGLYPHINDEXARRAYNVPROC {

    int apply(int x0, int x1, long x2, jdk.incubator.foreign.MemoryAddress x3, int x4, int x5, int x6, int x7, float x8);
    static MemoryAddress allocate(PFNGLPATHMEMORYGLYPHINDEXARRAYNVPROC fi) {
        return RuntimeHelper.upcallStub(PFNGLPATHMEMORYGLYPHINDEXARRAYNVPROC.class, fi, constants$798.PFNGLPATHMEMORYGLYPHINDEXARRAYNVPROC$FUNC, "(IIJLjdk/incubator/foreign/MemoryAddress;IIIIF)I");
    }
    static MemoryAddress allocate(PFNGLPATHMEMORYGLYPHINDEXARRAYNVPROC fi, ResourceScope scope) {
        return RuntimeHelper.upcallStub(PFNGLPATHMEMORYGLYPHINDEXARRAYNVPROC.class, fi, constants$798.PFNGLPATHMEMORYGLYPHINDEXARRAYNVPROC$FUNC, "(IIJLjdk/incubator/foreign/MemoryAddress;IIIIF)I", scope);
    }
    static PFNGLPATHMEMORYGLYPHINDEXARRAYNVPROC ofAddress(MemoryAddress addr) {
        return (int x0, int x1, long x2, jdk.incubator.foreign.MemoryAddress x3, int x4, int x5, int x6, int x7, float x8) -> {
            try {
                return (int)constants$798.PFNGLPATHMEMORYGLYPHINDEXARRAYNVPROC$MH.invokeExact((Addressable)addr, x0, x1, x2, x3, x4, x5, x6, x7, x8);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


