// Generated by jextract

package org.eclipse.swt.opengl.panama;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
class constants$3 {

    static final FunctionDescriptor glEdgeFlagv$FUNC = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final MethodHandle glEdgeFlagv$MH = RuntimeHelper.downcallHandle(
        glut_h.LIBRARIES, "glEdgeFlagv",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        constants$3.glEdgeFlagv$FUNC, false
    );
    static final FunctionDescriptor glScissor$FUNC = FunctionDescriptor.ofVoid(
        C_INT,
        C_INT,
        C_INT,
        C_INT
    );
    static final MethodHandle glScissor$MH = RuntimeHelper.downcallHandle(
        glut_h.LIBRARIES, "glScissor",
        "(IIII)V",
        constants$3.glScissor$FUNC, false
    );
    static final FunctionDescriptor glClipPlane$FUNC = FunctionDescriptor.ofVoid(
        C_INT,
        C_POINTER
    );
    static final MethodHandle glClipPlane$MH = RuntimeHelper.downcallHandle(
        glut_h.LIBRARIES, "glClipPlane",
        "(ILjdk/incubator/foreign/MemoryAddress;)V",
        constants$3.glClipPlane$FUNC, false
    );
    static final FunctionDescriptor glGetClipPlane$FUNC = FunctionDescriptor.ofVoid(
        C_INT,
        C_POINTER
    );
    static final MethodHandle glGetClipPlane$MH = RuntimeHelper.downcallHandle(
        glut_h.LIBRARIES, "glGetClipPlane",
        "(ILjdk/incubator/foreign/MemoryAddress;)V",
        constants$3.glGetClipPlane$FUNC, false
    );
    static final FunctionDescriptor glDrawBuffer$FUNC = FunctionDescriptor.ofVoid(
        C_INT
    );
    static final MethodHandle glDrawBuffer$MH = RuntimeHelper.downcallHandle(
        glut_h.LIBRARIES, "glDrawBuffer",
        "(I)V",
        constants$3.glDrawBuffer$FUNC, false
    );
    static final FunctionDescriptor glReadBuffer$FUNC = FunctionDescriptor.ofVoid(
        C_INT
    );
    static final MethodHandle glReadBuffer$MH = RuntimeHelper.downcallHandle(
        glut_h.LIBRARIES, "glReadBuffer",
        "(I)V",
        constants$3.glReadBuffer$FUNC, false
    );
}


