// Generated by jextract

package org.eclipse.swt.opengl.panama;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
 class glut_h_6 extends glut_h_5 {

    public static MethodHandle glNormal3d$MH() {
        return RuntimeHelper.requireNonNull(constants$16.glNormal3d$MH,"glNormal3d");
    }
    public static void glNormal3d ( double nx,  double ny,  double nz) {
        var mh$ = RuntimeHelper.requireNonNull(constants$16.glNormal3d$MH, "glNormal3d");
        try {
            mh$.invokeExact(nx, ny, nz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormal3f$MH() {
        return RuntimeHelper.requireNonNull(constants$17.glNormal3f$MH,"glNormal3f");
    }
    public static void glNormal3f ( float nx,  float ny,  float nz) {
        var mh$ = RuntimeHelper.requireNonNull(constants$17.glNormal3f$MH, "glNormal3f");
        try {
            mh$.invokeExact(nx, ny, nz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormal3i$MH() {
        return RuntimeHelper.requireNonNull(constants$17.glNormal3i$MH,"glNormal3i");
    }
    public static void glNormal3i ( int nx,  int ny,  int nz) {
        var mh$ = RuntimeHelper.requireNonNull(constants$17.glNormal3i$MH, "glNormal3i");
        try {
            mh$.invokeExact(nx, ny, nz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormal3s$MH() {
        return RuntimeHelper.requireNonNull(constants$17.glNormal3s$MH,"glNormal3s");
    }
    public static void glNormal3s ( short nx,  short ny,  short nz) {
        var mh$ = RuntimeHelper.requireNonNull(constants$17.glNormal3s$MH, "glNormal3s");
        try {
            mh$.invokeExact(nx, ny, nz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormal3bv$MH() {
        return RuntimeHelper.requireNonNull(constants$17.glNormal3bv$MH,"glNormal3bv");
    }
    public static void glNormal3bv ( Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$17.glNormal3bv$MH, "glNormal3bv");
        try {
            mh$.invokeExact(v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormal3dv$MH() {
        return RuntimeHelper.requireNonNull(constants$17.glNormal3dv$MH,"glNormal3dv");
    }
    public static void glNormal3dv ( Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$17.glNormal3dv$MH, "glNormal3dv");
        try {
            mh$.invokeExact(v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormal3fv$MH() {
        return RuntimeHelper.requireNonNull(constants$17.glNormal3fv$MH,"glNormal3fv");
    }
    public static void glNormal3fv ( Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$17.glNormal3fv$MH, "glNormal3fv");
        try {
            mh$.invokeExact(v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormal3iv$MH() {
        return RuntimeHelper.requireNonNull(constants$18.glNormal3iv$MH,"glNormal3iv");
    }
    public static void glNormal3iv ( Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$18.glNormal3iv$MH, "glNormal3iv");
        try {
            mh$.invokeExact(v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormal3sv$MH() {
        return RuntimeHelper.requireNonNull(constants$18.glNormal3sv$MH,"glNormal3sv");
    }
    public static void glNormal3sv ( Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$18.glNormal3sv$MH, "glNormal3sv");
        try {
            mh$.invokeExact(v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexd$MH() {
        return RuntimeHelper.requireNonNull(constants$18.glIndexd$MH,"glIndexd");
    }
    public static void glIndexd ( double c) {
        var mh$ = RuntimeHelper.requireNonNull(constants$18.glIndexd$MH, "glIndexd");
        try {
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexf$MH() {
        return RuntimeHelper.requireNonNull(constants$18.glIndexf$MH,"glIndexf");
    }
    public static void glIndexf ( float c) {
        var mh$ = RuntimeHelper.requireNonNull(constants$18.glIndexf$MH, "glIndexf");
        try {
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexi$MH() {
        return RuntimeHelper.requireNonNull(constants$18.glIndexi$MH,"glIndexi");
    }
    public static void glIndexi ( int c) {
        var mh$ = RuntimeHelper.requireNonNull(constants$18.glIndexi$MH, "glIndexi");
        try {
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexs$MH() {
        return RuntimeHelper.requireNonNull(constants$18.glIndexs$MH,"glIndexs");
    }
    public static void glIndexs ( short c) {
        var mh$ = RuntimeHelper.requireNonNull(constants$18.glIndexs$MH, "glIndexs");
        try {
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexub$MH() {
        return RuntimeHelper.requireNonNull(constants$19.glIndexub$MH,"glIndexub");
    }
    public static void glIndexub ( byte c) {
        var mh$ = RuntimeHelper.requireNonNull(constants$19.glIndexub$MH, "glIndexub");
        try {
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexdv$MH() {
        return RuntimeHelper.requireNonNull(constants$19.glIndexdv$MH,"glIndexdv");
    }
    public static void glIndexdv ( Addressable c) {
        var mh$ = RuntimeHelper.requireNonNull(constants$19.glIndexdv$MH, "glIndexdv");
        try {
            mh$.invokeExact(c.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexfv$MH() {
        return RuntimeHelper.requireNonNull(constants$19.glIndexfv$MH,"glIndexfv");
    }
    public static void glIndexfv ( Addressable c) {
        var mh$ = RuntimeHelper.requireNonNull(constants$19.glIndexfv$MH, "glIndexfv");
        try {
            mh$.invokeExact(c.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexiv$MH() {
        return RuntimeHelper.requireNonNull(constants$19.glIndexiv$MH,"glIndexiv");
    }
    public static void glIndexiv ( Addressable c) {
        var mh$ = RuntimeHelper.requireNonNull(constants$19.glIndexiv$MH, "glIndexiv");
        try {
            mh$.invokeExact(c.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexsv$MH() {
        return RuntimeHelper.requireNonNull(constants$19.glIndexsv$MH,"glIndexsv");
    }
    public static void glIndexsv ( Addressable c) {
        var mh$ = RuntimeHelper.requireNonNull(constants$19.glIndexsv$MH, "glIndexsv");
        try {
            mh$.invokeExact(c.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexubv$MH() {
        return RuntimeHelper.requireNonNull(constants$19.glIndexubv$MH,"glIndexubv");
    }
    public static void glIndexubv ( Addressable c) {
        var mh$ = RuntimeHelper.requireNonNull(constants$19.glIndexubv$MH, "glIndexubv");
        try {
            mh$.invokeExact(c.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3b$MH() {
        return RuntimeHelper.requireNonNull(constants$20.glColor3b$MH,"glColor3b");
    }
    public static void glColor3b ( byte red,  byte green,  byte blue) {
        var mh$ = RuntimeHelper.requireNonNull(constants$20.glColor3b$MH, "glColor3b");
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3d$MH() {
        return RuntimeHelper.requireNonNull(constants$20.glColor3d$MH,"glColor3d");
    }
    public static void glColor3d ( double red,  double green,  double blue) {
        var mh$ = RuntimeHelper.requireNonNull(constants$20.glColor3d$MH, "glColor3d");
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3f$MH() {
        return RuntimeHelper.requireNonNull(constants$20.glColor3f$MH,"glColor3f");
    }
    public static void glColor3f ( float red,  float green,  float blue) {
        var mh$ = RuntimeHelper.requireNonNull(constants$20.glColor3f$MH, "glColor3f");
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3i$MH() {
        return RuntimeHelper.requireNonNull(constants$20.glColor3i$MH,"glColor3i");
    }
    public static void glColor3i ( int red,  int green,  int blue) {
        var mh$ = RuntimeHelper.requireNonNull(constants$20.glColor3i$MH, "glColor3i");
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3s$MH() {
        return RuntimeHelper.requireNonNull(constants$20.glColor3s$MH,"glColor3s");
    }
    public static void glColor3s ( short red,  short green,  short blue) {
        var mh$ = RuntimeHelper.requireNonNull(constants$20.glColor3s$MH, "glColor3s");
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3ub$MH() {
        return RuntimeHelper.requireNonNull(constants$20.glColor3ub$MH,"glColor3ub");
    }
    public static void glColor3ub ( byte red,  byte green,  byte blue) {
        var mh$ = RuntimeHelper.requireNonNull(constants$20.glColor3ub$MH, "glColor3ub");
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3ui$MH() {
        return RuntimeHelper.requireNonNull(constants$21.glColor3ui$MH,"glColor3ui");
    }
    public static void glColor3ui ( int red,  int green,  int blue) {
        var mh$ = RuntimeHelper.requireNonNull(constants$21.glColor3ui$MH, "glColor3ui");
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3us$MH() {
        return RuntimeHelper.requireNonNull(constants$21.glColor3us$MH,"glColor3us");
    }
    public static void glColor3us ( short red,  short green,  short blue) {
        var mh$ = RuntimeHelper.requireNonNull(constants$21.glColor3us$MH, "glColor3us");
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4b$MH() {
        return RuntimeHelper.requireNonNull(constants$21.glColor4b$MH,"glColor4b");
    }
    public static void glColor4b ( byte red,  byte green,  byte blue,  byte alpha) {
        var mh$ = RuntimeHelper.requireNonNull(constants$21.glColor4b$MH, "glColor4b");
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4d$MH() {
        return RuntimeHelper.requireNonNull(constants$21.glColor4d$MH,"glColor4d");
    }
    public static void glColor4d ( double red,  double green,  double blue,  double alpha) {
        var mh$ = RuntimeHelper.requireNonNull(constants$21.glColor4d$MH, "glColor4d");
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4f$MH() {
        return RuntimeHelper.requireNonNull(constants$21.glColor4f$MH,"glColor4f");
    }
    public static void glColor4f ( float red,  float green,  float blue,  float alpha) {
        var mh$ = RuntimeHelper.requireNonNull(constants$21.glColor4f$MH, "glColor4f");
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4i$MH() {
        return RuntimeHelper.requireNonNull(constants$21.glColor4i$MH,"glColor4i");
    }
    public static void glColor4i ( int red,  int green,  int blue,  int alpha) {
        var mh$ = RuntimeHelper.requireNonNull(constants$21.glColor4i$MH, "glColor4i");
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4s$MH() {
        return RuntimeHelper.requireNonNull(constants$22.glColor4s$MH,"glColor4s");
    }
    public static void glColor4s ( short red,  short green,  short blue,  short alpha) {
        var mh$ = RuntimeHelper.requireNonNull(constants$22.glColor4s$MH, "glColor4s");
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4ub$MH() {
        return RuntimeHelper.requireNonNull(constants$22.glColor4ub$MH,"glColor4ub");
    }
    public static void glColor4ub ( byte red,  byte green,  byte blue,  byte alpha) {
        var mh$ = RuntimeHelper.requireNonNull(constants$22.glColor4ub$MH, "glColor4ub");
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4ui$MH() {
        return RuntimeHelper.requireNonNull(constants$22.glColor4ui$MH,"glColor4ui");
    }
    public static void glColor4ui ( int red,  int green,  int blue,  int alpha) {
        var mh$ = RuntimeHelper.requireNonNull(constants$22.glColor4ui$MH, "glColor4ui");
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4us$MH() {
        return RuntimeHelper.requireNonNull(constants$22.glColor4us$MH,"glColor4us");
    }
    public static void glColor4us ( short red,  short green,  short blue,  short alpha) {
        var mh$ = RuntimeHelper.requireNonNull(constants$22.glColor4us$MH, "glColor4us");
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3bv$MH() {
        return RuntimeHelper.requireNonNull(constants$22.glColor3bv$MH,"glColor3bv");
    }
    public static void glColor3bv ( Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$22.glColor3bv$MH, "glColor3bv");
        try {
            mh$.invokeExact(v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3dv$MH() {
        return RuntimeHelper.requireNonNull(constants$22.glColor3dv$MH,"glColor3dv");
    }
    public static void glColor3dv ( Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$22.glColor3dv$MH, "glColor3dv");
        try {
            mh$.invokeExact(v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3fv$MH() {
        return RuntimeHelper.requireNonNull(constants$23.glColor3fv$MH,"glColor3fv");
    }
    public static void glColor3fv ( Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$23.glColor3fv$MH, "glColor3fv");
        try {
            mh$.invokeExact(v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3iv$MH() {
        return RuntimeHelper.requireNonNull(constants$23.glColor3iv$MH,"glColor3iv");
    }
    public static void glColor3iv ( Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$23.glColor3iv$MH, "glColor3iv");
        try {
            mh$.invokeExact(v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3sv$MH() {
        return RuntimeHelper.requireNonNull(constants$23.glColor3sv$MH,"glColor3sv");
    }
    public static void glColor3sv ( Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$23.glColor3sv$MH, "glColor3sv");
        try {
            mh$.invokeExact(v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3ubv$MH() {
        return RuntimeHelper.requireNonNull(constants$23.glColor3ubv$MH,"glColor3ubv");
    }
    public static void glColor3ubv ( Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$23.glColor3ubv$MH, "glColor3ubv");
        try {
            mh$.invokeExact(v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3uiv$MH() {
        return RuntimeHelper.requireNonNull(constants$23.glColor3uiv$MH,"glColor3uiv");
    }
    public static void glColor3uiv ( Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$23.glColor3uiv$MH, "glColor3uiv");
        try {
            mh$.invokeExact(v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3usv$MH() {
        return RuntimeHelper.requireNonNull(constants$23.glColor3usv$MH,"glColor3usv");
    }
    public static void glColor3usv ( Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$23.glColor3usv$MH, "glColor3usv");
        try {
            mh$.invokeExact(v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4bv$MH() {
        return RuntimeHelper.requireNonNull(constants$24.glColor4bv$MH,"glColor4bv");
    }
    public static void glColor4bv ( Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$24.glColor4bv$MH, "glColor4bv");
        try {
            mh$.invokeExact(v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4dv$MH() {
        return RuntimeHelper.requireNonNull(constants$24.glColor4dv$MH,"glColor4dv");
    }
    public static void glColor4dv ( Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$24.glColor4dv$MH, "glColor4dv");
        try {
            mh$.invokeExact(v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4fv$MH() {
        return RuntimeHelper.requireNonNull(constants$24.glColor4fv$MH,"glColor4fv");
    }
    public static void glColor4fv ( Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$24.glColor4fv$MH, "glColor4fv");
        try {
            mh$.invokeExact(v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4iv$MH() {
        return RuntimeHelper.requireNonNull(constants$24.glColor4iv$MH,"glColor4iv");
    }
    public static void glColor4iv ( Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$24.glColor4iv$MH, "glColor4iv");
        try {
            mh$.invokeExact(v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4sv$MH() {
        return RuntimeHelper.requireNonNull(constants$24.glColor4sv$MH,"glColor4sv");
    }
    public static void glColor4sv ( Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$24.glColor4sv$MH, "glColor4sv");
        try {
            mh$.invokeExact(v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4ubv$MH() {
        return RuntimeHelper.requireNonNull(constants$24.glColor4ubv$MH,"glColor4ubv");
    }
    public static void glColor4ubv ( Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$24.glColor4ubv$MH, "glColor4ubv");
        try {
            mh$.invokeExact(v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4uiv$MH() {
        return RuntimeHelper.requireNonNull(constants$25.glColor4uiv$MH,"glColor4uiv");
    }
    public static void glColor4uiv ( Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$25.glColor4uiv$MH, "glColor4uiv");
        try {
            mh$.invokeExact(v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4usv$MH() {
        return RuntimeHelper.requireNonNull(constants$25.glColor4usv$MH,"glColor4usv");
    }
    public static void glColor4usv ( Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$25.glColor4usv$MH, "glColor4usv");
        try {
            mh$.invokeExact(v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord1d$MH() {
        return RuntimeHelper.requireNonNull(constants$25.glTexCoord1d$MH,"glTexCoord1d");
    }
    public static void glTexCoord1d ( double s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$25.glTexCoord1d$MH, "glTexCoord1d");
        try {
            mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord1f$MH() {
        return RuntimeHelper.requireNonNull(constants$25.glTexCoord1f$MH,"glTexCoord1f");
    }
    public static void glTexCoord1f ( float s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$25.glTexCoord1f$MH, "glTexCoord1f");
        try {
            mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord1i$MH() {
        return RuntimeHelper.requireNonNull(constants$25.glTexCoord1i$MH,"glTexCoord1i");
    }
    public static void glTexCoord1i ( int s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$25.glTexCoord1i$MH, "glTexCoord1i");
        try {
            mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord1s$MH() {
        return RuntimeHelper.requireNonNull(constants$25.glTexCoord1s$MH,"glTexCoord1s");
    }
    public static void glTexCoord1s ( short s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$25.glTexCoord1s$MH, "glTexCoord1s");
        try {
            mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord2d$MH() {
        return RuntimeHelper.requireNonNull(constants$26.glTexCoord2d$MH,"glTexCoord2d");
    }
    public static void glTexCoord2d ( double s,  double t) {
        var mh$ = RuntimeHelper.requireNonNull(constants$26.glTexCoord2d$MH, "glTexCoord2d");
        try {
            mh$.invokeExact(s, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord2f$MH() {
        return RuntimeHelper.requireNonNull(constants$26.glTexCoord2f$MH,"glTexCoord2f");
    }
    public static void glTexCoord2f ( float s,  float t) {
        var mh$ = RuntimeHelper.requireNonNull(constants$26.glTexCoord2f$MH, "glTexCoord2f");
        try {
            mh$.invokeExact(s, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord2i$MH() {
        return RuntimeHelper.requireNonNull(constants$26.glTexCoord2i$MH,"glTexCoord2i");
    }
    public static void glTexCoord2i ( int s,  int t) {
        var mh$ = RuntimeHelper.requireNonNull(constants$26.glTexCoord2i$MH, "glTexCoord2i");
        try {
            mh$.invokeExact(s, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord2s$MH() {
        return RuntimeHelper.requireNonNull(constants$26.glTexCoord2s$MH,"glTexCoord2s");
    }
    public static void glTexCoord2s ( short s,  short t) {
        var mh$ = RuntimeHelper.requireNonNull(constants$26.glTexCoord2s$MH, "glTexCoord2s");
        try {
            mh$.invokeExact(s, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord3d$MH() {
        return RuntimeHelper.requireNonNull(constants$26.glTexCoord3d$MH,"glTexCoord3d");
    }
    public static void glTexCoord3d ( double s,  double t,  double r) {
        var mh$ = RuntimeHelper.requireNonNull(constants$26.glTexCoord3d$MH, "glTexCoord3d");
        try {
            mh$.invokeExact(s, t, r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord3f$MH() {
        return RuntimeHelper.requireNonNull(constants$26.glTexCoord3f$MH,"glTexCoord3f");
    }
    public static void glTexCoord3f ( float s,  float t,  float r) {
        var mh$ = RuntimeHelper.requireNonNull(constants$26.glTexCoord3f$MH, "glTexCoord3f");
        try {
            mh$.invokeExact(s, t, r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord3i$MH() {
        return RuntimeHelper.requireNonNull(constants$27.glTexCoord3i$MH,"glTexCoord3i");
    }
    public static void glTexCoord3i ( int s,  int t,  int r) {
        var mh$ = RuntimeHelper.requireNonNull(constants$27.glTexCoord3i$MH, "glTexCoord3i");
        try {
            mh$.invokeExact(s, t, r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord3s$MH() {
        return RuntimeHelper.requireNonNull(constants$27.glTexCoord3s$MH,"glTexCoord3s");
    }
    public static void glTexCoord3s ( short s,  short t,  short r) {
        var mh$ = RuntimeHelper.requireNonNull(constants$27.glTexCoord3s$MH, "glTexCoord3s");
        try {
            mh$.invokeExact(s, t, r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord4d$MH() {
        return RuntimeHelper.requireNonNull(constants$27.glTexCoord4d$MH,"glTexCoord4d");
    }
    public static void glTexCoord4d ( double s,  double t,  double r,  double q) {
        var mh$ = RuntimeHelper.requireNonNull(constants$27.glTexCoord4d$MH, "glTexCoord4d");
        try {
            mh$.invokeExact(s, t, r, q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord4f$MH() {
        return RuntimeHelper.requireNonNull(constants$27.glTexCoord4f$MH,"glTexCoord4f");
    }
    public static void glTexCoord4f ( float s,  float t,  float r,  float q) {
        var mh$ = RuntimeHelper.requireNonNull(constants$27.glTexCoord4f$MH, "glTexCoord4f");
        try {
            mh$.invokeExact(s, t, r, q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord4i$MH() {
        return RuntimeHelper.requireNonNull(constants$27.glTexCoord4i$MH,"glTexCoord4i");
    }
    public static void glTexCoord4i ( int s,  int t,  int r,  int q) {
        var mh$ = RuntimeHelper.requireNonNull(constants$27.glTexCoord4i$MH, "glTexCoord4i");
        try {
            mh$.invokeExact(s, t, r, q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord4s$MH() {
        return RuntimeHelper.requireNonNull(constants$27.glTexCoord4s$MH,"glTexCoord4s");
    }
    public static void glTexCoord4s ( short s,  short t,  short r,  short q) {
        var mh$ = RuntimeHelper.requireNonNull(constants$27.glTexCoord4s$MH, "glTexCoord4s");
        try {
            mh$.invokeExact(s, t, r, q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord1dv$MH() {
        return RuntimeHelper.requireNonNull(constants$28.glTexCoord1dv$MH,"glTexCoord1dv");
    }
    public static void glTexCoord1dv ( Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$28.glTexCoord1dv$MH, "glTexCoord1dv");
        try {
            mh$.invokeExact(v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord1fv$MH() {
        return RuntimeHelper.requireNonNull(constants$28.glTexCoord1fv$MH,"glTexCoord1fv");
    }
    public static void glTexCoord1fv ( Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$28.glTexCoord1fv$MH, "glTexCoord1fv");
        try {
            mh$.invokeExact(v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord1iv$MH() {
        return RuntimeHelper.requireNonNull(constants$28.glTexCoord1iv$MH,"glTexCoord1iv");
    }
    public static void glTexCoord1iv ( Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$28.glTexCoord1iv$MH, "glTexCoord1iv");
        try {
            mh$.invokeExact(v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord1sv$MH() {
        return RuntimeHelper.requireNonNull(constants$28.glTexCoord1sv$MH,"glTexCoord1sv");
    }
    public static void glTexCoord1sv ( Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$28.glTexCoord1sv$MH, "glTexCoord1sv");
        try {
            mh$.invokeExact(v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord2dv$MH() {
        return RuntimeHelper.requireNonNull(constants$28.glTexCoord2dv$MH,"glTexCoord2dv");
    }
    public static void glTexCoord2dv ( Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$28.glTexCoord2dv$MH, "glTexCoord2dv");
        try {
            mh$.invokeExact(v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord2fv$MH() {
        return RuntimeHelper.requireNonNull(constants$28.glTexCoord2fv$MH,"glTexCoord2fv");
    }
    public static void glTexCoord2fv ( Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$28.glTexCoord2fv$MH, "glTexCoord2fv");
        try {
            mh$.invokeExact(v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord2iv$MH() {
        return RuntimeHelper.requireNonNull(constants$29.glTexCoord2iv$MH,"glTexCoord2iv");
    }
    public static void glTexCoord2iv ( Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$29.glTexCoord2iv$MH, "glTexCoord2iv");
        try {
            mh$.invokeExact(v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord2sv$MH() {
        return RuntimeHelper.requireNonNull(constants$29.glTexCoord2sv$MH,"glTexCoord2sv");
    }
    public static void glTexCoord2sv ( Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$29.glTexCoord2sv$MH, "glTexCoord2sv");
        try {
            mh$.invokeExact(v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord3dv$MH() {
        return RuntimeHelper.requireNonNull(constants$29.glTexCoord3dv$MH,"glTexCoord3dv");
    }
    public static void glTexCoord3dv ( Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$29.glTexCoord3dv$MH, "glTexCoord3dv");
        try {
            mh$.invokeExact(v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord3fv$MH() {
        return RuntimeHelper.requireNonNull(constants$29.glTexCoord3fv$MH,"glTexCoord3fv");
    }
    public static void glTexCoord3fv ( Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$29.glTexCoord3fv$MH, "glTexCoord3fv");
        try {
            mh$.invokeExact(v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord3iv$MH() {
        return RuntimeHelper.requireNonNull(constants$29.glTexCoord3iv$MH,"glTexCoord3iv");
    }
    public static void glTexCoord3iv ( Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$29.glTexCoord3iv$MH, "glTexCoord3iv");
        try {
            mh$.invokeExact(v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord3sv$MH() {
        return RuntimeHelper.requireNonNull(constants$29.glTexCoord3sv$MH,"glTexCoord3sv");
    }
    public static void glTexCoord3sv ( Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$29.glTexCoord3sv$MH, "glTexCoord3sv");
        try {
            mh$.invokeExact(v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord4dv$MH() {
        return RuntimeHelper.requireNonNull(constants$30.glTexCoord4dv$MH,"glTexCoord4dv");
    }
    public static void glTexCoord4dv ( Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$30.glTexCoord4dv$MH, "glTexCoord4dv");
        try {
            mh$.invokeExact(v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord4fv$MH() {
        return RuntimeHelper.requireNonNull(constants$30.glTexCoord4fv$MH,"glTexCoord4fv");
    }
    public static void glTexCoord4fv ( Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$30.glTexCoord4fv$MH, "glTexCoord4fv");
        try {
            mh$.invokeExact(v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord4iv$MH() {
        return RuntimeHelper.requireNonNull(constants$30.glTexCoord4iv$MH,"glTexCoord4iv");
    }
    public static void glTexCoord4iv ( Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$30.glTexCoord4iv$MH, "glTexCoord4iv");
        try {
            mh$.invokeExact(v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord4sv$MH() {
        return RuntimeHelper.requireNonNull(constants$30.glTexCoord4sv$MH,"glTexCoord4sv");
    }
    public static void glTexCoord4sv ( Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$30.glTexCoord4sv$MH, "glTexCoord4sv");
        try {
            mh$.invokeExact(v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos2d$MH() {
        return RuntimeHelper.requireNonNull(constants$30.glRasterPos2d$MH,"glRasterPos2d");
    }
    public static void glRasterPos2d ( double x,  double y) {
        var mh$ = RuntimeHelper.requireNonNull(constants$30.glRasterPos2d$MH, "glRasterPos2d");
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos2f$MH() {
        return RuntimeHelper.requireNonNull(constants$30.glRasterPos2f$MH,"glRasterPos2f");
    }
    public static void glRasterPos2f ( float x,  float y) {
        var mh$ = RuntimeHelper.requireNonNull(constants$30.glRasterPos2f$MH, "glRasterPos2f");
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos2i$MH() {
        return RuntimeHelper.requireNonNull(constants$31.glRasterPos2i$MH,"glRasterPos2i");
    }
    public static void glRasterPos2i ( int x,  int y) {
        var mh$ = RuntimeHelper.requireNonNull(constants$31.glRasterPos2i$MH, "glRasterPos2i");
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos2s$MH() {
        return RuntimeHelper.requireNonNull(constants$31.glRasterPos2s$MH,"glRasterPos2s");
    }
    public static void glRasterPos2s ( short x,  short y) {
        var mh$ = RuntimeHelper.requireNonNull(constants$31.glRasterPos2s$MH, "glRasterPos2s");
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos3d$MH() {
        return RuntimeHelper.requireNonNull(constants$31.glRasterPos3d$MH,"glRasterPos3d");
    }
    public static void glRasterPos3d ( double x,  double y,  double z) {
        var mh$ = RuntimeHelper.requireNonNull(constants$31.glRasterPos3d$MH, "glRasterPos3d");
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos3f$MH() {
        return RuntimeHelper.requireNonNull(constants$31.glRasterPos3f$MH,"glRasterPos3f");
    }
    public static void glRasterPos3f ( float x,  float y,  float z) {
        var mh$ = RuntimeHelper.requireNonNull(constants$31.glRasterPos3f$MH, "glRasterPos3f");
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos3i$MH() {
        return RuntimeHelper.requireNonNull(constants$31.glRasterPos3i$MH,"glRasterPos3i");
    }
    public static void glRasterPos3i ( int x,  int y,  int z) {
        var mh$ = RuntimeHelper.requireNonNull(constants$31.glRasterPos3i$MH, "glRasterPos3i");
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos3s$MH() {
        return RuntimeHelper.requireNonNull(constants$31.glRasterPos3s$MH,"glRasterPos3s");
    }
    public static void glRasterPos3s ( short x,  short y,  short z) {
        var mh$ = RuntimeHelper.requireNonNull(constants$31.glRasterPos3s$MH, "glRasterPos3s");
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos4d$MH() {
        return RuntimeHelper.requireNonNull(constants$32.glRasterPos4d$MH,"glRasterPos4d");
    }
    public static void glRasterPos4d ( double x,  double y,  double z,  double w) {
        var mh$ = RuntimeHelper.requireNonNull(constants$32.glRasterPos4d$MH, "glRasterPos4d");
        try {
            mh$.invokeExact(x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos4f$MH() {
        return RuntimeHelper.requireNonNull(constants$32.glRasterPos4f$MH,"glRasterPos4f");
    }
    public static void glRasterPos4f ( float x,  float y,  float z,  float w) {
        var mh$ = RuntimeHelper.requireNonNull(constants$32.glRasterPos4f$MH, "glRasterPos4f");
        try {
            mh$.invokeExact(x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos4i$MH() {
        return RuntimeHelper.requireNonNull(constants$32.glRasterPos4i$MH,"glRasterPos4i");
    }
    public static void glRasterPos4i ( int x,  int y,  int z,  int w) {
        var mh$ = RuntimeHelper.requireNonNull(constants$32.glRasterPos4i$MH, "glRasterPos4i");
        try {
            mh$.invokeExact(x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos4s$MH() {
        return RuntimeHelper.requireNonNull(constants$32.glRasterPos4s$MH,"glRasterPos4s");
    }
    public static void glRasterPos4s ( short x,  short y,  short z,  short w) {
        var mh$ = RuntimeHelper.requireNonNull(constants$32.glRasterPos4s$MH, "glRasterPos4s");
        try {
            mh$.invokeExact(x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos2dv$MH() {
        return RuntimeHelper.requireNonNull(constants$32.glRasterPos2dv$MH,"glRasterPos2dv");
    }
    public static void glRasterPos2dv ( Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$32.glRasterPos2dv$MH, "glRasterPos2dv");
        try {
            mh$.invokeExact(v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos2fv$MH() {
        return RuntimeHelper.requireNonNull(constants$32.glRasterPos2fv$MH,"glRasterPos2fv");
    }
    public static void glRasterPos2fv ( Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$32.glRasterPos2fv$MH, "glRasterPos2fv");
        try {
            mh$.invokeExact(v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos2iv$MH() {
        return RuntimeHelper.requireNonNull(constants$33.glRasterPos2iv$MH,"glRasterPos2iv");
    }
    public static void glRasterPos2iv ( Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$33.glRasterPos2iv$MH, "glRasterPos2iv");
        try {
            mh$.invokeExact(v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos2sv$MH() {
        return RuntimeHelper.requireNonNull(constants$33.glRasterPos2sv$MH,"glRasterPos2sv");
    }
    public static void glRasterPos2sv ( Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$33.glRasterPos2sv$MH, "glRasterPos2sv");
        try {
            mh$.invokeExact(v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos3dv$MH() {
        return RuntimeHelper.requireNonNull(constants$33.glRasterPos3dv$MH,"glRasterPos3dv");
    }
    public static void glRasterPos3dv ( Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$33.glRasterPos3dv$MH, "glRasterPos3dv");
        try {
            mh$.invokeExact(v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos3fv$MH() {
        return RuntimeHelper.requireNonNull(constants$33.glRasterPos3fv$MH,"glRasterPos3fv");
    }
    public static void glRasterPos3fv ( Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$33.glRasterPos3fv$MH, "glRasterPos3fv");
        try {
            mh$.invokeExact(v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos3iv$MH() {
        return RuntimeHelper.requireNonNull(constants$33.glRasterPos3iv$MH,"glRasterPos3iv");
    }
    public static void glRasterPos3iv ( Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$33.glRasterPos3iv$MH, "glRasterPos3iv");
        try {
            mh$.invokeExact(v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos3sv$MH() {
        return RuntimeHelper.requireNonNull(constants$33.glRasterPos3sv$MH,"glRasterPos3sv");
    }
    public static void glRasterPos3sv ( Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$33.glRasterPos3sv$MH, "glRasterPos3sv");
        try {
            mh$.invokeExact(v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos4dv$MH() {
        return RuntimeHelper.requireNonNull(constants$34.glRasterPos4dv$MH,"glRasterPos4dv");
    }
    public static void glRasterPos4dv ( Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$34.glRasterPos4dv$MH, "glRasterPos4dv");
        try {
            mh$.invokeExact(v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos4fv$MH() {
        return RuntimeHelper.requireNonNull(constants$34.glRasterPos4fv$MH,"glRasterPos4fv");
    }
    public static void glRasterPos4fv ( Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$34.glRasterPos4fv$MH, "glRasterPos4fv");
        try {
            mh$.invokeExact(v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos4iv$MH() {
        return RuntimeHelper.requireNonNull(constants$34.glRasterPos4iv$MH,"glRasterPos4iv");
    }
    public static void glRasterPos4iv ( Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$34.glRasterPos4iv$MH, "glRasterPos4iv");
        try {
            mh$.invokeExact(v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos4sv$MH() {
        return RuntimeHelper.requireNonNull(constants$34.glRasterPos4sv$MH,"glRasterPos4sv");
    }
    public static void glRasterPos4sv ( Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$34.glRasterPos4sv$MH, "glRasterPos4sv");
        try {
            mh$.invokeExact(v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRectd$MH() {
        return RuntimeHelper.requireNonNull(constants$34.glRectd$MH,"glRectd");
    }
    public static void glRectd ( double x1,  double y1,  double x2,  double y2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$34.glRectd$MH, "glRectd");
        try {
            mh$.invokeExact(x1, y1, x2, y2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRectf$MH() {
        return RuntimeHelper.requireNonNull(constants$34.glRectf$MH,"glRectf");
    }
    public static void glRectf ( float x1,  float y1,  float x2,  float y2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$34.glRectf$MH, "glRectf");
        try {
            mh$.invokeExact(x1, y1, x2, y2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRecti$MH() {
        return RuntimeHelper.requireNonNull(constants$35.glRecti$MH,"glRecti");
    }
    public static void glRecti ( int x1,  int y1,  int x2,  int y2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$35.glRecti$MH, "glRecti");
        try {
            mh$.invokeExact(x1, y1, x2, y2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRects$MH() {
        return RuntimeHelper.requireNonNull(constants$35.glRects$MH,"glRects");
    }
    public static void glRects ( short x1,  short y1,  short x2,  short y2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$35.glRects$MH, "glRects");
        try {
            mh$.invokeExact(x1, y1, x2, y2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRectdv$MH() {
        return RuntimeHelper.requireNonNull(constants$35.glRectdv$MH,"glRectdv");
    }
    public static void glRectdv ( Addressable v1,  Addressable v2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$35.glRectdv$MH, "glRectdv");
        try {
            mh$.invokeExact(v1.address(), v2.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRectfv$MH() {
        return RuntimeHelper.requireNonNull(constants$35.glRectfv$MH,"glRectfv");
    }
    public static void glRectfv ( Addressable v1,  Addressable v2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$35.glRectfv$MH, "glRectfv");
        try {
            mh$.invokeExact(v1.address(), v2.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRectiv$MH() {
        return RuntimeHelper.requireNonNull(constants$35.glRectiv$MH,"glRectiv");
    }
    public static void glRectiv ( Addressable v1,  Addressable v2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$35.glRectiv$MH, "glRectiv");
        try {
            mh$.invokeExact(v1.address(), v2.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRectsv$MH() {
        return RuntimeHelper.requireNonNull(constants$35.glRectsv$MH,"glRectsv");
    }
    public static void glRectsv ( Addressable v1,  Addressable v2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$35.glRectsv$MH, "glRectsv");
        try {
            mh$.invokeExact(v1.address(), v2.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexPointer$MH() {
        return RuntimeHelper.requireNonNull(constants$36.glVertexPointer$MH,"glVertexPointer");
    }
    public static void glVertexPointer ( int size,  int type,  int stride,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$36.glVertexPointer$MH, "glVertexPointer");
        try {
            mh$.invokeExact(size, type, stride, ptr.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormalPointer$MH() {
        return RuntimeHelper.requireNonNull(constants$36.glNormalPointer$MH,"glNormalPointer");
    }
    public static void glNormalPointer ( int type,  int stride,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$36.glNormalPointer$MH, "glNormalPointer");
        try {
            mh$.invokeExact(type, stride, ptr.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColorPointer$MH() {
        return RuntimeHelper.requireNonNull(constants$36.glColorPointer$MH,"glColorPointer");
    }
    public static void glColorPointer ( int size,  int type,  int stride,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$36.glColorPointer$MH, "glColorPointer");
        try {
            mh$.invokeExact(size, type, stride, ptr.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexPointer$MH() {
        return RuntimeHelper.requireNonNull(constants$36.glIndexPointer$MH,"glIndexPointer");
    }
    public static void glIndexPointer ( int type,  int stride,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$36.glIndexPointer$MH, "glIndexPointer");
        try {
            mh$.invokeExact(type, stride, ptr.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoordPointer$MH() {
        return RuntimeHelper.requireNonNull(constants$36.glTexCoordPointer$MH,"glTexCoordPointer");
    }
    public static void glTexCoordPointer ( int size,  int type,  int stride,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$36.glTexCoordPointer$MH, "glTexCoordPointer");
        try {
            mh$.invokeExact(size, type, stride, ptr.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEdgeFlagPointer$MH() {
        return RuntimeHelper.requireNonNull(constants$36.glEdgeFlagPointer$MH,"glEdgeFlagPointer");
    }
    public static void glEdgeFlagPointer ( int stride,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$36.glEdgeFlagPointer$MH, "glEdgeFlagPointer");
        try {
            mh$.invokeExact(stride, ptr.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetPointerv$MH() {
        return RuntimeHelper.requireNonNull(constants$37.glGetPointerv$MH,"glGetPointerv");
    }
    public static void glGetPointerv ( int pname,  Addressable params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$37.glGetPointerv$MH, "glGetPointerv");
        try {
            mh$.invokeExact(pname, params.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glArrayElement$MH() {
        return RuntimeHelper.requireNonNull(constants$37.glArrayElement$MH,"glArrayElement");
    }
    public static void glArrayElement ( int i) {
        var mh$ = RuntimeHelper.requireNonNull(constants$37.glArrayElement$MH, "glArrayElement");
        try {
            mh$.invokeExact(i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawArrays$MH() {
        return RuntimeHelper.requireNonNull(constants$37.glDrawArrays$MH,"glDrawArrays");
    }
    public static void glDrawArrays ( int mode,  int first,  int count) {
        var mh$ = RuntimeHelper.requireNonNull(constants$37.glDrawArrays$MH, "glDrawArrays");
        try {
            mh$.invokeExact(mode, first, count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawElements$MH() {
        return RuntimeHelper.requireNonNull(constants$37.glDrawElements$MH,"glDrawElements");
    }
    public static void glDrawElements ( int mode,  int count,  int type,  Addressable indices) {
        var mh$ = RuntimeHelper.requireNonNull(constants$37.glDrawElements$MH, "glDrawElements");
        try {
            mh$.invokeExact(mode, count, type, indices.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glInterleavedArrays$MH() {
        return RuntimeHelper.requireNonNull(constants$37.glInterleavedArrays$MH,"glInterleavedArrays");
    }
    public static void glInterleavedArrays ( int format,  int stride,  Addressable pointer) {
        var mh$ = RuntimeHelper.requireNonNull(constants$37.glInterleavedArrays$MH, "glInterleavedArrays");
        try {
            mh$.invokeExact(format, stride, pointer.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glShadeModel$MH() {
        return RuntimeHelper.requireNonNull(constants$37.glShadeModel$MH,"glShadeModel");
    }
    public static void glShadeModel ( int mode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$37.glShadeModel$MH, "glShadeModel");
        try {
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLightf$MH() {
        return RuntimeHelper.requireNonNull(constants$38.glLightf$MH,"glLightf");
    }
    public static void glLightf ( int light,  int pname,  float param) {
        var mh$ = RuntimeHelper.requireNonNull(constants$38.glLightf$MH, "glLightf");
        try {
            mh$.invokeExact(light, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLighti$MH() {
        return RuntimeHelper.requireNonNull(constants$38.glLighti$MH,"glLighti");
    }
    public static void glLighti ( int light,  int pname,  int param) {
        var mh$ = RuntimeHelper.requireNonNull(constants$38.glLighti$MH, "glLighti");
        try {
            mh$.invokeExact(light, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLightfv$MH() {
        return RuntimeHelper.requireNonNull(constants$38.glLightfv$MH,"glLightfv");
    }
    public static void glLightfv ( int light,  int pname,  Addressable params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$38.glLightfv$MH, "glLightfv");
        try {
            mh$.invokeExact(light, pname, params.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLightiv$MH() {
        return RuntimeHelper.requireNonNull(constants$38.glLightiv$MH,"glLightiv");
    }
    public static void glLightiv ( int light,  int pname,  Addressable params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$38.glLightiv$MH, "glLightiv");
        try {
            mh$.invokeExact(light, pname, params.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetLightfv$MH() {
        return RuntimeHelper.requireNonNull(constants$38.glGetLightfv$MH,"glGetLightfv");
    }
    public static void glGetLightfv ( int light,  int pname,  Addressable params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$38.glGetLightfv$MH, "glGetLightfv");
        try {
            mh$.invokeExact(light, pname, params.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetLightiv$MH() {
        return RuntimeHelper.requireNonNull(constants$38.glGetLightiv$MH,"glGetLightiv");
    }
    public static void glGetLightiv ( int light,  int pname,  Addressable params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$38.glGetLightiv$MH, "glGetLightiv");
        try {
            mh$.invokeExact(light, pname, params.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLightModelf$MH() {
        return RuntimeHelper.requireNonNull(constants$39.glLightModelf$MH,"glLightModelf");
    }
    public static void glLightModelf ( int pname,  float param) {
        var mh$ = RuntimeHelper.requireNonNull(constants$39.glLightModelf$MH, "glLightModelf");
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLightModeli$MH() {
        return RuntimeHelper.requireNonNull(constants$39.glLightModeli$MH,"glLightModeli");
    }
    public static void glLightModeli ( int pname,  int param) {
        var mh$ = RuntimeHelper.requireNonNull(constants$39.glLightModeli$MH, "glLightModeli");
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLightModelfv$MH() {
        return RuntimeHelper.requireNonNull(constants$39.glLightModelfv$MH,"glLightModelfv");
    }
    public static void glLightModelfv ( int pname,  Addressable params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$39.glLightModelfv$MH, "glLightModelfv");
        try {
            mh$.invokeExact(pname, params.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLightModeliv$MH() {
        return RuntimeHelper.requireNonNull(constants$39.glLightModeliv$MH,"glLightModeliv");
    }
    public static void glLightModeliv ( int pname,  Addressable params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$39.glLightModeliv$MH, "glLightModeliv");
        try {
            mh$.invokeExact(pname, params.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMaterialf$MH() {
        return RuntimeHelper.requireNonNull(constants$39.glMaterialf$MH,"glMaterialf");
    }
    public static void glMaterialf ( int face,  int pname,  float param) {
        var mh$ = RuntimeHelper.requireNonNull(constants$39.glMaterialf$MH, "glMaterialf");
        try {
            mh$.invokeExact(face, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMateriali$MH() {
        return RuntimeHelper.requireNonNull(constants$39.glMateriali$MH,"glMateriali");
    }
    public static void glMateriali ( int face,  int pname,  int param) {
        var mh$ = RuntimeHelper.requireNonNull(constants$39.glMateriali$MH, "glMateriali");
        try {
            mh$.invokeExact(face, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMaterialfv$MH() {
        return RuntimeHelper.requireNonNull(constants$40.glMaterialfv$MH,"glMaterialfv");
    }
    public static void glMaterialfv ( int face,  int pname,  Addressable params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$40.glMaterialfv$MH, "glMaterialfv");
        try {
            mh$.invokeExact(face, pname, params.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMaterialiv$MH() {
        return RuntimeHelper.requireNonNull(constants$40.glMaterialiv$MH,"glMaterialiv");
    }
    public static void glMaterialiv ( int face,  int pname,  Addressable params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$40.glMaterialiv$MH, "glMaterialiv");
        try {
            mh$.invokeExact(face, pname, params.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetMaterialfv$MH() {
        return RuntimeHelper.requireNonNull(constants$40.glGetMaterialfv$MH,"glGetMaterialfv");
    }
    public static void glGetMaterialfv ( int face,  int pname,  Addressable params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$40.glGetMaterialfv$MH, "glGetMaterialfv");
        try {
            mh$.invokeExact(face, pname, params.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetMaterialiv$MH() {
        return RuntimeHelper.requireNonNull(constants$40.glGetMaterialiv$MH,"glGetMaterialiv");
    }
    public static void glGetMaterialiv ( int face,  int pname,  Addressable params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$40.glGetMaterialiv$MH, "glGetMaterialiv");
        try {
            mh$.invokeExact(face, pname, params.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColorMaterial$MH() {
        return RuntimeHelper.requireNonNull(constants$40.glColorMaterial$MH,"glColorMaterial");
    }
    public static void glColorMaterial ( int face,  int mode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$40.glColorMaterial$MH, "glColorMaterial");
        try {
            mh$.invokeExact(face, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPixelZoom$MH() {
        return RuntimeHelper.requireNonNull(constants$40.glPixelZoom$MH,"glPixelZoom");
    }
    public static void glPixelZoom ( float xfactor,  float yfactor) {
        var mh$ = RuntimeHelper.requireNonNull(constants$40.glPixelZoom$MH, "glPixelZoom");
        try {
            mh$.invokeExact(xfactor, yfactor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPixelStoref$MH() {
        return RuntimeHelper.requireNonNull(constants$41.glPixelStoref$MH,"glPixelStoref");
    }
    public static void glPixelStoref ( int pname,  float param) {
        var mh$ = RuntimeHelper.requireNonNull(constants$41.glPixelStoref$MH, "glPixelStoref");
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPixelStorei$MH() {
        return RuntimeHelper.requireNonNull(constants$41.glPixelStorei$MH,"glPixelStorei");
    }
    public static void glPixelStorei ( int pname,  int param) {
        var mh$ = RuntimeHelper.requireNonNull(constants$41.glPixelStorei$MH, "glPixelStorei");
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPixelTransferf$MH() {
        return RuntimeHelper.requireNonNull(constants$41.glPixelTransferf$MH,"glPixelTransferf");
    }
    public static void glPixelTransferf ( int pname,  float param) {
        var mh$ = RuntimeHelper.requireNonNull(constants$41.glPixelTransferf$MH, "glPixelTransferf");
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPixelTransferi$MH() {
        return RuntimeHelper.requireNonNull(constants$41.glPixelTransferi$MH,"glPixelTransferi");
    }
    public static void glPixelTransferi ( int pname,  int param) {
        var mh$ = RuntimeHelper.requireNonNull(constants$41.glPixelTransferi$MH, "glPixelTransferi");
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPixelMapfv$MH() {
        return RuntimeHelper.requireNonNull(constants$41.glPixelMapfv$MH,"glPixelMapfv");
    }
    public static void glPixelMapfv ( int map,  int mapsize,  Addressable values) {
        var mh$ = RuntimeHelper.requireNonNull(constants$41.glPixelMapfv$MH, "glPixelMapfv");
        try {
            mh$.invokeExact(map, mapsize, values.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPixelMapuiv$MH() {
        return RuntimeHelper.requireNonNull(constants$41.glPixelMapuiv$MH,"glPixelMapuiv");
    }
    public static void glPixelMapuiv ( int map,  int mapsize,  Addressable values) {
        var mh$ = RuntimeHelper.requireNonNull(constants$41.glPixelMapuiv$MH, "glPixelMapuiv");
        try {
            mh$.invokeExact(map, mapsize, values.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPixelMapusv$MH() {
        return RuntimeHelper.requireNonNull(constants$42.glPixelMapusv$MH,"glPixelMapusv");
    }
    public static void glPixelMapusv ( int map,  int mapsize,  Addressable values) {
        var mh$ = RuntimeHelper.requireNonNull(constants$42.glPixelMapusv$MH, "glPixelMapusv");
        try {
            mh$.invokeExact(map, mapsize, values.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetPixelMapfv$MH() {
        return RuntimeHelper.requireNonNull(constants$42.glGetPixelMapfv$MH,"glGetPixelMapfv");
    }
    public static void glGetPixelMapfv ( int map,  Addressable values) {
        var mh$ = RuntimeHelper.requireNonNull(constants$42.glGetPixelMapfv$MH, "glGetPixelMapfv");
        try {
            mh$.invokeExact(map, values.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetPixelMapuiv$MH() {
        return RuntimeHelper.requireNonNull(constants$42.glGetPixelMapuiv$MH,"glGetPixelMapuiv");
    }
    public static void glGetPixelMapuiv ( int map,  Addressable values) {
        var mh$ = RuntimeHelper.requireNonNull(constants$42.glGetPixelMapuiv$MH, "glGetPixelMapuiv");
        try {
            mh$.invokeExact(map, values.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetPixelMapusv$MH() {
        return RuntimeHelper.requireNonNull(constants$42.glGetPixelMapusv$MH,"glGetPixelMapusv");
    }
    public static void glGetPixelMapusv ( int map,  Addressable values) {
        var mh$ = RuntimeHelper.requireNonNull(constants$42.glGetPixelMapusv$MH, "glGetPixelMapusv");
        try {
            mh$.invokeExact(map, values.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBitmap$MH() {
        return RuntimeHelper.requireNonNull(constants$42.glBitmap$MH,"glBitmap");
    }
    public static void glBitmap ( int width,  int height,  float xorig,  float yorig,  float xmove,  float ymove,  Addressable bitmap) {
        var mh$ = RuntimeHelper.requireNonNull(constants$42.glBitmap$MH, "glBitmap");
        try {
            mh$.invokeExact(width, height, xorig, yorig, xmove, ymove, bitmap.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glReadPixels$MH() {
        return RuntimeHelper.requireNonNull(constants$42.glReadPixels$MH,"glReadPixels");
    }
    public static void glReadPixels ( int x,  int y,  int width,  int height,  int format,  int type,  Addressable pixels) {
        var mh$ = RuntimeHelper.requireNonNull(constants$42.glReadPixels$MH, "glReadPixels");
        try {
            mh$.invokeExact(x, y, width, height, format, type, pixels.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawPixels$MH() {
        return RuntimeHelper.requireNonNull(constants$43.glDrawPixels$MH,"glDrawPixels");
    }
    public static void glDrawPixels ( int width,  int height,  int format,  int type,  Addressable pixels) {
        var mh$ = RuntimeHelper.requireNonNull(constants$43.glDrawPixels$MH, "glDrawPixels");
        try {
            mh$.invokeExact(width, height, format, type, pixels.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyPixels$MH() {
        return RuntimeHelper.requireNonNull(constants$43.glCopyPixels$MH,"glCopyPixels");
    }
    public static void glCopyPixels ( int x,  int y,  int width,  int height,  int type) {
        var mh$ = RuntimeHelper.requireNonNull(constants$43.glCopyPixels$MH, "glCopyPixels");
        try {
            mh$.invokeExact(x, y, width, height, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glStencilFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$43.glStencilFunc$MH,"glStencilFunc");
    }
    public static void glStencilFunc ( int func,  int ref,  int mask) {
        var mh$ = RuntimeHelper.requireNonNull(constants$43.glStencilFunc$MH, "glStencilFunc");
        try {
            mh$.invokeExact(func, ref, mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glStencilMask$MH() {
        return RuntimeHelper.requireNonNull(constants$43.glStencilMask$MH,"glStencilMask");
    }
    public static void glStencilMask ( int mask) {
        var mh$ = RuntimeHelper.requireNonNull(constants$43.glStencilMask$MH, "glStencilMask");
        try {
            mh$.invokeExact(mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glStencilOp$MH() {
        return RuntimeHelper.requireNonNull(constants$43.glStencilOp$MH,"glStencilOp");
    }
    public static void glStencilOp ( int fail,  int zfail,  int zpass) {
        var mh$ = RuntimeHelper.requireNonNull(constants$43.glStencilOp$MH, "glStencilOp");
        try {
            mh$.invokeExact(fail, zfail, zpass);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClearStencil$MH() {
        return RuntimeHelper.requireNonNull(constants$43.glClearStencil$MH,"glClearStencil");
    }
    public static void glClearStencil ( int s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$43.glClearStencil$MH, "glClearStencil");
        try {
            mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexGend$MH() {
        return RuntimeHelper.requireNonNull(constants$44.glTexGend$MH,"glTexGend");
    }
    public static void glTexGend ( int coord,  int pname,  double param) {
        var mh$ = RuntimeHelper.requireNonNull(constants$44.glTexGend$MH, "glTexGend");
        try {
            mh$.invokeExact(coord, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexGenf$MH() {
        return RuntimeHelper.requireNonNull(constants$44.glTexGenf$MH,"glTexGenf");
    }
    public static void glTexGenf ( int coord,  int pname,  float param) {
        var mh$ = RuntimeHelper.requireNonNull(constants$44.glTexGenf$MH, "glTexGenf");
        try {
            mh$.invokeExact(coord, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexGeni$MH() {
        return RuntimeHelper.requireNonNull(constants$44.glTexGeni$MH,"glTexGeni");
    }
    public static void glTexGeni ( int coord,  int pname,  int param) {
        var mh$ = RuntimeHelper.requireNonNull(constants$44.glTexGeni$MH, "glTexGeni");
        try {
            mh$.invokeExact(coord, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexGendv$MH() {
        return RuntimeHelper.requireNonNull(constants$44.glTexGendv$MH,"glTexGendv");
    }
    public static void glTexGendv ( int coord,  int pname,  Addressable params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$44.glTexGendv$MH, "glTexGendv");
        try {
            mh$.invokeExact(coord, pname, params.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexGenfv$MH() {
        return RuntimeHelper.requireNonNull(constants$44.glTexGenfv$MH,"glTexGenfv");
    }
    public static void glTexGenfv ( int coord,  int pname,  Addressable params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$44.glTexGenfv$MH, "glTexGenfv");
        try {
            mh$.invokeExact(coord, pname, params.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexGeniv$MH() {
        return RuntimeHelper.requireNonNull(constants$44.glTexGeniv$MH,"glTexGeniv");
    }
    public static void glTexGeniv ( int coord,  int pname,  Addressable params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$44.glTexGeniv$MH, "glTexGeniv");
        try {
            mh$.invokeExact(coord, pname, params.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexGendv$MH() {
        return RuntimeHelper.requireNonNull(constants$45.glGetTexGendv$MH,"glGetTexGendv");
    }
    public static void glGetTexGendv ( int coord,  int pname,  Addressable params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$45.glGetTexGendv$MH, "glGetTexGendv");
        try {
            mh$.invokeExact(coord, pname, params.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexGenfv$MH() {
        return RuntimeHelper.requireNonNull(constants$45.glGetTexGenfv$MH,"glGetTexGenfv");
    }
    public static void glGetTexGenfv ( int coord,  int pname,  Addressable params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$45.glGetTexGenfv$MH, "glGetTexGenfv");
        try {
            mh$.invokeExact(coord, pname, params.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexGeniv$MH() {
        return RuntimeHelper.requireNonNull(constants$45.glGetTexGeniv$MH,"glGetTexGeniv");
    }
    public static void glGetTexGeniv ( int coord,  int pname,  Addressable params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$45.glGetTexGeniv$MH, "glGetTexGeniv");
        try {
            mh$.invokeExact(coord, pname, params.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexEnvf$MH() {
        return RuntimeHelper.requireNonNull(constants$45.glTexEnvf$MH,"glTexEnvf");
    }
    public static void glTexEnvf ( int target,  int pname,  float param) {
        var mh$ = RuntimeHelper.requireNonNull(constants$45.glTexEnvf$MH, "glTexEnvf");
        try {
            mh$.invokeExact(target, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexEnvi$MH() {
        return RuntimeHelper.requireNonNull(constants$45.glTexEnvi$MH,"glTexEnvi");
    }
    public static void glTexEnvi ( int target,  int pname,  int param) {
        var mh$ = RuntimeHelper.requireNonNull(constants$45.glTexEnvi$MH, "glTexEnvi");
        try {
            mh$.invokeExact(target, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexEnvfv$MH() {
        return RuntimeHelper.requireNonNull(constants$45.glTexEnvfv$MH,"glTexEnvfv");
    }
    public static void glTexEnvfv ( int target,  int pname,  Addressable params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$45.glTexEnvfv$MH, "glTexEnvfv");
        try {
            mh$.invokeExact(target, pname, params.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexEnviv$MH() {
        return RuntimeHelper.requireNonNull(constants$46.glTexEnviv$MH,"glTexEnviv");
    }
    public static void glTexEnviv ( int target,  int pname,  Addressable params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$46.glTexEnviv$MH, "glTexEnviv");
        try {
            mh$.invokeExact(target, pname, params.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexEnvfv$MH() {
        return RuntimeHelper.requireNonNull(constants$46.glGetTexEnvfv$MH,"glGetTexEnvfv");
    }
    public static void glGetTexEnvfv ( int target,  int pname,  Addressable params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$46.glGetTexEnvfv$MH, "glGetTexEnvfv");
        try {
            mh$.invokeExact(target, pname, params.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexEnviv$MH() {
        return RuntimeHelper.requireNonNull(constants$46.glGetTexEnviv$MH,"glGetTexEnviv");
    }
    public static void glGetTexEnviv ( int target,  int pname,  Addressable params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$46.glGetTexEnviv$MH, "glGetTexEnviv");
        try {
            mh$.invokeExact(target, pname, params.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexParameterf$MH() {
        return RuntimeHelper.requireNonNull(constants$46.glTexParameterf$MH,"glTexParameterf");
    }
    public static void glTexParameterf ( int target,  int pname,  float param) {
        var mh$ = RuntimeHelper.requireNonNull(constants$46.glTexParameterf$MH, "glTexParameterf");
        try {
            mh$.invokeExact(target, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexParameteri$MH() {
        return RuntimeHelper.requireNonNull(constants$46.glTexParameteri$MH,"glTexParameteri");
    }
    public static void glTexParameteri ( int target,  int pname,  int param) {
        var mh$ = RuntimeHelper.requireNonNull(constants$46.glTexParameteri$MH, "glTexParameteri");
        try {
            mh$.invokeExact(target, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexParameterfv$MH() {
        return RuntimeHelper.requireNonNull(constants$46.glTexParameterfv$MH,"glTexParameterfv");
    }
    public static void glTexParameterfv ( int target,  int pname,  Addressable params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$46.glTexParameterfv$MH, "glTexParameterfv");
        try {
            mh$.invokeExact(target, pname, params.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexParameteriv$MH() {
        return RuntimeHelper.requireNonNull(constants$47.glTexParameteriv$MH,"glTexParameteriv");
    }
    public static void glTexParameteriv ( int target,  int pname,  Addressable params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$47.glTexParameteriv$MH, "glTexParameteriv");
        try {
            mh$.invokeExact(target, pname, params.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexParameterfv$MH() {
        return RuntimeHelper.requireNonNull(constants$47.glGetTexParameterfv$MH,"glGetTexParameterfv");
    }
    public static void glGetTexParameterfv ( int target,  int pname,  Addressable params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$47.glGetTexParameterfv$MH, "glGetTexParameterfv");
        try {
            mh$.invokeExact(target, pname, params.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexParameteriv$MH() {
        return RuntimeHelper.requireNonNull(constants$47.glGetTexParameteriv$MH,"glGetTexParameteriv");
    }
    public static void glGetTexParameteriv ( int target,  int pname,  Addressable params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$47.glGetTexParameteriv$MH, "glGetTexParameteriv");
        try {
            mh$.invokeExact(target, pname, params.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexLevelParameterfv$MH() {
        return RuntimeHelper.requireNonNull(constants$47.glGetTexLevelParameterfv$MH,"glGetTexLevelParameterfv");
    }
    public static void glGetTexLevelParameterfv ( int target,  int level,  int pname,  Addressable params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$47.glGetTexLevelParameterfv$MH, "glGetTexLevelParameterfv");
        try {
            mh$.invokeExact(target, level, pname, params.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexLevelParameteriv$MH() {
        return RuntimeHelper.requireNonNull(constants$47.glGetTexLevelParameteriv$MH,"glGetTexLevelParameteriv");
    }
    public static void glGetTexLevelParameteriv ( int target,  int level,  int pname,  Addressable params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$47.glGetTexLevelParameteriv$MH, "glGetTexLevelParameteriv");
        try {
            mh$.invokeExact(target, level, pname, params.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexImage1D$MH() {
        return RuntimeHelper.requireNonNull(constants$47.glTexImage1D$MH,"glTexImage1D");
    }
    public static void glTexImage1D ( int target,  int level,  int internalFormat,  int width,  int border,  int format,  int type,  Addressable pixels) {
        var mh$ = RuntimeHelper.requireNonNull(constants$47.glTexImage1D$MH, "glTexImage1D");
        try {
            mh$.invokeExact(target, level, internalFormat, width, border, format, type, pixels.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexImage2D$MH() {
        return RuntimeHelper.requireNonNull(constants$48.glTexImage2D$MH,"glTexImage2D");
    }
    public static void glTexImage2D ( int target,  int level,  int internalFormat,  int width,  int height,  int border,  int format,  int type,  Addressable pixels) {
        var mh$ = RuntimeHelper.requireNonNull(constants$48.glTexImage2D$MH, "glTexImage2D");
        try {
            mh$.invokeExact(target, level, internalFormat, width, height, border, format, type, pixels.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexImage$MH() {
        return RuntimeHelper.requireNonNull(constants$48.glGetTexImage$MH,"glGetTexImage");
    }
    public static void glGetTexImage ( int target,  int level,  int format,  int type,  Addressable pixels) {
        var mh$ = RuntimeHelper.requireNonNull(constants$48.glGetTexImage$MH, "glGetTexImage");
        try {
            mh$.invokeExact(target, level, format, type, pixels.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGenTextures$MH() {
        return RuntimeHelper.requireNonNull(constants$48.glGenTextures$MH,"glGenTextures");
    }
    public static void glGenTextures ( int n,  Addressable textures) {
        var mh$ = RuntimeHelper.requireNonNull(constants$48.glGenTextures$MH, "glGenTextures");
        try {
            mh$.invokeExact(n, textures.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDeleteTextures$MH() {
        return RuntimeHelper.requireNonNull(constants$48.glDeleteTextures$MH,"glDeleteTextures");
    }
    public static void glDeleteTextures ( int n,  Addressable textures) {
        var mh$ = RuntimeHelper.requireNonNull(constants$48.glDeleteTextures$MH, "glDeleteTextures");
        try {
            mh$.invokeExact(n, textures.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBindTexture$MH() {
        return RuntimeHelper.requireNonNull(constants$48.glBindTexture$MH,"glBindTexture");
    }
    public static void glBindTexture ( int target,  int texture) {
        var mh$ = RuntimeHelper.requireNonNull(constants$48.glBindTexture$MH, "glBindTexture");
        try {
            mh$.invokeExact(target, texture);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPrioritizeTextures$MH() {
        return RuntimeHelper.requireNonNull(constants$48.glPrioritizeTextures$MH,"glPrioritizeTextures");
    }
    public static void glPrioritizeTextures ( int n,  Addressable textures,  Addressable priorities) {
        var mh$ = RuntimeHelper.requireNonNull(constants$48.glPrioritizeTextures$MH, "glPrioritizeTextures");
        try {
            mh$.invokeExact(n, textures.address(), priorities.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glAreTexturesResident$MH() {
        return RuntimeHelper.requireNonNull(constants$49.glAreTexturesResident$MH,"glAreTexturesResident");
    }
    public static byte glAreTexturesResident ( int n,  Addressable textures,  Addressable residences) {
        var mh$ = RuntimeHelper.requireNonNull(constants$49.glAreTexturesResident$MH, "glAreTexturesResident");
        try {
            return (byte)mh$.invokeExact(n, textures.address(), residences.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIsTexture$MH() {
        return RuntimeHelper.requireNonNull(constants$49.glIsTexture$MH,"glIsTexture");
    }
    public static byte glIsTexture ( int texture) {
        var mh$ = RuntimeHelper.requireNonNull(constants$49.glIsTexture$MH, "glIsTexture");
        try {
            return (byte)mh$.invokeExact(texture);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexSubImage1D$MH() {
        return RuntimeHelper.requireNonNull(constants$49.glTexSubImage1D$MH,"glTexSubImage1D");
    }
    public static void glTexSubImage1D ( int target,  int level,  int xoffset,  int width,  int format,  int type,  Addressable pixels) {
        var mh$ = RuntimeHelper.requireNonNull(constants$49.glTexSubImage1D$MH, "glTexSubImage1D");
        try {
            mh$.invokeExact(target, level, xoffset, width, format, type, pixels.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexSubImage2D$MH() {
        return RuntimeHelper.requireNonNull(constants$49.glTexSubImage2D$MH,"glTexSubImage2D");
    }
    public static void glTexSubImage2D ( int target,  int level,  int xoffset,  int yoffset,  int width,  int height,  int format,  int type,  Addressable pixels) {
        var mh$ = RuntimeHelper.requireNonNull(constants$49.glTexSubImage2D$MH, "glTexSubImage2D");
        try {
            mh$.invokeExact(target, level, xoffset, yoffset, width, height, format, type, pixels.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyTexImage1D$MH() {
        return RuntimeHelper.requireNonNull(constants$49.glCopyTexImage1D$MH,"glCopyTexImage1D");
    }
    public static void glCopyTexImage1D ( int target,  int level,  int internalformat,  int x,  int y,  int width,  int border) {
        var mh$ = RuntimeHelper.requireNonNull(constants$49.glCopyTexImage1D$MH, "glCopyTexImage1D");
        try {
            mh$.invokeExact(target, level, internalformat, x, y, width, border);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyTexImage2D$MH() {
        return RuntimeHelper.requireNonNull(constants$49.glCopyTexImage2D$MH,"glCopyTexImage2D");
    }
    public static void glCopyTexImage2D ( int target,  int level,  int internalformat,  int x,  int y,  int width,  int height,  int border) {
        var mh$ = RuntimeHelper.requireNonNull(constants$49.glCopyTexImage2D$MH, "glCopyTexImage2D");
        try {
            mh$.invokeExact(target, level, internalformat, x, y, width, height, border);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyTexSubImage1D$MH() {
        return RuntimeHelper.requireNonNull(constants$50.glCopyTexSubImage1D$MH,"glCopyTexSubImage1D");
    }
    public static void glCopyTexSubImage1D ( int target,  int level,  int xoffset,  int x,  int y,  int width) {
        var mh$ = RuntimeHelper.requireNonNull(constants$50.glCopyTexSubImage1D$MH, "glCopyTexSubImage1D");
        try {
            mh$.invokeExact(target, level, xoffset, x, y, width);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyTexSubImage2D$MH() {
        return RuntimeHelper.requireNonNull(constants$50.glCopyTexSubImage2D$MH,"glCopyTexSubImage2D");
    }
    public static void glCopyTexSubImage2D ( int target,  int level,  int xoffset,  int yoffset,  int x,  int y,  int width,  int height) {
        var mh$ = RuntimeHelper.requireNonNull(constants$50.glCopyTexSubImage2D$MH, "glCopyTexSubImage2D");
        try {
            mh$.invokeExact(target, level, xoffset, yoffset, x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMap1d$MH() {
        return RuntimeHelper.requireNonNull(constants$50.glMap1d$MH,"glMap1d");
    }
    public static void glMap1d ( int target,  double u1,  double u2,  int stride,  int order,  Addressable points) {
        var mh$ = RuntimeHelper.requireNonNull(constants$50.glMap1d$MH, "glMap1d");
        try {
            mh$.invokeExact(target, u1, u2, stride, order, points.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMap1f$MH() {
        return RuntimeHelper.requireNonNull(constants$50.glMap1f$MH,"glMap1f");
    }
    public static void glMap1f ( int target,  float u1,  float u2,  int stride,  int order,  Addressable points) {
        var mh$ = RuntimeHelper.requireNonNull(constants$50.glMap1f$MH, "glMap1f");
        try {
            mh$.invokeExact(target, u1, u2, stride, order, points.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMap2d$MH() {
        return RuntimeHelper.requireNonNull(constants$50.glMap2d$MH,"glMap2d");
    }
    public static void glMap2d ( int target,  double u1,  double u2,  int ustride,  int uorder,  double v1,  double v2,  int vstride,  int vorder,  Addressable points) {
        var mh$ = RuntimeHelper.requireNonNull(constants$50.glMap2d$MH, "glMap2d");
        try {
            mh$.invokeExact(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMap2f$MH() {
        return RuntimeHelper.requireNonNull(constants$50.glMap2f$MH,"glMap2f");
    }
    public static void glMap2f ( int target,  float u1,  float u2,  int ustride,  int uorder,  float v1,  float v2,  int vstride,  int vorder,  Addressable points) {
        var mh$ = RuntimeHelper.requireNonNull(constants$50.glMap2f$MH, "glMap2f");
        try {
            mh$.invokeExact(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetMapdv$MH() {
        return RuntimeHelper.requireNonNull(constants$51.glGetMapdv$MH,"glGetMapdv");
    }
    public static void glGetMapdv ( int target,  int query,  Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$51.glGetMapdv$MH, "glGetMapdv");
        try {
            mh$.invokeExact(target, query, v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetMapfv$MH() {
        return RuntimeHelper.requireNonNull(constants$51.glGetMapfv$MH,"glGetMapfv");
    }
    public static void glGetMapfv ( int target,  int query,  Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$51.glGetMapfv$MH, "glGetMapfv");
        try {
            mh$.invokeExact(target, query, v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetMapiv$MH() {
        return RuntimeHelper.requireNonNull(constants$51.glGetMapiv$MH,"glGetMapiv");
    }
    public static void glGetMapiv ( int target,  int query,  Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$51.glGetMapiv$MH, "glGetMapiv");
        try {
            mh$.invokeExact(target, query, v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalCoord1d$MH() {
        return RuntimeHelper.requireNonNull(constants$51.glEvalCoord1d$MH,"glEvalCoord1d");
    }
    public static void glEvalCoord1d ( double u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$51.glEvalCoord1d$MH, "glEvalCoord1d");
        try {
            mh$.invokeExact(u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalCoord1f$MH() {
        return RuntimeHelper.requireNonNull(constants$51.glEvalCoord1f$MH,"glEvalCoord1f");
    }
    public static void glEvalCoord1f ( float u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$51.glEvalCoord1f$MH, "glEvalCoord1f");
        try {
            mh$.invokeExact(u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalCoord1dv$MH() {
        return RuntimeHelper.requireNonNull(constants$51.glEvalCoord1dv$MH,"glEvalCoord1dv");
    }
    public static void glEvalCoord1dv ( Addressable u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$51.glEvalCoord1dv$MH, "glEvalCoord1dv");
        try {
            mh$.invokeExact(u.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalCoord1fv$MH() {
        return RuntimeHelper.requireNonNull(constants$52.glEvalCoord1fv$MH,"glEvalCoord1fv");
    }
    public static void glEvalCoord1fv ( Addressable u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$52.glEvalCoord1fv$MH, "glEvalCoord1fv");
        try {
            mh$.invokeExact(u.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalCoord2d$MH() {
        return RuntimeHelper.requireNonNull(constants$52.glEvalCoord2d$MH,"glEvalCoord2d");
    }
    public static void glEvalCoord2d ( double u,  double v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$52.glEvalCoord2d$MH, "glEvalCoord2d");
        try {
            mh$.invokeExact(u, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalCoord2f$MH() {
        return RuntimeHelper.requireNonNull(constants$52.glEvalCoord2f$MH,"glEvalCoord2f");
    }
    public static void glEvalCoord2f ( float u,  float v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$52.glEvalCoord2f$MH, "glEvalCoord2f");
        try {
            mh$.invokeExact(u, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalCoord2dv$MH() {
        return RuntimeHelper.requireNonNull(constants$52.glEvalCoord2dv$MH,"glEvalCoord2dv");
    }
    public static void glEvalCoord2dv ( Addressable u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$52.glEvalCoord2dv$MH, "glEvalCoord2dv");
        try {
            mh$.invokeExact(u.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalCoord2fv$MH() {
        return RuntimeHelper.requireNonNull(constants$52.glEvalCoord2fv$MH,"glEvalCoord2fv");
    }
    public static void glEvalCoord2fv ( Addressable u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$52.glEvalCoord2fv$MH, "glEvalCoord2fv");
        try {
            mh$.invokeExact(u.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMapGrid1d$MH() {
        return RuntimeHelper.requireNonNull(constants$52.glMapGrid1d$MH,"glMapGrid1d");
    }
    public static void glMapGrid1d ( int un,  double u1,  double u2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$52.glMapGrid1d$MH, "glMapGrid1d");
        try {
            mh$.invokeExact(un, u1, u2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMapGrid1f$MH() {
        return RuntimeHelper.requireNonNull(constants$53.glMapGrid1f$MH,"glMapGrid1f");
    }
    public static void glMapGrid1f ( int un,  float u1,  float u2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$53.glMapGrid1f$MH, "glMapGrid1f");
        try {
            mh$.invokeExact(un, u1, u2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMapGrid2d$MH() {
        return RuntimeHelper.requireNonNull(constants$53.glMapGrid2d$MH,"glMapGrid2d");
    }
    public static void glMapGrid2d ( int un,  double u1,  double u2,  int vn,  double v1,  double v2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$53.glMapGrid2d$MH, "glMapGrid2d");
        try {
            mh$.invokeExact(un, u1, u2, vn, v1, v2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMapGrid2f$MH() {
        return RuntimeHelper.requireNonNull(constants$53.glMapGrid2f$MH,"glMapGrid2f");
    }
    public static void glMapGrid2f ( int un,  float u1,  float u2,  int vn,  float v1,  float v2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$53.glMapGrid2f$MH, "glMapGrid2f");
        try {
            mh$.invokeExact(un, u1, u2, vn, v1, v2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalPoint1$MH() {
        return RuntimeHelper.requireNonNull(constants$53.glEvalPoint1$MH,"glEvalPoint1");
    }
    public static void glEvalPoint1 ( int i) {
        var mh$ = RuntimeHelper.requireNonNull(constants$53.glEvalPoint1$MH, "glEvalPoint1");
        try {
            mh$.invokeExact(i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalPoint2$MH() {
        return RuntimeHelper.requireNonNull(constants$53.glEvalPoint2$MH,"glEvalPoint2");
    }
    public static void glEvalPoint2 ( int i,  int j) {
        var mh$ = RuntimeHelper.requireNonNull(constants$53.glEvalPoint2$MH, "glEvalPoint2");
        try {
            mh$.invokeExact(i, j);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalMesh1$MH() {
        return RuntimeHelper.requireNonNull(constants$53.glEvalMesh1$MH,"glEvalMesh1");
    }
    public static void glEvalMesh1 ( int mode,  int i1,  int i2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$53.glEvalMesh1$MH, "glEvalMesh1");
        try {
            mh$.invokeExact(mode, i1, i2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalMesh2$MH() {
        return RuntimeHelper.requireNonNull(constants$54.glEvalMesh2$MH,"glEvalMesh2");
    }
    public static void glEvalMesh2 ( int mode,  int i1,  int i2,  int j1,  int j2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$54.glEvalMesh2$MH, "glEvalMesh2");
        try {
            mh$.invokeExact(mode, i1, i2, j1, j2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFogf$MH() {
        return RuntimeHelper.requireNonNull(constants$54.glFogf$MH,"glFogf");
    }
    public static void glFogf ( int pname,  float param) {
        var mh$ = RuntimeHelper.requireNonNull(constants$54.glFogf$MH, "glFogf");
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFogi$MH() {
        return RuntimeHelper.requireNonNull(constants$54.glFogi$MH,"glFogi");
    }
    public static void glFogi ( int pname,  int param) {
        var mh$ = RuntimeHelper.requireNonNull(constants$54.glFogi$MH, "glFogi");
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFogfv$MH() {
        return RuntimeHelper.requireNonNull(constants$54.glFogfv$MH,"glFogfv");
    }
    public static void glFogfv ( int pname,  Addressable params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$54.glFogfv$MH, "glFogfv");
        try {
            mh$.invokeExact(pname, params.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFogiv$MH() {
        return RuntimeHelper.requireNonNull(constants$54.glFogiv$MH,"glFogiv");
    }
    public static void glFogiv ( int pname,  Addressable params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$54.glFogiv$MH, "glFogiv");
        try {
            mh$.invokeExact(pname, params.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFeedbackBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$54.glFeedbackBuffer$MH,"glFeedbackBuffer");
    }
    public static void glFeedbackBuffer ( int size,  int type,  Addressable buffer) {
        var mh$ = RuntimeHelper.requireNonNull(constants$54.glFeedbackBuffer$MH, "glFeedbackBuffer");
        try {
            mh$.invokeExact(size, type, buffer.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPassThrough$MH() {
        return RuntimeHelper.requireNonNull(constants$55.glPassThrough$MH,"glPassThrough");
    }
    public static void glPassThrough ( float token) {
        var mh$ = RuntimeHelper.requireNonNull(constants$55.glPassThrough$MH, "glPassThrough");
        try {
            mh$.invokeExact(token);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSelectBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$55.glSelectBuffer$MH,"glSelectBuffer");
    }
    public static void glSelectBuffer ( int size,  Addressable buffer) {
        var mh$ = RuntimeHelper.requireNonNull(constants$55.glSelectBuffer$MH, "glSelectBuffer");
        try {
            mh$.invokeExact(size, buffer.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glInitNames$MH() {
        return RuntimeHelper.requireNonNull(constants$55.glInitNames$MH,"glInitNames");
    }
    public static void glInitNames () {
        var mh$ = RuntimeHelper.requireNonNull(constants$55.glInitNames$MH, "glInitNames");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLoadName$MH() {
        return RuntimeHelper.requireNonNull(constants$55.glLoadName$MH,"glLoadName");
    }
    public static void glLoadName ( int name) {
        var mh$ = RuntimeHelper.requireNonNull(constants$55.glLoadName$MH, "glLoadName");
        try {
            mh$.invokeExact(name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPushName$MH() {
        return RuntimeHelper.requireNonNull(constants$55.glPushName$MH,"glPushName");
    }
    public static void glPushName ( int name) {
        var mh$ = RuntimeHelper.requireNonNull(constants$55.glPushName$MH, "glPushName");
        try {
            mh$.invokeExact(name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPopName$MH() {
        return RuntimeHelper.requireNonNull(constants$55.glPopName$MH,"glPopName");
    }
    public static void glPopName () {
        var mh$ = RuntimeHelper.requireNonNull(constants$55.glPopName$MH, "glPopName");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawRangeElements$MH() {
        return RuntimeHelper.requireNonNull(constants$56.glDrawRangeElements$MH,"glDrawRangeElements");
    }
    public static void glDrawRangeElements ( int mode,  int start,  int end,  int count,  int type,  Addressable indices) {
        var mh$ = RuntimeHelper.requireNonNull(constants$56.glDrawRangeElements$MH, "glDrawRangeElements");
        try {
            mh$.invokeExact(mode, start, end, count, type, indices.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexImage3D$MH() {
        return RuntimeHelper.requireNonNull(constants$56.glTexImage3D$MH,"glTexImage3D");
    }
    public static void glTexImage3D ( int target,  int level,  int internalFormat,  int width,  int height,  int depth,  int border,  int format,  int type,  Addressable pixels) {
        var mh$ = RuntimeHelper.requireNonNull(constants$56.glTexImage3D$MH, "glTexImage3D");
        try {
            mh$.invokeExact(target, level, internalFormat, width, height, depth, border, format, type, pixels.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexSubImage3D$MH() {
        return RuntimeHelper.requireNonNull(constants$56.glTexSubImage3D$MH,"glTexSubImage3D");
    }
    public static void glTexSubImage3D ( int target,  int level,  int xoffset,  int yoffset,  int zoffset,  int width,  int height,  int depth,  int format,  int type,  Addressable pixels) {
        var mh$ = RuntimeHelper.requireNonNull(constants$56.glTexSubImage3D$MH, "glTexSubImage3D");
        try {
            mh$.invokeExact(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyTexSubImage3D$MH() {
        return RuntimeHelper.requireNonNull(constants$56.glCopyTexSubImage3D$MH,"glCopyTexSubImage3D");
    }
    public static void glCopyTexSubImage3D ( int target,  int level,  int xoffset,  int yoffset,  int zoffset,  int x,  int y,  int width,  int height) {
        var mh$ = RuntimeHelper.requireNonNull(constants$56.glCopyTexSubImage3D$MH, "glCopyTexSubImage3D");
        try {
            mh$.invokeExact(target, level, xoffset, yoffset, zoffset, x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColorTable$MH() {
        return RuntimeHelper.requireNonNull(constants$58.glColorTable$MH,"glColorTable");
    }
    public static void glColorTable ( int target,  int internalformat,  int width,  int format,  int type,  Addressable table) {
        var mh$ = RuntimeHelper.requireNonNull(constants$58.glColorTable$MH, "glColorTable");
        try {
            mh$.invokeExact(target, internalformat, width, format, type, table.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColorSubTable$MH() {
        return RuntimeHelper.requireNonNull(constants$58.glColorSubTable$MH,"glColorSubTable");
    }
    public static void glColorSubTable ( int target,  int start,  int count,  int format,  int type,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$58.glColorSubTable$MH, "glColorSubTable");
        try {
            mh$.invokeExact(target, start, count, format, type, data.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColorTableParameteriv$MH() {
        return RuntimeHelper.requireNonNull(constants$58.glColorTableParameteriv$MH,"glColorTableParameteriv");
    }
    public static void glColorTableParameteriv ( int target,  int pname,  Addressable params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$58.glColorTableParameteriv$MH, "glColorTableParameteriv");
        try {
            mh$.invokeExact(target, pname, params.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColorTableParameterfv$MH() {
        return RuntimeHelper.requireNonNull(constants$58.glColorTableParameterfv$MH,"glColorTableParameterfv");
    }
    public static void glColorTableParameterfv ( int target,  int pname,  Addressable params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$58.glColorTableParameterfv$MH, "glColorTableParameterfv");
        try {
            mh$.invokeExact(target, pname, params.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyColorSubTable$MH() {
        return RuntimeHelper.requireNonNull(constants$58.glCopyColorSubTable$MH,"glCopyColorSubTable");
    }
    public static void glCopyColorSubTable ( int target,  int start,  int x,  int y,  int width) {
        var mh$ = RuntimeHelper.requireNonNull(constants$58.glCopyColorSubTable$MH, "glCopyColorSubTable");
        try {
            mh$.invokeExact(target, start, x, y, width);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyColorTable$MH() {
        return RuntimeHelper.requireNonNull(constants$58.glCopyColorTable$MH,"glCopyColorTable");
    }
    public static void glCopyColorTable ( int target,  int internalformat,  int x,  int y,  int width) {
        var mh$ = RuntimeHelper.requireNonNull(constants$58.glCopyColorTable$MH, "glCopyColorTable");
        try {
            mh$.invokeExact(target, internalformat, x, y, width);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetColorTable$MH() {
        return RuntimeHelper.requireNonNull(constants$59.glGetColorTable$MH,"glGetColorTable");
    }
    public static void glGetColorTable ( int target,  int format,  int type,  Addressable table) {
        var mh$ = RuntimeHelper.requireNonNull(constants$59.glGetColorTable$MH, "glGetColorTable");
        try {
            mh$.invokeExact(target, format, type, table.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetColorTableParameterfv$MH() {
        return RuntimeHelper.requireNonNull(constants$59.glGetColorTableParameterfv$MH,"glGetColorTableParameterfv");
    }
    public static void glGetColorTableParameterfv ( int target,  int pname,  Addressable params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$59.glGetColorTableParameterfv$MH, "glGetColorTableParameterfv");
        try {
            mh$.invokeExact(target, pname, params.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetColorTableParameteriv$MH() {
        return RuntimeHelper.requireNonNull(constants$59.glGetColorTableParameteriv$MH,"glGetColorTableParameteriv");
    }
    public static void glGetColorTableParameteriv ( int target,  int pname,  Addressable params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$59.glGetColorTableParameteriv$MH, "glGetColorTableParameteriv");
        try {
            mh$.invokeExact(target, pname, params.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBlendEquation$MH() {
        return RuntimeHelper.requireNonNull(constants$59.glBlendEquation$MH,"glBlendEquation");
    }
    public static void glBlendEquation ( int mode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$59.glBlendEquation$MH, "glBlendEquation");
        try {
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBlendColor$MH() {
        return RuntimeHelper.requireNonNull(constants$59.glBlendColor$MH,"glBlendColor");
    }
    public static void glBlendColor ( float red,  float green,  float blue,  float alpha) {
        var mh$ = RuntimeHelper.requireNonNull(constants$59.glBlendColor$MH, "glBlendColor");
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glHistogram$MH() {
        return RuntimeHelper.requireNonNull(constants$59.glHistogram$MH,"glHistogram");
    }
    public static void glHistogram ( int target,  int width,  int internalformat,  byte sink) {
        var mh$ = RuntimeHelper.requireNonNull(constants$59.glHistogram$MH, "glHistogram");
        try {
            mh$.invokeExact(target, width, internalformat, sink);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glResetHistogram$MH() {
        return RuntimeHelper.requireNonNull(constants$60.glResetHistogram$MH,"glResetHistogram");
    }
    public static void glResetHistogram ( int target) {
        var mh$ = RuntimeHelper.requireNonNull(constants$60.glResetHistogram$MH, "glResetHistogram");
        try {
            mh$.invokeExact(target);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetHistogram$MH() {
        return RuntimeHelper.requireNonNull(constants$60.glGetHistogram$MH,"glGetHistogram");
    }
    public static void glGetHistogram ( int target,  byte reset,  int format,  int type,  Addressable values) {
        var mh$ = RuntimeHelper.requireNonNull(constants$60.glGetHistogram$MH, "glGetHistogram");
        try {
            mh$.invokeExact(target, reset, format, type, values.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetHistogramParameterfv$MH() {
        return RuntimeHelper.requireNonNull(constants$60.glGetHistogramParameterfv$MH,"glGetHistogramParameterfv");
    }
    public static void glGetHistogramParameterfv ( int target,  int pname,  Addressable params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$60.glGetHistogramParameterfv$MH, "glGetHistogramParameterfv");
        try {
            mh$.invokeExact(target, pname, params.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetHistogramParameteriv$MH() {
        return RuntimeHelper.requireNonNull(constants$60.glGetHistogramParameteriv$MH,"glGetHistogramParameteriv");
    }
    public static void glGetHistogramParameteriv ( int target,  int pname,  Addressable params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$60.glGetHistogramParameteriv$MH, "glGetHistogramParameteriv");
        try {
            mh$.invokeExact(target, pname, params.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMinmax$MH() {
        return RuntimeHelper.requireNonNull(constants$60.glMinmax$MH,"glMinmax");
    }
    public static void glMinmax ( int target,  int internalformat,  byte sink) {
        var mh$ = RuntimeHelper.requireNonNull(constants$60.glMinmax$MH, "glMinmax");
        try {
            mh$.invokeExact(target, internalformat, sink);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glResetMinmax$MH() {
        return RuntimeHelper.requireNonNull(constants$60.glResetMinmax$MH,"glResetMinmax");
    }
    public static void glResetMinmax ( int target) {
        var mh$ = RuntimeHelper.requireNonNull(constants$60.glResetMinmax$MH, "glResetMinmax");
        try {
            mh$.invokeExact(target);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetMinmax$MH() {
        return RuntimeHelper.requireNonNull(constants$61.glGetMinmax$MH,"glGetMinmax");
    }
    public static void glGetMinmax ( int target,  byte reset,  int format,  int types,  Addressable values) {
        var mh$ = RuntimeHelper.requireNonNull(constants$61.glGetMinmax$MH, "glGetMinmax");
        try {
            mh$.invokeExact(target, reset, format, types, values.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetMinmaxParameterfv$MH() {
        return RuntimeHelper.requireNonNull(constants$61.glGetMinmaxParameterfv$MH,"glGetMinmaxParameterfv");
    }
    public static void glGetMinmaxParameterfv ( int target,  int pname,  Addressable params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$61.glGetMinmaxParameterfv$MH, "glGetMinmaxParameterfv");
        try {
            mh$.invokeExact(target, pname, params.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetMinmaxParameteriv$MH() {
        return RuntimeHelper.requireNonNull(constants$61.glGetMinmaxParameteriv$MH,"glGetMinmaxParameteriv");
    }
    public static void glGetMinmaxParameteriv ( int target,  int pname,  Addressable params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$61.glGetMinmaxParameteriv$MH, "glGetMinmaxParameteriv");
        try {
            mh$.invokeExact(target, pname, params.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glConvolutionFilter1D$MH() {
        return RuntimeHelper.requireNonNull(constants$61.glConvolutionFilter1D$MH,"glConvolutionFilter1D");
    }
    public static void glConvolutionFilter1D ( int target,  int internalformat,  int width,  int format,  int type,  Addressable image) {
        var mh$ = RuntimeHelper.requireNonNull(constants$61.glConvolutionFilter1D$MH, "glConvolutionFilter1D");
        try {
            mh$.invokeExact(target, internalformat, width, format, type, image.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glConvolutionFilter2D$MH() {
        return RuntimeHelper.requireNonNull(constants$61.glConvolutionFilter2D$MH,"glConvolutionFilter2D");
    }
    public static void glConvolutionFilter2D ( int target,  int internalformat,  int width,  int height,  int format,  int type,  Addressable image) {
        var mh$ = RuntimeHelper.requireNonNull(constants$61.glConvolutionFilter2D$MH, "glConvolutionFilter2D");
        try {
            mh$.invokeExact(target, internalformat, width, height, format, type, image.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glConvolutionParameterf$MH() {
        return RuntimeHelper.requireNonNull(constants$61.glConvolutionParameterf$MH,"glConvolutionParameterf");
    }
    public static void glConvolutionParameterf ( int target,  int pname,  float params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$61.glConvolutionParameterf$MH, "glConvolutionParameterf");
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glConvolutionParameterfv$MH() {
        return RuntimeHelper.requireNonNull(constants$62.glConvolutionParameterfv$MH,"glConvolutionParameterfv");
    }
    public static void glConvolutionParameterfv ( int target,  int pname,  Addressable params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$62.glConvolutionParameterfv$MH, "glConvolutionParameterfv");
        try {
            mh$.invokeExact(target, pname, params.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glConvolutionParameteri$MH() {
        return RuntimeHelper.requireNonNull(constants$62.glConvolutionParameteri$MH,"glConvolutionParameteri");
    }
    public static void glConvolutionParameteri ( int target,  int pname,  int params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$62.glConvolutionParameteri$MH, "glConvolutionParameteri");
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glConvolutionParameteriv$MH() {
        return RuntimeHelper.requireNonNull(constants$62.glConvolutionParameteriv$MH,"glConvolutionParameteriv");
    }
    public static void glConvolutionParameteriv ( int target,  int pname,  Addressable params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$62.glConvolutionParameteriv$MH, "glConvolutionParameteriv");
        try {
            mh$.invokeExact(target, pname, params.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyConvolutionFilter1D$MH() {
        return RuntimeHelper.requireNonNull(constants$62.glCopyConvolutionFilter1D$MH,"glCopyConvolutionFilter1D");
    }
    public static void glCopyConvolutionFilter1D ( int target,  int internalformat,  int x,  int y,  int width) {
        var mh$ = RuntimeHelper.requireNonNull(constants$62.glCopyConvolutionFilter1D$MH, "glCopyConvolutionFilter1D");
        try {
            mh$.invokeExact(target, internalformat, x, y, width);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyConvolutionFilter2D$MH() {
        return RuntimeHelper.requireNonNull(constants$62.glCopyConvolutionFilter2D$MH,"glCopyConvolutionFilter2D");
    }
    public static void glCopyConvolutionFilter2D ( int target,  int internalformat,  int x,  int y,  int width,  int height) {
        var mh$ = RuntimeHelper.requireNonNull(constants$62.glCopyConvolutionFilter2D$MH, "glCopyConvolutionFilter2D");
        try {
            mh$.invokeExact(target, internalformat, x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetConvolutionFilter$MH() {
        return RuntimeHelper.requireNonNull(constants$62.glGetConvolutionFilter$MH,"glGetConvolutionFilter");
    }
    public static void glGetConvolutionFilter ( int target,  int format,  int type,  Addressable image) {
        var mh$ = RuntimeHelper.requireNonNull(constants$62.glGetConvolutionFilter$MH, "glGetConvolutionFilter");
        try {
            mh$.invokeExact(target, format, type, image.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetConvolutionParameterfv$MH() {
        return RuntimeHelper.requireNonNull(constants$63.glGetConvolutionParameterfv$MH,"glGetConvolutionParameterfv");
    }
    public static void glGetConvolutionParameterfv ( int target,  int pname,  Addressable params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$63.glGetConvolutionParameterfv$MH, "glGetConvolutionParameterfv");
        try {
            mh$.invokeExact(target, pname, params.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetConvolutionParameteriv$MH() {
        return RuntimeHelper.requireNonNull(constants$63.glGetConvolutionParameteriv$MH,"glGetConvolutionParameteriv");
    }
    public static void glGetConvolutionParameteriv ( int target,  int pname,  Addressable params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$63.glGetConvolutionParameteriv$MH, "glGetConvolutionParameteriv");
        try {
            mh$.invokeExact(target, pname, params.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSeparableFilter2D$MH() {
        return RuntimeHelper.requireNonNull(constants$63.glSeparableFilter2D$MH,"glSeparableFilter2D");
    }
    public static void glSeparableFilter2D ( int target,  int internalformat,  int width,  int height,  int format,  int type,  Addressable row,  Addressable column) {
        var mh$ = RuntimeHelper.requireNonNull(constants$63.glSeparableFilter2D$MH, "glSeparableFilter2D");
        try {
            mh$.invokeExact(target, internalformat, width, height, format, type, row.address(), column.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetSeparableFilter$MH() {
        return RuntimeHelper.requireNonNull(constants$63.glGetSeparableFilter$MH,"glGetSeparableFilter");
    }
    public static void glGetSeparableFilter ( int target,  int format,  int type,  Addressable row,  Addressable column,  Addressable span) {
        var mh$ = RuntimeHelper.requireNonNull(constants$63.glGetSeparableFilter$MH, "glGetSeparableFilter");
        try {
            mh$.invokeExact(target, format, type, row.address(), column.address(), span.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glActiveTexture$MH() {
        return RuntimeHelper.requireNonNull(constants$63.glActiveTexture$MH,"glActiveTexture");
    }
    public static void glActiveTexture ( int texture) {
        var mh$ = RuntimeHelper.requireNonNull(constants$63.glActiveTexture$MH, "glActiveTexture");
        try {
            mh$.invokeExact(texture);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClientActiveTexture$MH() {
        return RuntimeHelper.requireNonNull(constants$63.glClientActiveTexture$MH,"glClientActiveTexture");
    }
    public static void glClientActiveTexture ( int texture) {
        var mh$ = RuntimeHelper.requireNonNull(constants$63.glClientActiveTexture$MH, "glClientActiveTexture");
        try {
            mh$.invokeExact(texture);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCompressedTexImage1D$MH() {
        return RuntimeHelper.requireNonNull(constants$64.glCompressedTexImage1D$MH,"glCompressedTexImage1D");
    }
    public static void glCompressedTexImage1D ( int target,  int level,  int internalformat,  int width,  int border,  int imageSize,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$64.glCompressedTexImage1D$MH, "glCompressedTexImage1D");
        try {
            mh$.invokeExact(target, level, internalformat, width, border, imageSize, data.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCompressedTexImage2D$MH() {
        return RuntimeHelper.requireNonNull(constants$64.glCompressedTexImage2D$MH,"glCompressedTexImage2D");
    }
    public static void glCompressedTexImage2D ( int target,  int level,  int internalformat,  int width,  int height,  int border,  int imageSize,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$64.glCompressedTexImage2D$MH, "glCompressedTexImage2D");
        try {
            mh$.invokeExact(target, level, internalformat, width, height, border, imageSize, data.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCompressedTexImage3D$MH() {
        return RuntimeHelper.requireNonNull(constants$64.glCompressedTexImage3D$MH,"glCompressedTexImage3D");
    }
    public static void glCompressedTexImage3D ( int target,  int level,  int internalformat,  int width,  int height,  int depth,  int border,  int imageSize,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$64.glCompressedTexImage3D$MH, "glCompressedTexImage3D");
        try {
            mh$.invokeExact(target, level, internalformat, width, height, depth, border, imageSize, data.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCompressedTexSubImage1D$MH() {
        return RuntimeHelper.requireNonNull(constants$64.glCompressedTexSubImage1D$MH,"glCompressedTexSubImage1D");
    }
    public static void glCompressedTexSubImage1D ( int target,  int level,  int xoffset,  int width,  int format,  int imageSize,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$64.glCompressedTexSubImage1D$MH, "glCompressedTexSubImage1D");
        try {
            mh$.invokeExact(target, level, xoffset, width, format, imageSize, data.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCompressedTexSubImage2D$MH() {
        return RuntimeHelper.requireNonNull(constants$64.glCompressedTexSubImage2D$MH,"glCompressedTexSubImage2D");
    }
    public static void glCompressedTexSubImage2D ( int target,  int level,  int xoffset,  int yoffset,  int width,  int height,  int format,  int imageSize,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$64.glCompressedTexSubImage2D$MH, "glCompressedTexSubImage2D");
        try {
            mh$.invokeExact(target, level, xoffset, yoffset, width, height, format, imageSize, data.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCompressedTexSubImage3D$MH() {
        return RuntimeHelper.requireNonNull(constants$64.glCompressedTexSubImage3D$MH,"glCompressedTexSubImage3D");
    }
    public static void glCompressedTexSubImage3D ( int target,  int level,  int xoffset,  int yoffset,  int zoffset,  int width,  int height,  int depth,  int format,  int imageSize,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$64.glCompressedTexSubImage3D$MH, "glCompressedTexSubImage3D");
        try {
            mh$.invokeExact(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetCompressedTexImage$MH() {
        return RuntimeHelper.requireNonNull(constants$65.glGetCompressedTexImage$MH,"glGetCompressedTexImage");
    }
    public static void glGetCompressedTexImage ( int target,  int lod,  Addressable img) {
        var mh$ = RuntimeHelper.requireNonNull(constants$65.glGetCompressedTexImage$MH, "glGetCompressedTexImage");
        try {
            mh$.invokeExact(target, lod, img.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord1d$MH() {
        return RuntimeHelper.requireNonNull(constants$65.glMultiTexCoord1d$MH,"glMultiTexCoord1d");
    }
    public static void glMultiTexCoord1d ( int target,  double s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$65.glMultiTexCoord1d$MH, "glMultiTexCoord1d");
        try {
            mh$.invokeExact(target, s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord1dv$MH() {
        return RuntimeHelper.requireNonNull(constants$65.glMultiTexCoord1dv$MH,"glMultiTexCoord1dv");
    }
    public static void glMultiTexCoord1dv ( int target,  Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$65.glMultiTexCoord1dv$MH, "glMultiTexCoord1dv");
        try {
            mh$.invokeExact(target, v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord1f$MH() {
        return RuntimeHelper.requireNonNull(constants$65.glMultiTexCoord1f$MH,"glMultiTexCoord1f");
    }
    public static void glMultiTexCoord1f ( int target,  float s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$65.glMultiTexCoord1f$MH, "glMultiTexCoord1f");
        try {
            mh$.invokeExact(target, s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord1fv$MH() {
        return RuntimeHelper.requireNonNull(constants$65.glMultiTexCoord1fv$MH,"glMultiTexCoord1fv");
    }
    public static void glMultiTexCoord1fv ( int target,  Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$65.glMultiTexCoord1fv$MH, "glMultiTexCoord1fv");
        try {
            mh$.invokeExact(target, v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord1i$MH() {
        return RuntimeHelper.requireNonNull(constants$65.glMultiTexCoord1i$MH,"glMultiTexCoord1i");
    }
    public static void glMultiTexCoord1i ( int target,  int s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$65.glMultiTexCoord1i$MH, "glMultiTexCoord1i");
        try {
            mh$.invokeExact(target, s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord1iv$MH() {
        return RuntimeHelper.requireNonNull(constants$66.glMultiTexCoord1iv$MH,"glMultiTexCoord1iv");
    }
    public static void glMultiTexCoord1iv ( int target,  Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$66.glMultiTexCoord1iv$MH, "glMultiTexCoord1iv");
        try {
            mh$.invokeExact(target, v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord1s$MH() {
        return RuntimeHelper.requireNonNull(constants$66.glMultiTexCoord1s$MH,"glMultiTexCoord1s");
    }
    public static void glMultiTexCoord1s ( int target,  short s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$66.glMultiTexCoord1s$MH, "glMultiTexCoord1s");
        try {
            mh$.invokeExact(target, s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord1sv$MH() {
        return RuntimeHelper.requireNonNull(constants$66.glMultiTexCoord1sv$MH,"glMultiTexCoord1sv");
    }
    public static void glMultiTexCoord1sv ( int target,  Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$66.glMultiTexCoord1sv$MH, "glMultiTexCoord1sv");
        try {
            mh$.invokeExact(target, v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord2d$MH() {
        return RuntimeHelper.requireNonNull(constants$66.glMultiTexCoord2d$MH,"glMultiTexCoord2d");
    }
    public static void glMultiTexCoord2d ( int target,  double s,  double t) {
        var mh$ = RuntimeHelper.requireNonNull(constants$66.glMultiTexCoord2d$MH, "glMultiTexCoord2d");
        try {
            mh$.invokeExact(target, s, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord2dv$MH() {
        return RuntimeHelper.requireNonNull(constants$66.glMultiTexCoord2dv$MH,"glMultiTexCoord2dv");
    }
    public static void glMultiTexCoord2dv ( int target,  Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$66.glMultiTexCoord2dv$MH, "glMultiTexCoord2dv");
        try {
            mh$.invokeExact(target, v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord2f$MH() {
        return RuntimeHelper.requireNonNull(constants$66.glMultiTexCoord2f$MH,"glMultiTexCoord2f");
    }
    public static void glMultiTexCoord2f ( int target,  float s,  float t) {
        var mh$ = RuntimeHelper.requireNonNull(constants$66.glMultiTexCoord2f$MH, "glMultiTexCoord2f");
        try {
            mh$.invokeExact(target, s, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord2fv$MH() {
        return RuntimeHelper.requireNonNull(constants$67.glMultiTexCoord2fv$MH,"glMultiTexCoord2fv");
    }
    public static void glMultiTexCoord2fv ( int target,  Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$67.glMultiTexCoord2fv$MH, "glMultiTexCoord2fv");
        try {
            mh$.invokeExact(target, v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord2i$MH() {
        return RuntimeHelper.requireNonNull(constants$67.glMultiTexCoord2i$MH,"glMultiTexCoord2i");
    }
    public static void glMultiTexCoord2i ( int target,  int s,  int t) {
        var mh$ = RuntimeHelper.requireNonNull(constants$67.glMultiTexCoord2i$MH, "glMultiTexCoord2i");
        try {
            mh$.invokeExact(target, s, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord2iv$MH() {
        return RuntimeHelper.requireNonNull(constants$67.glMultiTexCoord2iv$MH,"glMultiTexCoord2iv");
    }
    public static void glMultiTexCoord2iv ( int target,  Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$67.glMultiTexCoord2iv$MH, "glMultiTexCoord2iv");
        try {
            mh$.invokeExact(target, v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord2s$MH() {
        return RuntimeHelper.requireNonNull(constants$67.glMultiTexCoord2s$MH,"glMultiTexCoord2s");
    }
    public static void glMultiTexCoord2s ( int target,  short s,  short t) {
        var mh$ = RuntimeHelper.requireNonNull(constants$67.glMultiTexCoord2s$MH, "glMultiTexCoord2s");
        try {
            mh$.invokeExact(target, s, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord2sv$MH() {
        return RuntimeHelper.requireNonNull(constants$67.glMultiTexCoord2sv$MH,"glMultiTexCoord2sv");
    }
    public static void glMultiTexCoord2sv ( int target,  Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$67.glMultiTexCoord2sv$MH, "glMultiTexCoord2sv");
        try {
            mh$.invokeExact(target, v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord3d$MH() {
        return RuntimeHelper.requireNonNull(constants$67.glMultiTexCoord3d$MH,"glMultiTexCoord3d");
    }
    public static void glMultiTexCoord3d ( int target,  double s,  double t,  double r) {
        var mh$ = RuntimeHelper.requireNonNull(constants$67.glMultiTexCoord3d$MH, "glMultiTexCoord3d");
        try {
            mh$.invokeExact(target, s, t, r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord3dv$MH() {
        return RuntimeHelper.requireNonNull(constants$68.glMultiTexCoord3dv$MH,"glMultiTexCoord3dv");
    }
    public static void glMultiTexCoord3dv ( int target,  Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$68.glMultiTexCoord3dv$MH, "glMultiTexCoord3dv");
        try {
            mh$.invokeExact(target, v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord3f$MH() {
        return RuntimeHelper.requireNonNull(constants$68.glMultiTexCoord3f$MH,"glMultiTexCoord3f");
    }
    public static void glMultiTexCoord3f ( int target,  float s,  float t,  float r) {
        var mh$ = RuntimeHelper.requireNonNull(constants$68.glMultiTexCoord3f$MH, "glMultiTexCoord3f");
        try {
            mh$.invokeExact(target, s, t, r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord3fv$MH() {
        return RuntimeHelper.requireNonNull(constants$68.glMultiTexCoord3fv$MH,"glMultiTexCoord3fv");
    }
    public static void glMultiTexCoord3fv ( int target,  Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$68.glMultiTexCoord3fv$MH, "glMultiTexCoord3fv");
        try {
            mh$.invokeExact(target, v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord3i$MH() {
        return RuntimeHelper.requireNonNull(constants$68.glMultiTexCoord3i$MH,"glMultiTexCoord3i");
    }
    public static void glMultiTexCoord3i ( int target,  int s,  int t,  int r) {
        var mh$ = RuntimeHelper.requireNonNull(constants$68.glMultiTexCoord3i$MH, "glMultiTexCoord3i");
        try {
            mh$.invokeExact(target, s, t, r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord3iv$MH() {
        return RuntimeHelper.requireNonNull(constants$68.glMultiTexCoord3iv$MH,"glMultiTexCoord3iv");
    }
    public static void glMultiTexCoord3iv ( int target,  Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$68.glMultiTexCoord3iv$MH, "glMultiTexCoord3iv");
        try {
            mh$.invokeExact(target, v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord3s$MH() {
        return RuntimeHelper.requireNonNull(constants$68.glMultiTexCoord3s$MH,"glMultiTexCoord3s");
    }
    public static void glMultiTexCoord3s ( int target,  short s,  short t,  short r) {
        var mh$ = RuntimeHelper.requireNonNull(constants$68.glMultiTexCoord3s$MH, "glMultiTexCoord3s");
        try {
            mh$.invokeExact(target, s, t, r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord3sv$MH() {
        return RuntimeHelper.requireNonNull(constants$69.glMultiTexCoord3sv$MH,"glMultiTexCoord3sv");
    }
    public static void glMultiTexCoord3sv ( int target,  Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$69.glMultiTexCoord3sv$MH, "glMultiTexCoord3sv");
        try {
            mh$.invokeExact(target, v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord4d$MH() {
        return RuntimeHelper.requireNonNull(constants$69.glMultiTexCoord4d$MH,"glMultiTexCoord4d");
    }
    public static void glMultiTexCoord4d ( int target,  double s,  double t,  double r,  double q) {
        var mh$ = RuntimeHelper.requireNonNull(constants$69.glMultiTexCoord4d$MH, "glMultiTexCoord4d");
        try {
            mh$.invokeExact(target, s, t, r, q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord4dv$MH() {
        return RuntimeHelper.requireNonNull(constants$69.glMultiTexCoord4dv$MH,"glMultiTexCoord4dv");
    }
    public static void glMultiTexCoord4dv ( int target,  Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$69.glMultiTexCoord4dv$MH, "glMultiTexCoord4dv");
        try {
            mh$.invokeExact(target, v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord4f$MH() {
        return RuntimeHelper.requireNonNull(constants$69.glMultiTexCoord4f$MH,"glMultiTexCoord4f");
    }
    public static void glMultiTexCoord4f ( int target,  float s,  float t,  float r,  float q) {
        var mh$ = RuntimeHelper.requireNonNull(constants$69.glMultiTexCoord4f$MH, "glMultiTexCoord4f");
        try {
            mh$.invokeExact(target, s, t, r, q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord4fv$MH() {
        return RuntimeHelper.requireNonNull(constants$69.glMultiTexCoord4fv$MH,"glMultiTexCoord4fv");
    }
    public static void glMultiTexCoord4fv ( int target,  Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$69.glMultiTexCoord4fv$MH, "glMultiTexCoord4fv");
        try {
            mh$.invokeExact(target, v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord4i$MH() {
        return RuntimeHelper.requireNonNull(constants$69.glMultiTexCoord4i$MH,"glMultiTexCoord4i");
    }
    public static void glMultiTexCoord4i ( int target,  int s,  int t,  int r,  int q) {
        var mh$ = RuntimeHelper.requireNonNull(constants$69.glMultiTexCoord4i$MH, "glMultiTexCoord4i");
        try {
            mh$.invokeExact(target, s, t, r, q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord4iv$MH() {
        return RuntimeHelper.requireNonNull(constants$70.glMultiTexCoord4iv$MH,"glMultiTexCoord4iv");
    }
    public static void glMultiTexCoord4iv ( int target,  Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$70.glMultiTexCoord4iv$MH, "glMultiTexCoord4iv");
        try {
            mh$.invokeExact(target, v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord4s$MH() {
        return RuntimeHelper.requireNonNull(constants$70.glMultiTexCoord4s$MH,"glMultiTexCoord4s");
    }
    public static void glMultiTexCoord4s ( int target,  short s,  short t,  short r,  short q) {
        var mh$ = RuntimeHelper.requireNonNull(constants$70.glMultiTexCoord4s$MH, "glMultiTexCoord4s");
        try {
            mh$.invokeExact(target, s, t, r, q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord4sv$MH() {
        return RuntimeHelper.requireNonNull(constants$70.glMultiTexCoord4sv$MH,"glMultiTexCoord4sv");
    }
    public static void glMultiTexCoord4sv ( int target,  Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$70.glMultiTexCoord4sv$MH, "glMultiTexCoord4sv");
        try {
            mh$.invokeExact(target, v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLoadTransposeMatrixd$MH() {
        return RuntimeHelper.requireNonNull(constants$70.glLoadTransposeMatrixd$MH,"glLoadTransposeMatrixd");
    }
    public static void glLoadTransposeMatrixd ( Addressable m) {
        var mh$ = RuntimeHelper.requireNonNull(constants$70.glLoadTransposeMatrixd$MH, "glLoadTransposeMatrixd");
        try {
            mh$.invokeExact(m.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLoadTransposeMatrixf$MH() {
        return RuntimeHelper.requireNonNull(constants$70.glLoadTransposeMatrixf$MH,"glLoadTransposeMatrixf");
    }
    public static void glLoadTransposeMatrixf ( Addressable m) {
        var mh$ = RuntimeHelper.requireNonNull(constants$70.glLoadTransposeMatrixf$MH, "glLoadTransposeMatrixf");
        try {
            mh$.invokeExact(m.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultTransposeMatrixd$MH() {
        return RuntimeHelper.requireNonNull(constants$70.glMultTransposeMatrixd$MH,"glMultTransposeMatrixd");
    }
    public static void glMultTransposeMatrixd ( Addressable m) {
        var mh$ = RuntimeHelper.requireNonNull(constants$70.glMultTransposeMatrixd$MH, "glMultTransposeMatrixd");
        try {
            mh$.invokeExact(m.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultTransposeMatrixf$MH() {
        return RuntimeHelper.requireNonNull(constants$71.glMultTransposeMatrixf$MH,"glMultTransposeMatrixf");
    }
    public static void glMultTransposeMatrixf ( Addressable m) {
        var mh$ = RuntimeHelper.requireNonNull(constants$71.glMultTransposeMatrixf$MH, "glMultTransposeMatrixf");
        try {
            mh$.invokeExact(m.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSampleCoverage$MH() {
        return RuntimeHelper.requireNonNull(constants$71.glSampleCoverage$MH,"glSampleCoverage");
    }
    public static void glSampleCoverage ( float value,  byte invert) {
        var mh$ = RuntimeHelper.requireNonNull(constants$71.glSampleCoverage$MH, "glSampleCoverage");
        try {
            mh$.invokeExact(value, invert);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glActiveTextureARB$MH() {
        return RuntimeHelper.requireNonNull(constants$74.glActiveTextureARB$MH,"glActiveTextureARB");
    }
    public static void glActiveTextureARB ( int texture) {
        var mh$ = RuntimeHelper.requireNonNull(constants$74.glActiveTextureARB$MH, "glActiveTextureARB");
        try {
            mh$.invokeExact(texture);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClientActiveTextureARB$MH() {
        return RuntimeHelper.requireNonNull(constants$74.glClientActiveTextureARB$MH,"glClientActiveTextureARB");
    }
    public static void glClientActiveTextureARB ( int texture) {
        var mh$ = RuntimeHelper.requireNonNull(constants$74.glClientActiveTextureARB$MH, "glClientActiveTextureARB");
        try {
            mh$.invokeExact(texture);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord1dARB$MH() {
        return RuntimeHelper.requireNonNull(constants$74.glMultiTexCoord1dARB$MH,"glMultiTexCoord1dARB");
    }
    public static void glMultiTexCoord1dARB ( int target,  double s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$74.glMultiTexCoord1dARB$MH, "glMultiTexCoord1dARB");
        try {
            mh$.invokeExact(target, s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord1dvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$74.glMultiTexCoord1dvARB$MH,"glMultiTexCoord1dvARB");
    }
    public static void glMultiTexCoord1dvARB ( int target,  Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$74.glMultiTexCoord1dvARB$MH, "glMultiTexCoord1dvARB");
        try {
            mh$.invokeExact(target, v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord1fARB$MH() {
        return RuntimeHelper.requireNonNull(constants$75.glMultiTexCoord1fARB$MH,"glMultiTexCoord1fARB");
    }
    public static void glMultiTexCoord1fARB ( int target,  float s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$75.glMultiTexCoord1fARB$MH, "glMultiTexCoord1fARB");
        try {
            mh$.invokeExact(target, s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord1fvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$75.glMultiTexCoord1fvARB$MH,"glMultiTexCoord1fvARB");
    }
    public static void glMultiTexCoord1fvARB ( int target,  Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$75.glMultiTexCoord1fvARB$MH, "glMultiTexCoord1fvARB");
        try {
            mh$.invokeExact(target, v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord1iARB$MH() {
        return RuntimeHelper.requireNonNull(constants$75.glMultiTexCoord1iARB$MH,"glMultiTexCoord1iARB");
    }
    public static void glMultiTexCoord1iARB ( int target,  int s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$75.glMultiTexCoord1iARB$MH, "glMultiTexCoord1iARB");
        try {
            mh$.invokeExact(target, s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord1ivARB$MH() {
        return RuntimeHelper.requireNonNull(constants$75.glMultiTexCoord1ivARB$MH,"glMultiTexCoord1ivARB");
    }
    public static void glMultiTexCoord1ivARB ( int target,  Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$75.glMultiTexCoord1ivARB$MH, "glMultiTexCoord1ivARB");
        try {
            mh$.invokeExact(target, v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord1sARB$MH() {
        return RuntimeHelper.requireNonNull(constants$75.glMultiTexCoord1sARB$MH,"glMultiTexCoord1sARB");
    }
    public static void glMultiTexCoord1sARB ( int target,  short s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$75.glMultiTexCoord1sARB$MH, "glMultiTexCoord1sARB");
        try {
            mh$.invokeExact(target, s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord1svARB$MH() {
        return RuntimeHelper.requireNonNull(constants$75.glMultiTexCoord1svARB$MH,"glMultiTexCoord1svARB");
    }
    public static void glMultiTexCoord1svARB ( int target,  Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$75.glMultiTexCoord1svARB$MH, "glMultiTexCoord1svARB");
        try {
            mh$.invokeExact(target, v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord2dARB$MH() {
        return RuntimeHelper.requireNonNull(constants$76.glMultiTexCoord2dARB$MH,"glMultiTexCoord2dARB");
    }
    public static void glMultiTexCoord2dARB ( int target,  double s,  double t) {
        var mh$ = RuntimeHelper.requireNonNull(constants$76.glMultiTexCoord2dARB$MH, "glMultiTexCoord2dARB");
        try {
            mh$.invokeExact(target, s, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord2dvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$76.glMultiTexCoord2dvARB$MH,"glMultiTexCoord2dvARB");
    }
    public static void glMultiTexCoord2dvARB ( int target,  Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$76.glMultiTexCoord2dvARB$MH, "glMultiTexCoord2dvARB");
        try {
            mh$.invokeExact(target, v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord2fARB$MH() {
        return RuntimeHelper.requireNonNull(constants$76.glMultiTexCoord2fARB$MH,"glMultiTexCoord2fARB");
    }
    public static void glMultiTexCoord2fARB ( int target,  float s,  float t) {
        var mh$ = RuntimeHelper.requireNonNull(constants$76.glMultiTexCoord2fARB$MH, "glMultiTexCoord2fARB");
        try {
            mh$.invokeExact(target, s, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord2fvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$76.glMultiTexCoord2fvARB$MH,"glMultiTexCoord2fvARB");
    }
    public static void glMultiTexCoord2fvARB ( int target,  Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$76.glMultiTexCoord2fvARB$MH, "glMultiTexCoord2fvARB");
        try {
            mh$.invokeExact(target, v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord2iARB$MH() {
        return RuntimeHelper.requireNonNull(constants$76.glMultiTexCoord2iARB$MH,"glMultiTexCoord2iARB");
    }
    public static void glMultiTexCoord2iARB ( int target,  int s,  int t) {
        var mh$ = RuntimeHelper.requireNonNull(constants$76.glMultiTexCoord2iARB$MH, "glMultiTexCoord2iARB");
        try {
            mh$.invokeExact(target, s, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord2ivARB$MH() {
        return RuntimeHelper.requireNonNull(constants$76.glMultiTexCoord2ivARB$MH,"glMultiTexCoord2ivARB");
    }
    public static void glMultiTexCoord2ivARB ( int target,  Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$76.glMultiTexCoord2ivARB$MH, "glMultiTexCoord2ivARB");
        try {
            mh$.invokeExact(target, v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord2sARB$MH() {
        return RuntimeHelper.requireNonNull(constants$77.glMultiTexCoord2sARB$MH,"glMultiTexCoord2sARB");
    }
    public static void glMultiTexCoord2sARB ( int target,  short s,  short t) {
        var mh$ = RuntimeHelper.requireNonNull(constants$77.glMultiTexCoord2sARB$MH, "glMultiTexCoord2sARB");
        try {
            mh$.invokeExact(target, s, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord2svARB$MH() {
        return RuntimeHelper.requireNonNull(constants$77.glMultiTexCoord2svARB$MH,"glMultiTexCoord2svARB");
    }
    public static void glMultiTexCoord2svARB ( int target,  Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$77.glMultiTexCoord2svARB$MH, "glMultiTexCoord2svARB");
        try {
            mh$.invokeExact(target, v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord3dARB$MH() {
        return RuntimeHelper.requireNonNull(constants$77.glMultiTexCoord3dARB$MH,"glMultiTexCoord3dARB");
    }
    public static void glMultiTexCoord3dARB ( int target,  double s,  double t,  double r) {
        var mh$ = RuntimeHelper.requireNonNull(constants$77.glMultiTexCoord3dARB$MH, "glMultiTexCoord3dARB");
        try {
            mh$.invokeExact(target, s, t, r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord3dvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$77.glMultiTexCoord3dvARB$MH,"glMultiTexCoord3dvARB");
    }
    public static void glMultiTexCoord3dvARB ( int target,  Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$77.glMultiTexCoord3dvARB$MH, "glMultiTexCoord3dvARB");
        try {
            mh$.invokeExact(target, v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord3fARB$MH() {
        return RuntimeHelper.requireNonNull(constants$77.glMultiTexCoord3fARB$MH,"glMultiTexCoord3fARB");
    }
    public static void glMultiTexCoord3fARB ( int target,  float s,  float t,  float r) {
        var mh$ = RuntimeHelper.requireNonNull(constants$77.glMultiTexCoord3fARB$MH, "glMultiTexCoord3fARB");
        try {
            mh$.invokeExact(target, s, t, r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord3fvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$77.glMultiTexCoord3fvARB$MH,"glMultiTexCoord3fvARB");
    }
    public static void glMultiTexCoord3fvARB ( int target,  Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$77.glMultiTexCoord3fvARB$MH, "glMultiTexCoord3fvARB");
        try {
            mh$.invokeExact(target, v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord3iARB$MH() {
        return RuntimeHelper.requireNonNull(constants$78.glMultiTexCoord3iARB$MH,"glMultiTexCoord3iARB");
    }
    public static void glMultiTexCoord3iARB ( int target,  int s,  int t,  int r) {
        var mh$ = RuntimeHelper.requireNonNull(constants$78.glMultiTexCoord3iARB$MH, "glMultiTexCoord3iARB");
        try {
            mh$.invokeExact(target, s, t, r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord3ivARB$MH() {
        return RuntimeHelper.requireNonNull(constants$78.glMultiTexCoord3ivARB$MH,"glMultiTexCoord3ivARB");
    }
    public static void glMultiTexCoord3ivARB ( int target,  Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$78.glMultiTexCoord3ivARB$MH, "glMultiTexCoord3ivARB");
        try {
            mh$.invokeExact(target, v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord3sARB$MH() {
        return RuntimeHelper.requireNonNull(constants$78.glMultiTexCoord3sARB$MH,"glMultiTexCoord3sARB");
    }
    public static void glMultiTexCoord3sARB ( int target,  short s,  short t,  short r) {
        var mh$ = RuntimeHelper.requireNonNull(constants$78.glMultiTexCoord3sARB$MH, "glMultiTexCoord3sARB");
        try {
            mh$.invokeExact(target, s, t, r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord3svARB$MH() {
        return RuntimeHelper.requireNonNull(constants$78.glMultiTexCoord3svARB$MH,"glMultiTexCoord3svARB");
    }
    public static void glMultiTexCoord3svARB ( int target,  Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$78.glMultiTexCoord3svARB$MH, "glMultiTexCoord3svARB");
        try {
            mh$.invokeExact(target, v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord4dARB$MH() {
        return RuntimeHelper.requireNonNull(constants$78.glMultiTexCoord4dARB$MH,"glMultiTexCoord4dARB");
    }
    public static void glMultiTexCoord4dARB ( int target,  double s,  double t,  double r,  double q) {
        var mh$ = RuntimeHelper.requireNonNull(constants$78.glMultiTexCoord4dARB$MH, "glMultiTexCoord4dARB");
        try {
            mh$.invokeExact(target, s, t, r, q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord4dvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$78.glMultiTexCoord4dvARB$MH,"glMultiTexCoord4dvARB");
    }
    public static void glMultiTexCoord4dvARB ( int target,  Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$78.glMultiTexCoord4dvARB$MH, "glMultiTexCoord4dvARB");
        try {
            mh$.invokeExact(target, v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord4fARB$MH() {
        return RuntimeHelper.requireNonNull(constants$79.glMultiTexCoord4fARB$MH,"glMultiTexCoord4fARB");
    }
    public static void glMultiTexCoord4fARB ( int target,  float s,  float t,  float r,  float q) {
        var mh$ = RuntimeHelper.requireNonNull(constants$79.glMultiTexCoord4fARB$MH, "glMultiTexCoord4fARB");
        try {
            mh$.invokeExact(target, s, t, r, q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord4fvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$79.glMultiTexCoord4fvARB$MH,"glMultiTexCoord4fvARB");
    }
    public static void glMultiTexCoord4fvARB ( int target,  Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$79.glMultiTexCoord4fvARB$MH, "glMultiTexCoord4fvARB");
        try {
            mh$.invokeExact(target, v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord4iARB$MH() {
        return RuntimeHelper.requireNonNull(constants$79.glMultiTexCoord4iARB$MH,"glMultiTexCoord4iARB");
    }
    public static void glMultiTexCoord4iARB ( int target,  int s,  int t,  int r,  int q) {
        var mh$ = RuntimeHelper.requireNonNull(constants$79.glMultiTexCoord4iARB$MH, "glMultiTexCoord4iARB");
        try {
            mh$.invokeExact(target, s, t, r, q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord4ivARB$MH() {
        return RuntimeHelper.requireNonNull(constants$79.glMultiTexCoord4ivARB$MH,"glMultiTexCoord4ivARB");
    }
    public static void glMultiTexCoord4ivARB ( int target,  Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$79.glMultiTexCoord4ivARB$MH, "glMultiTexCoord4ivARB");
        try {
            mh$.invokeExact(target, v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord4sARB$MH() {
        return RuntimeHelper.requireNonNull(constants$79.glMultiTexCoord4sARB$MH,"glMultiTexCoord4sARB");
    }
    public static void glMultiTexCoord4sARB ( int target,  short s,  short t,  short r,  short q) {
        var mh$ = RuntimeHelper.requireNonNull(constants$79.glMultiTexCoord4sARB$MH, "glMultiTexCoord4sARB");
        try {
            mh$.invokeExact(target, s, t, r, q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord4svARB$MH() {
        return RuntimeHelper.requireNonNull(constants$79.glMultiTexCoord4svARB$MH,"glMultiTexCoord4svARB");
    }
    public static void glMultiTexCoord4svARB ( int target,  Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$79.glMultiTexCoord4svARB$MH, "glMultiTexCoord4svARB");
        try {
            mh$.invokeExact(target, v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static ValueLayout __int16_t = C_SHORT;
    public static ValueLayout __int32_t = C_INT;
    public static ValueLayout __int64_t = C_LONG;
    public static ValueLayout __int_least16_t = C_SHORT;
    public static ValueLayout __int_least32_t = C_INT;
    public static ValueLayout __int_least64_t = C_LONG;
    public static ValueLayout __quad_t = C_LONG;
    public static ValueLayout __intmax_t = C_LONG;
    public static ValueLayout __off_t = C_LONG;
    public static ValueLayout __off64_t = C_LONG;
    public static ValueLayout __pid_t = C_INT;
    public static ValueLayout __clock_t = C_LONG;
    public static ValueLayout __time_t = C_LONG;
    public static ValueLayout __suseconds_t = C_LONG;
    public static ValueLayout __daddr_t = C_INT;
    public static ValueLayout __key_t = C_INT;
    public static ValueLayout __clockid_t = C_INT;
    public static ValueLayout __blksize_t = C_LONG;
    public static ValueLayout __blkcnt_t = C_LONG;
    public static ValueLayout __blkcnt64_t = C_LONG;
    public static ValueLayout __fsword_t = C_LONG;
    public static ValueLayout __ssize_t = C_LONG;
    public static ValueLayout __syscall_slong_t = C_LONG;
    public static ValueLayout __loff_t = C_LONG;
    public static ValueLayout __intptr_t = C_LONG;
    public static ValueLayout __sig_atomic_t = C_INT;
    public static ValueLayout int16_t = C_SHORT;
    public static ValueLayout int32_t = C_INT;
    public static ValueLayout int64_t = C_LONG;
    public static ValueLayout int_least16_t = C_SHORT;
    public static ValueLayout int_least32_t = C_INT;
    public static ValueLayout int_least64_t = C_LONG;
    public static ValueLayout int_fast16_t = C_LONG;
    public static ValueLayout int_fast32_t = C_LONG;
    public static ValueLayout int_fast64_t = C_LONG;
    public static ValueLayout intptr_t = C_LONG;
    public static ValueLayout intmax_t = C_LONG;
    public static ValueLayout khronos_int32_t = C_INT;
    public static ValueLayout khronos_int64_t = C_LONG;
    public static ValueLayout khronos_int16_t = C_SHORT;
    public static ValueLayout khronos_intptr_t = C_LONG;
    public static ValueLayout khronos_ssize_t = C_LONG;
    public static ValueLayout khronos_float_t = C_FLOAT;
    public static ValueLayout khronos_stime_nanoseconds_t = C_LONG;
    public static int KHRONOS_FALSE() {
        return (int)0L;
    }
    public static int KHRONOS_TRUE() {
        return (int)1L;
    }
    public static int KHRONOS_BOOLEAN_ENUM_FORCE_SIZE() {
        return (int)2147483647L;
    }
    public static ValueLayout GLsizeiptr = C_LONG;
    public static ValueLayout GLintptr = C_LONG;
    public static ValueLayout GLchar = C_CHAR;
    public static ValueLayout __gwchar_t = C_INT;
    public static MethodHandle imaxabs$MH() {
        return RuntimeHelper.requireNonNull(constants$178.imaxabs$MH,"imaxabs");
    }
    public static long imaxabs ( long __n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$178.imaxabs$MH, "imaxabs");
        try {
            return (long)mh$.invokeExact(__n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle imaxdiv$MH() {
        return RuntimeHelper.requireNonNull(constants$178.imaxdiv$MH,"imaxdiv");
    }
    public static MemorySegment imaxdiv ( SegmentAllocator allocator,  long __numer,  long __denom) {
        var mh$ = RuntimeHelper.requireNonNull(constants$178.imaxdiv$MH, "imaxdiv");
        try {
            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, __numer, __denom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment imaxdiv ( ResourceScope scope,  long __numer,  long __denom) {
        return imaxdiv(SegmentAllocator.ofScope(scope), __numer, __denom);
    }
    public static MethodHandle strtoimax$MH() {
        return RuntimeHelper.requireNonNull(constants$178.strtoimax$MH,"strtoimax");
    }
    public static long strtoimax ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = RuntimeHelper.requireNonNull(constants$178.strtoimax$MH, "strtoimax");
        try {
            return (long)mh$.invokeExact(__nptr.address(), __endptr.address(), __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoumax$MH() {
        return RuntimeHelper.requireNonNull(constants$178.strtoumax$MH,"strtoumax");
    }
    public static long strtoumax ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = RuntimeHelper.requireNonNull(constants$178.strtoumax$MH, "strtoumax");
        try {
            return (long)mh$.invokeExact(__nptr.address(), __endptr.address(), __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcstoimax$MH() {
        return RuntimeHelper.requireNonNull(constants$179.wcstoimax$MH,"wcstoimax");
    }
    public static long wcstoimax ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = RuntimeHelper.requireNonNull(constants$179.wcstoimax$MH, "wcstoimax");
        try {
            return (long)mh$.invokeExact(__nptr.address(), __endptr.address(), __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcstoumax$MH() {
        return RuntimeHelper.requireNonNull(constants$179.wcstoumax$MH,"wcstoumax");
    }
    public static long wcstoumax ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = RuntimeHelper.requireNonNull(constants$179.wcstoumax$MH, "wcstoumax");
        try {
            return (long)mh$.invokeExact(__nptr.address(), __endptr.address(), __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static ValueLayout GLint64 = C_LONG;
    public static ValueLayout GLcharARB = C_CHAR;
    public static ValueLayout ptrdiff_t = C_LONG;
    public static ValueLayout wchar_t = C_INT;
    public static ValueLayout GLsizeiptrARB = C_LONG;
    public static ValueLayout GLintptrARB = C_LONG;
    public static ValueLayout GLfixed = C_INT;
    public static ValueLayout GLint64EXT = C_LONG;
    public static ValueLayout GLvdpauSurfaceNV = C_LONG;
    public static MethodHandle glBlendEquationSeparateATI$MH() {
        return RuntimeHelper.requireNonNull(constants$919.glBlendEquationSeparateATI$MH,"glBlendEquationSeparateATI");
    }
    public static void glBlendEquationSeparateATI ( int modeRGB,  int modeA) {
        var mh$ = RuntimeHelper.requireNonNull(constants$919.glBlendEquationSeparateATI$MH, "glBlendEquationSeparateATI");
        try {
            mh$.invokeExact(modeRGB, modeA);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluBeginCurve$MH() {
        return RuntimeHelper.requireNonNull(constants$920.gluBeginCurve$MH,"gluBeginCurve");
    }
    public static void gluBeginCurve ( Addressable nurb) {
        var mh$ = RuntimeHelper.requireNonNull(constants$920.gluBeginCurve$MH, "gluBeginCurve");
        try {
            mh$.invokeExact(nurb.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluBeginPolygon$MH() {
        return RuntimeHelper.requireNonNull(constants$920.gluBeginPolygon$MH,"gluBeginPolygon");
    }
    public static void gluBeginPolygon ( Addressable tess) {
        var mh$ = RuntimeHelper.requireNonNull(constants$920.gluBeginPolygon$MH, "gluBeginPolygon");
        try {
            mh$.invokeExact(tess.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluBeginSurface$MH() {
        return RuntimeHelper.requireNonNull(constants$920.gluBeginSurface$MH,"gluBeginSurface");
    }
    public static void gluBeginSurface ( Addressable nurb) {
        var mh$ = RuntimeHelper.requireNonNull(constants$920.gluBeginSurface$MH, "gluBeginSurface");
        try {
            mh$.invokeExact(nurb.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluBeginTrim$MH() {
        return RuntimeHelper.requireNonNull(constants$921.gluBeginTrim$MH,"gluBeginTrim");
    }
    public static void gluBeginTrim ( Addressable nurb) {
        var mh$ = RuntimeHelper.requireNonNull(constants$921.gluBeginTrim$MH, "gluBeginTrim");
        try {
            mh$.invokeExact(nurb.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluBuild1DMipmapLevels$MH() {
        return RuntimeHelper.requireNonNull(constants$921.gluBuild1DMipmapLevels$MH,"gluBuild1DMipmapLevels");
    }
    public static int gluBuild1DMipmapLevels ( int target,  int internalFormat,  int width,  int format,  int type,  int level,  int base,  int max,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$921.gluBuild1DMipmapLevels$MH, "gluBuild1DMipmapLevels");
        try {
            return (int)mh$.invokeExact(target, internalFormat, width, format, type, level, base, max, data.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluBuild1DMipmaps$MH() {
        return RuntimeHelper.requireNonNull(constants$921.gluBuild1DMipmaps$MH,"gluBuild1DMipmaps");
    }
    public static int gluBuild1DMipmaps ( int target,  int internalFormat,  int width,  int format,  int type,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$921.gluBuild1DMipmaps$MH, "gluBuild1DMipmaps");
        try {
            return (int)mh$.invokeExact(target, internalFormat, width, format, type, data.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluBuild2DMipmapLevels$MH() {
        return RuntimeHelper.requireNonNull(constants$921.gluBuild2DMipmapLevels$MH,"gluBuild2DMipmapLevels");
    }
    public static int gluBuild2DMipmapLevels ( int target,  int internalFormat,  int width,  int height,  int format,  int type,  int level,  int base,  int max,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$921.gluBuild2DMipmapLevels$MH, "gluBuild2DMipmapLevels");
        try {
            return (int)mh$.invokeExact(target, internalFormat, width, height, format, type, level, base, max, data.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluBuild2DMipmaps$MH() {
        return RuntimeHelper.requireNonNull(constants$921.gluBuild2DMipmaps$MH,"gluBuild2DMipmaps");
    }
    public static int gluBuild2DMipmaps ( int target,  int internalFormat,  int width,  int height,  int format,  int type,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$921.gluBuild2DMipmaps$MH, "gluBuild2DMipmaps");
        try {
            return (int)mh$.invokeExact(target, internalFormat, width, height, format, type, data.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluBuild3DMipmapLevels$MH() {
        return RuntimeHelper.requireNonNull(constants$921.gluBuild3DMipmapLevels$MH,"gluBuild3DMipmapLevels");
    }
    public static int gluBuild3DMipmapLevels ( int target,  int internalFormat,  int width,  int height,  int depth,  int format,  int type,  int level,  int base,  int max,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$921.gluBuild3DMipmapLevels$MH, "gluBuild3DMipmapLevels");
        try {
            return (int)mh$.invokeExact(target, internalFormat, width, height, depth, format, type, level, base, max, data.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluBuild3DMipmaps$MH() {
        return RuntimeHelper.requireNonNull(constants$922.gluBuild3DMipmaps$MH,"gluBuild3DMipmaps");
    }
    public static int gluBuild3DMipmaps ( int target,  int internalFormat,  int width,  int height,  int depth,  int format,  int type,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$922.gluBuild3DMipmaps$MH, "gluBuild3DMipmaps");
        try {
            return (int)mh$.invokeExact(target, internalFormat, width, height, depth, format, type, data.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluCheckExtension$MH() {
        return RuntimeHelper.requireNonNull(constants$922.gluCheckExtension$MH,"gluCheckExtension");
    }
    public static byte gluCheckExtension ( Addressable extName,  Addressable extString) {
        var mh$ = RuntimeHelper.requireNonNull(constants$922.gluCheckExtension$MH, "gluCheckExtension");
        try {
            return (byte)mh$.invokeExact(extName.address(), extString.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluCylinder$MH() {
        return RuntimeHelper.requireNonNull(constants$922.gluCylinder$MH,"gluCylinder");
    }
    public static void gluCylinder ( Addressable quad,  double base,  double top,  double height,  int slices,  int stacks) {
        var mh$ = RuntimeHelper.requireNonNull(constants$922.gluCylinder$MH, "gluCylinder");
        try {
            mh$.invokeExact(quad.address(), base, top, height, slices, stacks);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluDeleteNurbsRenderer$MH() {
        return RuntimeHelper.requireNonNull(constants$922.gluDeleteNurbsRenderer$MH,"gluDeleteNurbsRenderer");
    }
    public static void gluDeleteNurbsRenderer ( Addressable nurb) {
        var mh$ = RuntimeHelper.requireNonNull(constants$922.gluDeleteNurbsRenderer$MH, "gluDeleteNurbsRenderer");
        try {
            mh$.invokeExact(nurb.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluDeleteQuadric$MH() {
        return RuntimeHelper.requireNonNull(constants$922.gluDeleteQuadric$MH,"gluDeleteQuadric");
    }
    public static void gluDeleteQuadric ( Addressable quad) {
        var mh$ = RuntimeHelper.requireNonNull(constants$922.gluDeleteQuadric$MH, "gluDeleteQuadric");
        try {
            mh$.invokeExact(quad.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluDeleteTess$MH() {
        return RuntimeHelper.requireNonNull(constants$922.gluDeleteTess$MH,"gluDeleteTess");
    }
    public static void gluDeleteTess ( Addressable tess) {
        var mh$ = RuntimeHelper.requireNonNull(constants$922.gluDeleteTess$MH, "gluDeleteTess");
        try {
            mh$.invokeExact(tess.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluDisk$MH() {
        return RuntimeHelper.requireNonNull(constants$923.gluDisk$MH,"gluDisk");
    }
    public static void gluDisk ( Addressable quad,  double inner,  double outer,  int slices,  int loops) {
        var mh$ = RuntimeHelper.requireNonNull(constants$923.gluDisk$MH, "gluDisk");
        try {
            mh$.invokeExact(quad.address(), inner, outer, slices, loops);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluEndCurve$MH() {
        return RuntimeHelper.requireNonNull(constants$923.gluEndCurve$MH,"gluEndCurve");
    }
    public static void gluEndCurve ( Addressable nurb) {
        var mh$ = RuntimeHelper.requireNonNull(constants$923.gluEndCurve$MH, "gluEndCurve");
        try {
            mh$.invokeExact(nurb.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluEndPolygon$MH() {
        return RuntimeHelper.requireNonNull(constants$923.gluEndPolygon$MH,"gluEndPolygon");
    }
    public static void gluEndPolygon ( Addressable tess) {
        var mh$ = RuntimeHelper.requireNonNull(constants$923.gluEndPolygon$MH, "gluEndPolygon");
        try {
            mh$.invokeExact(tess.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluEndSurface$MH() {
        return RuntimeHelper.requireNonNull(constants$923.gluEndSurface$MH,"gluEndSurface");
    }
    public static void gluEndSurface ( Addressable nurb) {
        var mh$ = RuntimeHelper.requireNonNull(constants$923.gluEndSurface$MH, "gluEndSurface");
        try {
            mh$.invokeExact(nurb.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluEndTrim$MH() {
        return RuntimeHelper.requireNonNull(constants$923.gluEndTrim$MH,"gluEndTrim");
    }
    public static void gluEndTrim ( Addressable nurb) {
        var mh$ = RuntimeHelper.requireNonNull(constants$923.gluEndTrim$MH, "gluEndTrim");
        try {
            mh$.invokeExact(nurb.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluErrorString$MH() {
        return RuntimeHelper.requireNonNull(constants$923.gluErrorString$MH,"gluErrorString");
    }
    public static MemoryAddress gluErrorString ( int error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$923.gluErrorString$MH, "gluErrorString");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluGetNurbsProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$924.gluGetNurbsProperty$MH,"gluGetNurbsProperty");
    }
    public static void gluGetNurbsProperty ( Addressable nurb,  int property,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$924.gluGetNurbsProperty$MH, "gluGetNurbsProperty");
        try {
            mh$.invokeExact(nurb.address(), property, data.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluGetString$MH() {
        return RuntimeHelper.requireNonNull(constants$924.gluGetString$MH,"gluGetString");
    }
    public static MemoryAddress gluGetString ( int name) {
        var mh$ = RuntimeHelper.requireNonNull(constants$924.gluGetString$MH, "gluGetString");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluGetTessProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$924.gluGetTessProperty$MH,"gluGetTessProperty");
    }
    public static void gluGetTessProperty ( Addressable tess,  int which,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$924.gluGetTessProperty$MH, "gluGetTessProperty");
        try {
            mh$.invokeExact(tess.address(), which, data.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluLoadSamplingMatrices$MH() {
        return RuntimeHelper.requireNonNull(constants$924.gluLoadSamplingMatrices$MH,"gluLoadSamplingMatrices");
    }
    public static void gluLoadSamplingMatrices ( Addressable nurb,  Addressable model,  Addressable perspective,  Addressable view) {
        var mh$ = RuntimeHelper.requireNonNull(constants$924.gluLoadSamplingMatrices$MH, "gluLoadSamplingMatrices");
        try {
            mh$.invokeExact(nurb.address(), model.address(), perspective.address(), view.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluLookAt$MH() {
        return RuntimeHelper.requireNonNull(constants$924.gluLookAt$MH,"gluLookAt");
    }
    public static void gluLookAt ( double eyeX,  double eyeY,  double eyeZ,  double centerX,  double centerY,  double centerZ,  double upX,  double upY,  double upZ) {
        var mh$ = RuntimeHelper.requireNonNull(constants$924.gluLookAt$MH, "gluLookAt");
        try {
            mh$.invokeExact(eyeX, eyeY, eyeZ, centerX, centerY, centerZ, upX, upY, upZ);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluNewNurbsRenderer$MH() {
        return RuntimeHelper.requireNonNull(constants$924.gluNewNurbsRenderer$MH,"gluNewNurbsRenderer");
    }
    public static MemoryAddress gluNewNurbsRenderer () {
        var mh$ = RuntimeHelper.requireNonNull(constants$924.gluNewNurbsRenderer$MH, "gluNewNurbsRenderer");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluNewQuadric$MH() {
        return RuntimeHelper.requireNonNull(constants$925.gluNewQuadric$MH,"gluNewQuadric");
    }
    public static MemoryAddress gluNewQuadric () {
        var mh$ = RuntimeHelper.requireNonNull(constants$925.gluNewQuadric$MH, "gluNewQuadric");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluNewTess$MH() {
        return RuntimeHelper.requireNonNull(constants$925.gluNewTess$MH,"gluNewTess");
    }
    public static MemoryAddress gluNewTess () {
        var mh$ = RuntimeHelper.requireNonNull(constants$925.gluNewTess$MH, "gluNewTess");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluNextContour$MH() {
        return RuntimeHelper.requireNonNull(constants$925.gluNextContour$MH,"gluNextContour");
    }
    public static void gluNextContour ( Addressable tess,  int type) {
        var mh$ = RuntimeHelper.requireNonNull(constants$925.gluNextContour$MH, "gluNextContour");
        try {
            mh$.invokeExact(tess.address(), type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluNurbsCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$925.gluNurbsCallback$MH,"gluNurbsCallback");
    }
    public static void gluNurbsCallback ( Addressable nurb,  int which,  Addressable CallBackFunc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$925.gluNurbsCallback$MH, "gluNurbsCallback");
        try {
            mh$.invokeExact(nurb.address(), which, CallBackFunc.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluNurbsCallbackData$MH() {
        return RuntimeHelper.requireNonNull(constants$925.gluNurbsCallbackData$MH,"gluNurbsCallbackData");
    }
    public static void gluNurbsCallbackData ( Addressable nurb,  Addressable userData) {
        var mh$ = RuntimeHelper.requireNonNull(constants$925.gluNurbsCallbackData$MH, "gluNurbsCallbackData");
        try {
            mh$.invokeExact(nurb.address(), userData.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluNurbsCallbackDataEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$925.gluNurbsCallbackDataEXT$MH,"gluNurbsCallbackDataEXT");
    }
    public static void gluNurbsCallbackDataEXT ( Addressable nurb,  Addressable userData) {
        var mh$ = RuntimeHelper.requireNonNull(constants$925.gluNurbsCallbackDataEXT$MH, "gluNurbsCallbackDataEXT");
        try {
            mh$.invokeExact(nurb.address(), userData.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluNurbsCurve$MH() {
        return RuntimeHelper.requireNonNull(constants$926.gluNurbsCurve$MH,"gluNurbsCurve");
    }
    public static void gluNurbsCurve ( Addressable nurb,  int knotCount,  Addressable knots,  int stride,  Addressable control,  int order,  int type) {
        var mh$ = RuntimeHelper.requireNonNull(constants$926.gluNurbsCurve$MH, "gluNurbsCurve");
        try {
            mh$.invokeExact(nurb.address(), knotCount, knots.address(), stride, control.address(), order, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluNurbsProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$926.gluNurbsProperty$MH,"gluNurbsProperty");
    }
    public static void gluNurbsProperty ( Addressable nurb,  int property,  float value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$926.gluNurbsProperty$MH, "gluNurbsProperty");
        try {
            mh$.invokeExact(nurb.address(), property, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluNurbsSurface$MH() {
        return RuntimeHelper.requireNonNull(constants$926.gluNurbsSurface$MH,"gluNurbsSurface");
    }
    public static void gluNurbsSurface ( Addressable nurb,  int sKnotCount,  Addressable sKnots,  int tKnotCount,  Addressable tKnots,  int sStride,  int tStride,  Addressable control,  int sOrder,  int tOrder,  int type) {
        var mh$ = RuntimeHelper.requireNonNull(constants$926.gluNurbsSurface$MH, "gluNurbsSurface");
        try {
            mh$.invokeExact(nurb.address(), sKnotCount, sKnots.address(), tKnotCount, tKnots.address(), sStride, tStride, control.address(), sOrder, tOrder, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluOrtho2D$MH() {
        return RuntimeHelper.requireNonNull(constants$926.gluOrtho2D$MH,"gluOrtho2D");
    }
    public static void gluOrtho2D ( double left,  double right,  double bottom,  double top) {
        var mh$ = RuntimeHelper.requireNonNull(constants$926.gluOrtho2D$MH, "gluOrtho2D");
        try {
            mh$.invokeExact(left, right, bottom, top);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluPartialDisk$MH() {
        return RuntimeHelper.requireNonNull(constants$926.gluPartialDisk$MH,"gluPartialDisk");
    }
    public static void gluPartialDisk ( Addressable quad,  double inner,  double outer,  int slices,  int loops,  double start,  double sweep) {
        var mh$ = RuntimeHelper.requireNonNull(constants$926.gluPartialDisk$MH, "gluPartialDisk");
        try {
            mh$.invokeExact(quad.address(), inner, outer, slices, loops, start, sweep);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluPerspective$MH() {
        return RuntimeHelper.requireNonNull(constants$926.gluPerspective$MH,"gluPerspective");
    }
    public static void gluPerspective ( double fovy,  double aspect,  double zNear,  double zFar) {
        var mh$ = RuntimeHelper.requireNonNull(constants$926.gluPerspective$MH, "gluPerspective");
        try {
            mh$.invokeExact(fovy, aspect, zNear, zFar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluPickMatrix$MH() {
        return RuntimeHelper.requireNonNull(constants$927.gluPickMatrix$MH,"gluPickMatrix");
    }
    public static void gluPickMatrix ( double x,  double y,  double delX,  double delY,  Addressable viewport) {
        var mh$ = RuntimeHelper.requireNonNull(constants$927.gluPickMatrix$MH, "gluPickMatrix");
        try {
            mh$.invokeExact(x, y, delX, delY, viewport.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluProject$MH() {
        return RuntimeHelper.requireNonNull(constants$927.gluProject$MH,"gluProject");
    }
    public static int gluProject ( double objX,  double objY,  double objZ,  Addressable model,  Addressable proj,  Addressable view,  Addressable winX,  Addressable winY,  Addressable winZ) {
        var mh$ = RuntimeHelper.requireNonNull(constants$927.gluProject$MH, "gluProject");
        try {
            return (int)mh$.invokeExact(objX, objY, objZ, model.address(), proj.address(), view.address(), winX.address(), winY.address(), winZ.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluPwlCurve$MH() {
        return RuntimeHelper.requireNonNull(constants$927.gluPwlCurve$MH,"gluPwlCurve");
    }
    public static void gluPwlCurve ( Addressable nurb,  int count,  Addressable data,  int stride,  int type) {
        var mh$ = RuntimeHelper.requireNonNull(constants$927.gluPwlCurve$MH, "gluPwlCurve");
        try {
            mh$.invokeExact(nurb.address(), count, data.address(), stride, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluQuadricCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$927.gluQuadricCallback$MH,"gluQuadricCallback");
    }
    public static void gluQuadricCallback ( Addressable quad,  int which,  Addressable CallBackFunc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$927.gluQuadricCallback$MH, "gluQuadricCallback");
        try {
            mh$.invokeExact(quad.address(), which, CallBackFunc.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluQuadricDrawStyle$MH() {
        return RuntimeHelper.requireNonNull(constants$927.gluQuadricDrawStyle$MH,"gluQuadricDrawStyle");
    }
    public static void gluQuadricDrawStyle ( Addressable quad,  int draw) {
        var mh$ = RuntimeHelper.requireNonNull(constants$927.gluQuadricDrawStyle$MH, "gluQuadricDrawStyle");
        try {
            mh$.invokeExact(quad.address(), draw);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluQuadricNormals$MH() {
        return RuntimeHelper.requireNonNull(constants$927.gluQuadricNormals$MH,"gluQuadricNormals");
    }
    public static void gluQuadricNormals ( Addressable quad,  int normal) {
        var mh$ = RuntimeHelper.requireNonNull(constants$927.gluQuadricNormals$MH, "gluQuadricNormals");
        try {
            mh$.invokeExact(quad.address(), normal);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluQuadricOrientation$MH() {
        return RuntimeHelper.requireNonNull(constants$928.gluQuadricOrientation$MH,"gluQuadricOrientation");
    }
    public static void gluQuadricOrientation ( Addressable quad,  int orientation) {
        var mh$ = RuntimeHelper.requireNonNull(constants$928.gluQuadricOrientation$MH, "gluQuadricOrientation");
        try {
            mh$.invokeExact(quad.address(), orientation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluQuadricTexture$MH() {
        return RuntimeHelper.requireNonNull(constants$928.gluQuadricTexture$MH,"gluQuadricTexture");
    }
    public static void gluQuadricTexture ( Addressable quad,  byte texture) {
        var mh$ = RuntimeHelper.requireNonNull(constants$928.gluQuadricTexture$MH, "gluQuadricTexture");
        try {
            mh$.invokeExact(quad.address(), texture);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluScaleImage$MH() {
        return RuntimeHelper.requireNonNull(constants$928.gluScaleImage$MH,"gluScaleImage");
    }
    public static int gluScaleImage ( int format,  int wIn,  int hIn,  int typeIn,  Addressable dataIn,  int wOut,  int hOut,  int typeOut,  Addressable dataOut) {
        var mh$ = RuntimeHelper.requireNonNull(constants$928.gluScaleImage$MH, "gluScaleImage");
        try {
            return (int)mh$.invokeExact(format, wIn, hIn, typeIn, dataIn.address(), wOut, hOut, typeOut, dataOut.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluSphere$MH() {
        return RuntimeHelper.requireNonNull(constants$928.gluSphere$MH,"gluSphere");
    }
    public static void gluSphere ( Addressable quad,  double radius,  int slices,  int stacks) {
        var mh$ = RuntimeHelper.requireNonNull(constants$928.gluSphere$MH, "gluSphere");
        try {
            mh$.invokeExact(quad.address(), radius, slices, stacks);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluTessBeginContour$MH() {
        return RuntimeHelper.requireNonNull(constants$928.gluTessBeginContour$MH,"gluTessBeginContour");
    }
    public static void gluTessBeginContour ( Addressable tess) {
        var mh$ = RuntimeHelper.requireNonNull(constants$928.gluTessBeginContour$MH, "gluTessBeginContour");
        try {
            mh$.invokeExact(tess.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluTessBeginPolygon$MH() {
        return RuntimeHelper.requireNonNull(constants$928.gluTessBeginPolygon$MH,"gluTessBeginPolygon");
    }
    public static void gluTessBeginPolygon ( Addressable tess,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$928.gluTessBeginPolygon$MH, "gluTessBeginPolygon");
        try {
            mh$.invokeExact(tess.address(), data.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluTessCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$929.gluTessCallback$MH,"gluTessCallback");
    }
    public static void gluTessCallback ( Addressable tess,  int which,  Addressable CallBackFunc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$929.gluTessCallback$MH, "gluTessCallback");
        try {
            mh$.invokeExact(tess.address(), which, CallBackFunc.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluTessEndContour$MH() {
        return RuntimeHelper.requireNonNull(constants$929.gluTessEndContour$MH,"gluTessEndContour");
    }
    public static void gluTessEndContour ( Addressable tess) {
        var mh$ = RuntimeHelper.requireNonNull(constants$929.gluTessEndContour$MH, "gluTessEndContour");
        try {
            mh$.invokeExact(tess.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluTessEndPolygon$MH() {
        return RuntimeHelper.requireNonNull(constants$929.gluTessEndPolygon$MH,"gluTessEndPolygon");
    }
    public static void gluTessEndPolygon ( Addressable tess) {
        var mh$ = RuntimeHelper.requireNonNull(constants$929.gluTessEndPolygon$MH, "gluTessEndPolygon");
        try {
            mh$.invokeExact(tess.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluTessNormal$MH() {
        return RuntimeHelper.requireNonNull(constants$929.gluTessNormal$MH,"gluTessNormal");
    }
    public static void gluTessNormal ( Addressable tess,  double valueX,  double valueY,  double valueZ) {
        var mh$ = RuntimeHelper.requireNonNull(constants$929.gluTessNormal$MH, "gluTessNormal");
        try {
            mh$.invokeExact(tess.address(), valueX, valueY, valueZ);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluTessProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$929.gluTessProperty$MH,"gluTessProperty");
    }
    public static void gluTessProperty ( Addressable tess,  int which,  double data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$929.gluTessProperty$MH, "gluTessProperty");
        try {
            mh$.invokeExact(tess.address(), which, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluTessVertex$MH() {
        return RuntimeHelper.requireNonNull(constants$929.gluTessVertex$MH,"gluTessVertex");
    }
    public static void gluTessVertex ( Addressable tess,  Addressable location,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$929.gluTessVertex$MH, "gluTessVertex");
        try {
            mh$.invokeExact(tess.address(), location.address(), data.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluUnProject$MH() {
        return RuntimeHelper.requireNonNull(constants$930.gluUnProject$MH,"gluUnProject");
    }
    public static int gluUnProject ( double winX,  double winY,  double winZ,  Addressable model,  Addressable proj,  Addressable view,  Addressable objX,  Addressable objY,  Addressable objZ) {
        var mh$ = RuntimeHelper.requireNonNull(constants$930.gluUnProject$MH, "gluUnProject");
        try {
            return (int)mh$.invokeExact(winX, winY, winZ, model.address(), proj.address(), view.address(), objX.address(), objY.address(), objZ.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluUnProject4$MH() {
        return RuntimeHelper.requireNonNull(constants$930.gluUnProject4$MH,"gluUnProject4");
    }
    public static int gluUnProject4 ( double winX,  double winY,  double winZ,  double clipW,  Addressable model,  Addressable proj,  Addressable view,  double nearVal,  double farVal,  Addressable objX,  Addressable objY,  Addressable objZ,  Addressable objW) {
        var mh$ = RuntimeHelper.requireNonNull(constants$930.gluUnProject4$MH, "gluUnProject4");
        try {
            return (int)mh$.invokeExact(winX, winY, winZ, clipW, model.address(), proj.address(), view.address(), nearVal, farVal, objX.address(), objY.address(), objZ.address(), objW.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemoryLayout glutStrokeRoman$LAYOUT() {
        return constants$930.glutStrokeRoman$LAYOUT;
    }
    public static VarHandle glutStrokeRoman$VH() {
        return constants$930.glutStrokeRoman$VH;
    }
    public static MemorySegment glutStrokeRoman$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$930.glutStrokeRoman$SEGMENT,"glutStrokeRoman");
    }
    public static MemoryAddress glutStrokeRoman$get() {
        return (jdk.incubator.foreign.MemoryAddress) constants$930.glutStrokeRoman$VH.get(RuntimeHelper.requireNonNull(constants$930.glutStrokeRoman$SEGMENT, "glutStrokeRoman"));
    }
    public static void glutStrokeRoman$set( MemoryAddress x) {
        constants$930.glutStrokeRoman$VH.set(RuntimeHelper.requireNonNull(constants$930.glutStrokeRoman$SEGMENT, "glutStrokeRoman"), x);
    }
    public static MemoryLayout glutStrokeMonoRoman$LAYOUT() {
        return constants$930.glutStrokeMonoRoman$LAYOUT;
    }
    public static VarHandle glutStrokeMonoRoman$VH() {
        return constants$930.glutStrokeMonoRoman$VH;
    }
    public static MemorySegment glutStrokeMonoRoman$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$930.glutStrokeMonoRoman$SEGMENT,"glutStrokeMonoRoman");
    }
    public static MemoryAddress glutStrokeMonoRoman$get() {
        return (jdk.incubator.foreign.MemoryAddress) constants$930.glutStrokeMonoRoman$VH.get(RuntimeHelper.requireNonNull(constants$930.glutStrokeMonoRoman$SEGMENT, "glutStrokeMonoRoman"));
    }
    public static void glutStrokeMonoRoman$set( MemoryAddress x) {
        constants$930.glutStrokeMonoRoman$VH.set(RuntimeHelper.requireNonNull(constants$930.glutStrokeMonoRoman$SEGMENT, "glutStrokeMonoRoman"), x);
    }
    public static MemoryLayout glutBitmap9By15$LAYOUT() {
        return constants$930.glutBitmap9By15$LAYOUT;
    }
    public static VarHandle glutBitmap9By15$VH() {
        return constants$930.glutBitmap9By15$VH;
    }
    public static MemorySegment glutBitmap9By15$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$930.glutBitmap9By15$SEGMENT,"glutBitmap9By15");
    }
    public static MemoryAddress glutBitmap9By15$get() {
        return (jdk.incubator.foreign.MemoryAddress) constants$930.glutBitmap9By15$VH.get(RuntimeHelper.requireNonNull(constants$930.glutBitmap9By15$SEGMENT, "glutBitmap9By15"));
    }
    public static void glutBitmap9By15$set( MemoryAddress x) {
        constants$930.glutBitmap9By15$VH.set(RuntimeHelper.requireNonNull(constants$930.glutBitmap9By15$SEGMENT, "glutBitmap9By15"), x);
    }
    public static MemoryLayout glutBitmap8By13$LAYOUT() {
        return constants$930.glutBitmap8By13$LAYOUT;
    }
    public static VarHandle glutBitmap8By13$VH() {
        return constants$930.glutBitmap8By13$VH;
    }
    public static MemorySegment glutBitmap8By13$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$930.glutBitmap8By13$SEGMENT,"glutBitmap8By13");
    }
    public static MemoryAddress glutBitmap8By13$get() {
        return (jdk.incubator.foreign.MemoryAddress) constants$930.glutBitmap8By13$VH.get(RuntimeHelper.requireNonNull(constants$930.glutBitmap8By13$SEGMENT, "glutBitmap8By13"));
    }
    public static void glutBitmap8By13$set( MemoryAddress x) {
        constants$930.glutBitmap8By13$VH.set(RuntimeHelper.requireNonNull(constants$930.glutBitmap8By13$SEGMENT, "glutBitmap8By13"), x);
    }
    public static MemoryLayout glutBitmapTimesRoman10$LAYOUT() {
        return constants$931.glutBitmapTimesRoman10$LAYOUT;
    }
    public static VarHandle glutBitmapTimesRoman10$VH() {
        return constants$931.glutBitmapTimesRoman10$VH;
    }
    public static MemorySegment glutBitmapTimesRoman10$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$931.glutBitmapTimesRoman10$SEGMENT,"glutBitmapTimesRoman10");
    }
    public static MemoryAddress glutBitmapTimesRoman10$get() {
        return (jdk.incubator.foreign.MemoryAddress) constants$931.glutBitmapTimesRoman10$VH.get(RuntimeHelper.requireNonNull(constants$931.glutBitmapTimesRoman10$SEGMENT, "glutBitmapTimesRoman10"));
    }
    public static void glutBitmapTimesRoman10$set( MemoryAddress x) {
        constants$931.glutBitmapTimesRoman10$VH.set(RuntimeHelper.requireNonNull(constants$931.glutBitmapTimesRoman10$SEGMENT, "glutBitmapTimesRoman10"), x);
    }
    public static MemoryLayout glutBitmapTimesRoman24$LAYOUT() {
        return constants$931.glutBitmapTimesRoman24$LAYOUT;
    }
    public static VarHandle glutBitmapTimesRoman24$VH() {
        return constants$931.glutBitmapTimesRoman24$VH;
    }
    public static MemorySegment glutBitmapTimesRoman24$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$931.glutBitmapTimesRoman24$SEGMENT,"glutBitmapTimesRoman24");
    }
    public static MemoryAddress glutBitmapTimesRoman24$get() {
        return (jdk.incubator.foreign.MemoryAddress) constants$931.glutBitmapTimesRoman24$VH.get(RuntimeHelper.requireNonNull(constants$931.glutBitmapTimesRoman24$SEGMENT, "glutBitmapTimesRoman24"));
    }
    public static void glutBitmapTimesRoman24$set( MemoryAddress x) {
        constants$931.glutBitmapTimesRoman24$VH.set(RuntimeHelper.requireNonNull(constants$931.glutBitmapTimesRoman24$SEGMENT, "glutBitmapTimesRoman24"), x);
    }
    public static MemoryLayout glutBitmapHelvetica10$LAYOUT() {
        return constants$931.glutBitmapHelvetica10$LAYOUT;
    }
    public static VarHandle glutBitmapHelvetica10$VH() {
        return constants$931.glutBitmapHelvetica10$VH;
    }
    public static MemorySegment glutBitmapHelvetica10$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$931.glutBitmapHelvetica10$SEGMENT,"glutBitmapHelvetica10");
    }
    public static MemoryAddress glutBitmapHelvetica10$get() {
        return (jdk.incubator.foreign.MemoryAddress) constants$931.glutBitmapHelvetica10$VH.get(RuntimeHelper.requireNonNull(constants$931.glutBitmapHelvetica10$SEGMENT, "glutBitmapHelvetica10"));
    }
    public static void glutBitmapHelvetica10$set( MemoryAddress x) {
        constants$931.glutBitmapHelvetica10$VH.set(RuntimeHelper.requireNonNull(constants$931.glutBitmapHelvetica10$SEGMENT, "glutBitmapHelvetica10"), x);
    }
    public static MemoryLayout glutBitmapHelvetica12$LAYOUT() {
        return constants$931.glutBitmapHelvetica12$LAYOUT;
    }
    public static VarHandle glutBitmapHelvetica12$VH() {
        return constants$931.glutBitmapHelvetica12$VH;
    }
    public static MemorySegment glutBitmapHelvetica12$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$931.glutBitmapHelvetica12$SEGMENT,"glutBitmapHelvetica12");
    }
    public static MemoryAddress glutBitmapHelvetica12$get() {
        return (jdk.incubator.foreign.MemoryAddress) constants$931.glutBitmapHelvetica12$VH.get(RuntimeHelper.requireNonNull(constants$931.glutBitmapHelvetica12$SEGMENT, "glutBitmapHelvetica12"));
    }
    public static void glutBitmapHelvetica12$set( MemoryAddress x) {
        constants$931.glutBitmapHelvetica12$VH.set(RuntimeHelper.requireNonNull(constants$931.glutBitmapHelvetica12$SEGMENT, "glutBitmapHelvetica12"), x);
    }
    public static MemoryLayout glutBitmapHelvetica18$LAYOUT() {
        return constants$931.glutBitmapHelvetica18$LAYOUT;
    }
    public static VarHandle glutBitmapHelvetica18$VH() {
        return constants$931.glutBitmapHelvetica18$VH;
    }
    public static MemorySegment glutBitmapHelvetica18$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$931.glutBitmapHelvetica18$SEGMENT,"glutBitmapHelvetica18");
    }
    public static MemoryAddress glutBitmapHelvetica18$get() {
        return (jdk.incubator.foreign.MemoryAddress) constants$931.glutBitmapHelvetica18$VH.get(RuntimeHelper.requireNonNull(constants$931.glutBitmapHelvetica18$SEGMENT, "glutBitmapHelvetica18"));
    }
    public static void glutBitmapHelvetica18$set( MemoryAddress x) {
        constants$931.glutBitmapHelvetica18$VH.set(RuntimeHelper.requireNonNull(constants$931.glutBitmapHelvetica18$SEGMENT, "glutBitmapHelvetica18"), x);
    }
    public static MethodHandle glutInit$MH() {
        return RuntimeHelper.requireNonNull(constants$931.glutInit$MH,"glutInit");
    }
    public static void glutInit ( Addressable pargc,  Addressable argv) {
        var mh$ = RuntimeHelper.requireNonNull(constants$931.glutInit$MH, "glutInit");
        try {
            mh$.invokeExact(pargc.address(), argv.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutInitWindowPosition$MH() {
        return RuntimeHelper.requireNonNull(constants$932.glutInitWindowPosition$MH,"glutInitWindowPosition");
    }
    public static void glutInitWindowPosition ( int x,  int y) {
        var mh$ = RuntimeHelper.requireNonNull(constants$932.glutInitWindowPosition$MH, "glutInitWindowPosition");
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutInitWindowSize$MH() {
        return RuntimeHelper.requireNonNull(constants$932.glutInitWindowSize$MH,"glutInitWindowSize");
    }
    public static void glutInitWindowSize ( int width,  int height) {
        var mh$ = RuntimeHelper.requireNonNull(constants$932.glutInitWindowSize$MH, "glutInitWindowSize");
        try {
            mh$.invokeExact(width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutInitDisplayMode$MH() {
        return RuntimeHelper.requireNonNull(constants$932.glutInitDisplayMode$MH,"glutInitDisplayMode");
    }
    public static void glutInitDisplayMode ( int displayMode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$932.glutInitDisplayMode$MH, "glutInitDisplayMode");
        try {
            mh$.invokeExact(displayMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutInitDisplayString$MH() {
        return RuntimeHelper.requireNonNull(constants$932.glutInitDisplayString$MH,"glutInitDisplayString");
    }
    public static void glutInitDisplayString ( Addressable displayMode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$932.glutInitDisplayString$MH, "glutInitDisplayString");
        try {
            mh$.invokeExact(displayMode.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutMainLoop$MH() {
        return RuntimeHelper.requireNonNull(constants$932.glutMainLoop$MH,"glutMainLoop");
    }
    public static void glutMainLoop () {
        var mh$ = RuntimeHelper.requireNonNull(constants$932.glutMainLoop$MH, "glutMainLoop");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutCreateWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$932.glutCreateWindow$MH,"glutCreateWindow");
    }
    public static int glutCreateWindow ( Addressable title) {
        var mh$ = RuntimeHelper.requireNonNull(constants$932.glutCreateWindow$MH, "glutCreateWindow");
        try {
            return (int)mh$.invokeExact(title.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutCreateSubWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$933.glutCreateSubWindow$MH,"glutCreateSubWindow");
    }
    public static int glutCreateSubWindow ( int window,  int x,  int y,  int width,  int height) {
        var mh$ = RuntimeHelper.requireNonNull(constants$933.glutCreateSubWindow$MH, "glutCreateSubWindow");
        try {
            return (int)mh$.invokeExact(window, x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutDestroyWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$933.glutDestroyWindow$MH,"glutDestroyWindow");
    }
    public static void glutDestroyWindow ( int window) {
        var mh$ = RuntimeHelper.requireNonNull(constants$933.glutDestroyWindow$MH, "glutDestroyWindow");
        try {
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSetWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$933.glutSetWindow$MH,"glutSetWindow");
    }
    public static void glutSetWindow ( int window) {
        var mh$ = RuntimeHelper.requireNonNull(constants$933.glutSetWindow$MH, "glutSetWindow");
        try {
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutGetWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$933.glutGetWindow$MH,"glutGetWindow");
    }
    public static int glutGetWindow () {
        var mh$ = RuntimeHelper.requireNonNull(constants$933.glutGetWindow$MH, "glutGetWindow");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSetWindowTitle$MH() {
        return RuntimeHelper.requireNonNull(constants$933.glutSetWindowTitle$MH,"glutSetWindowTitle");
    }
    public static void glutSetWindowTitle ( Addressable title) {
        var mh$ = RuntimeHelper.requireNonNull(constants$933.glutSetWindowTitle$MH, "glutSetWindowTitle");
        try {
            mh$.invokeExact(title.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSetIconTitle$MH() {
        return RuntimeHelper.requireNonNull(constants$933.glutSetIconTitle$MH,"glutSetIconTitle");
    }
    public static void glutSetIconTitle ( Addressable title) {
        var mh$ = RuntimeHelper.requireNonNull(constants$933.glutSetIconTitle$MH, "glutSetIconTitle");
        try {
            mh$.invokeExact(title.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutReshapeWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$934.glutReshapeWindow$MH,"glutReshapeWindow");
    }
    public static void glutReshapeWindow ( int width,  int height) {
        var mh$ = RuntimeHelper.requireNonNull(constants$934.glutReshapeWindow$MH, "glutReshapeWindow");
        try {
            mh$.invokeExact(width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutPositionWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$934.glutPositionWindow$MH,"glutPositionWindow");
    }
    public static void glutPositionWindow ( int x,  int y) {
        var mh$ = RuntimeHelper.requireNonNull(constants$934.glutPositionWindow$MH, "glutPositionWindow");
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutShowWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$934.glutShowWindow$MH,"glutShowWindow");
    }
    public static void glutShowWindow () {
        var mh$ = RuntimeHelper.requireNonNull(constants$934.glutShowWindow$MH, "glutShowWindow");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutHideWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$934.glutHideWindow$MH,"glutHideWindow");
    }
    public static void glutHideWindow () {
        var mh$ = RuntimeHelper.requireNonNull(constants$934.glutHideWindow$MH, "glutHideWindow");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutIconifyWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$934.glutIconifyWindow$MH,"glutIconifyWindow");
    }
    public static void glutIconifyWindow () {
        var mh$ = RuntimeHelper.requireNonNull(constants$934.glutIconifyWindow$MH, "glutIconifyWindow");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutPushWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$934.glutPushWindow$MH,"glutPushWindow");
    }
    public static void glutPushWindow () {
        var mh$ = RuntimeHelper.requireNonNull(constants$934.glutPushWindow$MH, "glutPushWindow");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutPopWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$935.glutPopWindow$MH,"glutPopWindow");
    }
    public static void glutPopWindow () {
        var mh$ = RuntimeHelper.requireNonNull(constants$935.glutPopWindow$MH, "glutPopWindow");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutFullScreen$MH() {
        return RuntimeHelper.requireNonNull(constants$935.glutFullScreen$MH,"glutFullScreen");
    }
    public static void glutFullScreen () {
        var mh$ = RuntimeHelper.requireNonNull(constants$935.glutFullScreen$MH, "glutFullScreen");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutPostWindowRedisplay$MH() {
        return RuntimeHelper.requireNonNull(constants$935.glutPostWindowRedisplay$MH,"glutPostWindowRedisplay");
    }
    public static void glutPostWindowRedisplay ( int window) {
        var mh$ = RuntimeHelper.requireNonNull(constants$935.glutPostWindowRedisplay$MH, "glutPostWindowRedisplay");
        try {
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutPostRedisplay$MH() {
        return RuntimeHelper.requireNonNull(constants$935.glutPostRedisplay$MH,"glutPostRedisplay");
    }
    public static void glutPostRedisplay () {
        var mh$ = RuntimeHelper.requireNonNull(constants$935.glutPostRedisplay$MH, "glutPostRedisplay");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSwapBuffers$MH() {
        return RuntimeHelper.requireNonNull(constants$935.glutSwapBuffers$MH,"glutSwapBuffers");
    }
    public static void glutSwapBuffers () {
        var mh$ = RuntimeHelper.requireNonNull(constants$935.glutSwapBuffers$MH, "glutSwapBuffers");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutWarpPointer$MH() {
        return RuntimeHelper.requireNonNull(constants$935.glutWarpPointer$MH,"glutWarpPointer");
    }
    public static void glutWarpPointer ( int x,  int y) {
        var mh$ = RuntimeHelper.requireNonNull(constants$935.glutWarpPointer$MH, "glutWarpPointer");
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSetCursor$MH() {
        return RuntimeHelper.requireNonNull(constants$936.glutSetCursor$MH,"glutSetCursor");
    }
    public static void glutSetCursor ( int cursor) {
        var mh$ = RuntimeHelper.requireNonNull(constants$936.glutSetCursor$MH, "glutSetCursor");
        try {
            mh$.invokeExact(cursor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutEstablishOverlay$MH() {
        return RuntimeHelper.requireNonNull(constants$936.glutEstablishOverlay$MH,"glutEstablishOverlay");
    }
    public static void glutEstablishOverlay () {
        var mh$ = RuntimeHelper.requireNonNull(constants$936.glutEstablishOverlay$MH, "glutEstablishOverlay");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutRemoveOverlay$MH() {
        return RuntimeHelper.requireNonNull(constants$936.glutRemoveOverlay$MH,"glutRemoveOverlay");
    }
    public static void glutRemoveOverlay () {
        var mh$ = RuntimeHelper.requireNonNull(constants$936.glutRemoveOverlay$MH, "glutRemoveOverlay");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutUseLayer$MH() {
        return RuntimeHelper.requireNonNull(constants$936.glutUseLayer$MH,"glutUseLayer");
    }
    public static void glutUseLayer ( int layer) {
        var mh$ = RuntimeHelper.requireNonNull(constants$936.glutUseLayer$MH, "glutUseLayer");
        try {
            mh$.invokeExact(layer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutPostOverlayRedisplay$MH() {
        return RuntimeHelper.requireNonNull(constants$936.glutPostOverlayRedisplay$MH,"glutPostOverlayRedisplay");
    }
    public static void glutPostOverlayRedisplay () {
        var mh$ = RuntimeHelper.requireNonNull(constants$936.glutPostOverlayRedisplay$MH, "glutPostOverlayRedisplay");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutPostWindowOverlayRedisplay$MH() {
        return RuntimeHelper.requireNonNull(constants$936.glutPostWindowOverlayRedisplay$MH,"glutPostWindowOverlayRedisplay");
    }
    public static void glutPostWindowOverlayRedisplay ( int window) {
        var mh$ = RuntimeHelper.requireNonNull(constants$936.glutPostWindowOverlayRedisplay$MH, "glutPostWindowOverlayRedisplay");
        try {
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutShowOverlay$MH() {
        return RuntimeHelper.requireNonNull(constants$937.glutShowOverlay$MH,"glutShowOverlay");
    }
    public static void glutShowOverlay () {
        var mh$ = RuntimeHelper.requireNonNull(constants$937.glutShowOverlay$MH, "glutShowOverlay");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutHideOverlay$MH() {
        return RuntimeHelper.requireNonNull(constants$937.glutHideOverlay$MH,"glutHideOverlay");
    }
    public static void glutHideOverlay () {
        var mh$ = RuntimeHelper.requireNonNull(constants$937.glutHideOverlay$MH, "glutHideOverlay");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutCreateMenu$MH() {
        return RuntimeHelper.requireNonNull(constants$937.glutCreateMenu$MH,"glutCreateMenu");
    }
    public static int glutCreateMenu ( Addressable callback) {
        var mh$ = RuntimeHelper.requireNonNull(constants$937.glutCreateMenu$MH, "glutCreateMenu");
        try {
            return (int)mh$.invokeExact(callback.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutDestroyMenu$MH() {
        return RuntimeHelper.requireNonNull(constants$937.glutDestroyMenu$MH,"glutDestroyMenu");
    }
    public static void glutDestroyMenu ( int menu) {
        var mh$ = RuntimeHelper.requireNonNull(constants$937.glutDestroyMenu$MH, "glutDestroyMenu");
        try {
            mh$.invokeExact(menu);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutGetMenu$MH() {
        return RuntimeHelper.requireNonNull(constants$938.glutGetMenu$MH,"glutGetMenu");
    }
    public static int glutGetMenu () {
        var mh$ = RuntimeHelper.requireNonNull(constants$938.glutGetMenu$MH, "glutGetMenu");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSetMenu$MH() {
        return RuntimeHelper.requireNonNull(constants$938.glutSetMenu$MH,"glutSetMenu");
    }
    public static void glutSetMenu ( int menu) {
        var mh$ = RuntimeHelper.requireNonNull(constants$938.glutSetMenu$MH, "glutSetMenu");
        try {
            mh$.invokeExact(menu);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutAddMenuEntry$MH() {
        return RuntimeHelper.requireNonNull(constants$938.glutAddMenuEntry$MH,"glutAddMenuEntry");
    }
    public static void glutAddMenuEntry ( Addressable label,  int value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$938.glutAddMenuEntry$MH, "glutAddMenuEntry");
        try {
            mh$.invokeExact(label.address(), value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutAddSubMenu$MH() {
        return RuntimeHelper.requireNonNull(constants$938.glutAddSubMenu$MH,"glutAddSubMenu");
    }
    public static void glutAddSubMenu ( Addressable label,  int subMenu) {
        var mh$ = RuntimeHelper.requireNonNull(constants$938.glutAddSubMenu$MH, "glutAddSubMenu");
        try {
            mh$.invokeExact(label.address(), subMenu);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutChangeToMenuEntry$MH() {
        return RuntimeHelper.requireNonNull(constants$938.glutChangeToMenuEntry$MH,"glutChangeToMenuEntry");
    }
    public static void glutChangeToMenuEntry ( int item,  Addressable label,  int value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$938.glutChangeToMenuEntry$MH, "glutChangeToMenuEntry");
        try {
            mh$.invokeExact(item, label.address(), value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutChangeToSubMenu$MH() {
        return RuntimeHelper.requireNonNull(constants$938.glutChangeToSubMenu$MH,"glutChangeToSubMenu");
    }
    public static void glutChangeToSubMenu ( int item,  Addressable label,  int value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$938.glutChangeToSubMenu$MH, "glutChangeToSubMenu");
        try {
            mh$.invokeExact(item, label.address(), value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutRemoveMenuItem$MH() {
        return RuntimeHelper.requireNonNull(constants$939.glutRemoveMenuItem$MH,"glutRemoveMenuItem");
    }
    public static void glutRemoveMenuItem ( int item) {
        var mh$ = RuntimeHelper.requireNonNull(constants$939.glutRemoveMenuItem$MH, "glutRemoveMenuItem");
        try {
            mh$.invokeExact(item);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutAttachMenu$MH() {
        return RuntimeHelper.requireNonNull(constants$939.glutAttachMenu$MH,"glutAttachMenu");
    }
    public static void glutAttachMenu ( int button) {
        var mh$ = RuntimeHelper.requireNonNull(constants$939.glutAttachMenu$MH, "glutAttachMenu");
        try {
            mh$.invokeExact(button);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutDetachMenu$MH() {
        return RuntimeHelper.requireNonNull(constants$939.glutDetachMenu$MH,"glutDetachMenu");
    }
    public static void glutDetachMenu ( int button) {
        var mh$ = RuntimeHelper.requireNonNull(constants$939.glutDetachMenu$MH, "glutDetachMenu");
        try {
            mh$.invokeExact(button);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutTimerFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$939.glutTimerFunc$MH,"glutTimerFunc");
    }
    public static void glutTimerFunc ( int time,  Addressable callback,  int value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$939.glutTimerFunc$MH, "glutTimerFunc");
        try {
            mh$.invokeExact(time, callback.address(), value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutIdleFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$940.glutIdleFunc$MH,"glutIdleFunc");
    }
    public static void glutIdleFunc ( Addressable callback) {
        var mh$ = RuntimeHelper.requireNonNull(constants$940.glutIdleFunc$MH, "glutIdleFunc");
        try {
            mh$.invokeExact(callback.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutKeyboardFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$940.glutKeyboardFunc$MH,"glutKeyboardFunc");
    }
    public static void glutKeyboardFunc ( Addressable callback) {
        var mh$ = RuntimeHelper.requireNonNull(constants$940.glutKeyboardFunc$MH, "glutKeyboardFunc");
        try {
            mh$.invokeExact(callback.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSpecialFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$941.glutSpecialFunc$MH,"glutSpecialFunc");
    }
    public static void glutSpecialFunc ( Addressable callback) {
        var mh$ = RuntimeHelper.requireNonNull(constants$941.glutSpecialFunc$MH, "glutSpecialFunc");
        try {
            mh$.invokeExact(callback.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutReshapeFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$941.glutReshapeFunc$MH,"glutReshapeFunc");
    }
    public static void glutReshapeFunc ( Addressable callback) {
        var mh$ = RuntimeHelper.requireNonNull(constants$941.glutReshapeFunc$MH, "glutReshapeFunc");
        try {
            mh$.invokeExact(callback.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutVisibilityFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$942.glutVisibilityFunc$MH,"glutVisibilityFunc");
    }
    public static void glutVisibilityFunc ( Addressable callback) {
        var mh$ = RuntimeHelper.requireNonNull(constants$942.glutVisibilityFunc$MH, "glutVisibilityFunc");
        try {
            mh$.invokeExact(callback.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutDisplayFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$942.glutDisplayFunc$MH,"glutDisplayFunc");
    }
    public static void glutDisplayFunc ( Addressable callback) {
        var mh$ = RuntimeHelper.requireNonNull(constants$942.glutDisplayFunc$MH, "glutDisplayFunc");
        try {
            mh$.invokeExact(callback.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutMouseFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$943.glutMouseFunc$MH,"glutMouseFunc");
    }
    public static void glutMouseFunc ( Addressable callback) {
        var mh$ = RuntimeHelper.requireNonNull(constants$943.glutMouseFunc$MH, "glutMouseFunc");
        try {
            mh$.invokeExact(callback.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutMotionFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$943.glutMotionFunc$MH,"glutMotionFunc");
    }
    public static void glutMotionFunc ( Addressable callback) {
        var mh$ = RuntimeHelper.requireNonNull(constants$943.glutMotionFunc$MH, "glutMotionFunc");
        try {
            mh$.invokeExact(callback.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutPassiveMotionFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$944.glutPassiveMotionFunc$MH,"glutPassiveMotionFunc");
    }
    public static void glutPassiveMotionFunc ( Addressable callback) {
        var mh$ = RuntimeHelper.requireNonNull(constants$944.glutPassiveMotionFunc$MH, "glutPassiveMotionFunc");
        try {
            mh$.invokeExact(callback.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutEntryFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$944.glutEntryFunc$MH,"glutEntryFunc");
    }
    public static void glutEntryFunc ( Addressable callback) {
        var mh$ = RuntimeHelper.requireNonNull(constants$944.glutEntryFunc$MH, "glutEntryFunc");
        try {
            mh$.invokeExact(callback.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutKeyboardUpFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$945.glutKeyboardUpFunc$MH,"glutKeyboardUpFunc");
    }
    public static void glutKeyboardUpFunc ( Addressable callback) {
        var mh$ = RuntimeHelper.requireNonNull(constants$945.glutKeyboardUpFunc$MH, "glutKeyboardUpFunc");
        try {
            mh$.invokeExact(callback.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSpecialUpFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$945.glutSpecialUpFunc$MH,"glutSpecialUpFunc");
    }
    public static void glutSpecialUpFunc ( Addressable callback) {
        var mh$ = RuntimeHelper.requireNonNull(constants$945.glutSpecialUpFunc$MH, "glutSpecialUpFunc");
        try {
            mh$.invokeExact(callback.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutJoystickFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$946.glutJoystickFunc$MH,"glutJoystickFunc");
    }
    public static void glutJoystickFunc ( Addressable callback,  int pollInterval) {
        var mh$ = RuntimeHelper.requireNonNull(constants$946.glutJoystickFunc$MH, "glutJoystickFunc");
        try {
            mh$.invokeExact(callback.address(), pollInterval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutMenuStateFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$946.glutMenuStateFunc$MH,"glutMenuStateFunc");
    }
    public static void glutMenuStateFunc ( Addressable callback) {
        var mh$ = RuntimeHelper.requireNonNull(constants$946.glutMenuStateFunc$MH, "glutMenuStateFunc");
        try {
            mh$.invokeExact(callback.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutMenuStatusFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$947.glutMenuStatusFunc$MH,"glutMenuStatusFunc");
    }
    public static void glutMenuStatusFunc ( Addressable callback) {
        var mh$ = RuntimeHelper.requireNonNull(constants$947.glutMenuStatusFunc$MH, "glutMenuStatusFunc");
        try {
            mh$.invokeExact(callback.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutOverlayDisplayFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$947.glutOverlayDisplayFunc$MH,"glutOverlayDisplayFunc");
    }
    public static void glutOverlayDisplayFunc ( Addressable callback) {
        var mh$ = RuntimeHelper.requireNonNull(constants$947.glutOverlayDisplayFunc$MH, "glutOverlayDisplayFunc");
        try {
            mh$.invokeExact(callback.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutWindowStatusFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$948.glutWindowStatusFunc$MH,"glutWindowStatusFunc");
    }
    public static void glutWindowStatusFunc ( Addressable callback) {
        var mh$ = RuntimeHelper.requireNonNull(constants$948.glutWindowStatusFunc$MH, "glutWindowStatusFunc");
        try {
            mh$.invokeExact(callback.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSpaceballMotionFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$948.glutSpaceballMotionFunc$MH,"glutSpaceballMotionFunc");
    }
    public static void glutSpaceballMotionFunc ( Addressable callback) {
        var mh$ = RuntimeHelper.requireNonNull(constants$948.glutSpaceballMotionFunc$MH, "glutSpaceballMotionFunc");
        try {
            mh$.invokeExact(callback.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSpaceballRotateFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$949.glutSpaceballRotateFunc$MH,"glutSpaceballRotateFunc");
    }
    public static void glutSpaceballRotateFunc ( Addressable callback) {
        var mh$ = RuntimeHelper.requireNonNull(constants$949.glutSpaceballRotateFunc$MH, "glutSpaceballRotateFunc");
        try {
            mh$.invokeExact(callback.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSpaceballButtonFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$949.glutSpaceballButtonFunc$MH,"glutSpaceballButtonFunc");
    }
    public static void glutSpaceballButtonFunc ( Addressable callback) {
        var mh$ = RuntimeHelper.requireNonNull(constants$949.glutSpaceballButtonFunc$MH, "glutSpaceballButtonFunc");
        try {
            mh$.invokeExact(callback.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutButtonBoxFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$950.glutButtonBoxFunc$MH,"glutButtonBoxFunc");
    }
    public static void glutButtonBoxFunc ( Addressable callback) {
        var mh$ = RuntimeHelper.requireNonNull(constants$950.glutButtonBoxFunc$MH, "glutButtonBoxFunc");
        try {
            mh$.invokeExact(callback.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutDialsFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$950.glutDialsFunc$MH,"glutDialsFunc");
    }
    public static void glutDialsFunc ( Addressable callback) {
        var mh$ = RuntimeHelper.requireNonNull(constants$950.glutDialsFunc$MH, "glutDialsFunc");
        try {
            mh$.invokeExact(callback.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutTabletMotionFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$951.glutTabletMotionFunc$MH,"glutTabletMotionFunc");
    }
    public static void glutTabletMotionFunc ( Addressable callback) {
        var mh$ = RuntimeHelper.requireNonNull(constants$951.glutTabletMotionFunc$MH, "glutTabletMotionFunc");
        try {
            mh$.invokeExact(callback.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutTabletButtonFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$951.glutTabletButtonFunc$MH,"glutTabletButtonFunc");
    }
    public static void glutTabletButtonFunc ( Addressable callback) {
        var mh$ = RuntimeHelper.requireNonNull(constants$951.glutTabletButtonFunc$MH, "glutTabletButtonFunc");
        try {
            mh$.invokeExact(callback.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutGet$MH() {
        return RuntimeHelper.requireNonNull(constants$952.glutGet$MH,"glutGet");
    }
    public static int glutGet ( int query) {
        var mh$ = RuntimeHelper.requireNonNull(constants$952.glutGet$MH, "glutGet");
        try {
            return (int)mh$.invokeExact(query);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutDeviceGet$MH() {
        return RuntimeHelper.requireNonNull(constants$952.glutDeviceGet$MH,"glutDeviceGet");
    }
    public static int glutDeviceGet ( int query) {
        var mh$ = RuntimeHelper.requireNonNull(constants$952.glutDeviceGet$MH, "glutDeviceGet");
        try {
            return (int)mh$.invokeExact(query);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutGetModifiers$MH() {
        return RuntimeHelper.requireNonNull(constants$952.glutGetModifiers$MH,"glutGetModifiers");
    }
    public static int glutGetModifiers () {
        var mh$ = RuntimeHelper.requireNonNull(constants$952.glutGetModifiers$MH, "glutGetModifiers");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutLayerGet$MH() {
        return RuntimeHelper.requireNonNull(constants$952.glutLayerGet$MH,"glutLayerGet");
    }
    public static int glutLayerGet ( int query) {
        var mh$ = RuntimeHelper.requireNonNull(constants$952.glutLayerGet$MH, "glutLayerGet");
        try {
            return (int)mh$.invokeExact(query);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutBitmapCharacter$MH() {
        return RuntimeHelper.requireNonNull(constants$952.glutBitmapCharacter$MH,"glutBitmapCharacter");
    }
    public static void glutBitmapCharacter ( Addressable font,  int character) {
        var mh$ = RuntimeHelper.requireNonNull(constants$952.glutBitmapCharacter$MH, "glutBitmapCharacter");
        try {
            mh$.invokeExact(font.address(), character);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutBitmapWidth$MH() {
        return RuntimeHelper.requireNonNull(constants$952.glutBitmapWidth$MH,"glutBitmapWidth");
    }
    public static int glutBitmapWidth ( Addressable font,  int character) {
        var mh$ = RuntimeHelper.requireNonNull(constants$952.glutBitmapWidth$MH, "glutBitmapWidth");
        try {
            return (int)mh$.invokeExact(font.address(), character);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutStrokeCharacter$MH() {
        return RuntimeHelper.requireNonNull(constants$953.glutStrokeCharacter$MH,"glutStrokeCharacter");
    }
    public static void glutStrokeCharacter ( Addressable font,  int character) {
        var mh$ = RuntimeHelper.requireNonNull(constants$953.glutStrokeCharacter$MH, "glutStrokeCharacter");
        try {
            mh$.invokeExact(font.address(), character);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutStrokeWidth$MH() {
        return RuntimeHelper.requireNonNull(constants$953.glutStrokeWidth$MH,"glutStrokeWidth");
    }
    public static int glutStrokeWidth ( Addressable font,  int character) {
        var mh$ = RuntimeHelper.requireNonNull(constants$953.glutStrokeWidth$MH, "glutStrokeWidth");
        try {
            return (int)mh$.invokeExact(font.address(), character);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutBitmapLength$MH() {
        return RuntimeHelper.requireNonNull(constants$953.glutBitmapLength$MH,"glutBitmapLength");
    }
    public static int glutBitmapLength ( Addressable font,  Addressable string) {
        var mh$ = RuntimeHelper.requireNonNull(constants$953.glutBitmapLength$MH, "glutBitmapLength");
        try {
            return (int)mh$.invokeExact(font.address(), string.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutStrokeLength$MH() {
        return RuntimeHelper.requireNonNull(constants$953.glutStrokeLength$MH,"glutStrokeLength");
    }
    public static int glutStrokeLength ( Addressable font,  Addressable string) {
        var mh$ = RuntimeHelper.requireNonNull(constants$953.glutStrokeLength$MH, "glutStrokeLength");
        try {
            return (int)mh$.invokeExact(font.address(), string.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutWireCube$MH() {
        return RuntimeHelper.requireNonNull(constants$953.glutWireCube$MH,"glutWireCube");
    }
    public static void glutWireCube ( double size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$953.glutWireCube$MH, "glutWireCube");
        try {
            mh$.invokeExact(size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSolidCube$MH() {
        return RuntimeHelper.requireNonNull(constants$953.glutSolidCube$MH,"glutSolidCube");
    }
    public static void glutSolidCube ( double size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$953.glutSolidCube$MH, "glutSolidCube");
        try {
            mh$.invokeExact(size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutWireSphere$MH() {
        return RuntimeHelper.requireNonNull(constants$954.glutWireSphere$MH,"glutWireSphere");
    }
    public static void glutWireSphere ( double radius,  int slices,  int stacks) {
        var mh$ = RuntimeHelper.requireNonNull(constants$954.glutWireSphere$MH, "glutWireSphere");
        try {
            mh$.invokeExact(radius, slices, stacks);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSolidSphere$MH() {
        return RuntimeHelper.requireNonNull(constants$954.glutSolidSphere$MH,"glutSolidSphere");
    }
    public static void glutSolidSphere ( double radius,  int slices,  int stacks) {
        var mh$ = RuntimeHelper.requireNonNull(constants$954.glutSolidSphere$MH, "glutSolidSphere");
        try {
            mh$.invokeExact(radius, slices, stacks);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutWireCone$MH() {
        return RuntimeHelper.requireNonNull(constants$954.glutWireCone$MH,"glutWireCone");
    }
    public static void glutWireCone ( double base,  double height,  int slices,  int stacks) {
        var mh$ = RuntimeHelper.requireNonNull(constants$954.glutWireCone$MH, "glutWireCone");
        try {
            mh$.invokeExact(base, height, slices, stacks);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSolidCone$MH() {
        return RuntimeHelper.requireNonNull(constants$954.glutSolidCone$MH,"glutSolidCone");
    }
    public static void glutSolidCone ( double base,  double height,  int slices,  int stacks) {
        var mh$ = RuntimeHelper.requireNonNull(constants$954.glutSolidCone$MH, "glutSolidCone");
        try {
            mh$.invokeExact(base, height, slices, stacks);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutWireTorus$MH() {
        return RuntimeHelper.requireNonNull(constants$954.glutWireTorus$MH,"glutWireTorus");
    }
    public static void glutWireTorus ( double innerRadius,  double outerRadius,  int sides,  int rings) {
        var mh$ = RuntimeHelper.requireNonNull(constants$954.glutWireTorus$MH, "glutWireTorus");
        try {
            mh$.invokeExact(innerRadius, outerRadius, sides, rings);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSolidTorus$MH() {
        return RuntimeHelper.requireNonNull(constants$954.glutSolidTorus$MH,"glutSolidTorus");
    }
    public static void glutSolidTorus ( double innerRadius,  double outerRadius,  int sides,  int rings) {
        var mh$ = RuntimeHelper.requireNonNull(constants$954.glutSolidTorus$MH, "glutSolidTorus");
        try {
            mh$.invokeExact(innerRadius, outerRadius, sides, rings);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutWireDodecahedron$MH() {
        return RuntimeHelper.requireNonNull(constants$955.glutWireDodecahedron$MH,"glutWireDodecahedron");
    }
    public static void glutWireDodecahedron () {
        var mh$ = RuntimeHelper.requireNonNull(constants$955.glutWireDodecahedron$MH, "glutWireDodecahedron");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSolidDodecahedron$MH() {
        return RuntimeHelper.requireNonNull(constants$955.glutSolidDodecahedron$MH,"glutSolidDodecahedron");
    }
    public static void glutSolidDodecahedron () {
        var mh$ = RuntimeHelper.requireNonNull(constants$955.glutSolidDodecahedron$MH, "glutSolidDodecahedron");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutWireOctahedron$MH() {
        return RuntimeHelper.requireNonNull(constants$955.glutWireOctahedron$MH,"glutWireOctahedron");
    }
    public static void glutWireOctahedron () {
        var mh$ = RuntimeHelper.requireNonNull(constants$955.glutWireOctahedron$MH, "glutWireOctahedron");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSolidOctahedron$MH() {
        return RuntimeHelper.requireNonNull(constants$955.glutSolidOctahedron$MH,"glutSolidOctahedron");
    }
    public static void glutSolidOctahedron () {
        var mh$ = RuntimeHelper.requireNonNull(constants$955.glutSolidOctahedron$MH, "glutSolidOctahedron");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutWireTetrahedron$MH() {
        return RuntimeHelper.requireNonNull(constants$955.glutWireTetrahedron$MH,"glutWireTetrahedron");
    }
    public static void glutWireTetrahedron () {
        var mh$ = RuntimeHelper.requireNonNull(constants$955.glutWireTetrahedron$MH, "glutWireTetrahedron");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSolidTetrahedron$MH() {
        return RuntimeHelper.requireNonNull(constants$955.glutSolidTetrahedron$MH,"glutSolidTetrahedron");
    }
    public static void glutSolidTetrahedron () {
        var mh$ = RuntimeHelper.requireNonNull(constants$955.glutSolidTetrahedron$MH, "glutSolidTetrahedron");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutWireIcosahedron$MH() {
        return RuntimeHelper.requireNonNull(constants$956.glutWireIcosahedron$MH,"glutWireIcosahedron");
    }
    public static void glutWireIcosahedron () {
        var mh$ = RuntimeHelper.requireNonNull(constants$956.glutWireIcosahedron$MH, "glutWireIcosahedron");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSolidIcosahedron$MH() {
        return RuntimeHelper.requireNonNull(constants$956.glutSolidIcosahedron$MH,"glutSolidIcosahedron");
    }
    public static void glutSolidIcosahedron () {
        var mh$ = RuntimeHelper.requireNonNull(constants$956.glutSolidIcosahedron$MH, "glutSolidIcosahedron");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutWireTeapot$MH() {
        return RuntimeHelper.requireNonNull(constants$956.glutWireTeapot$MH,"glutWireTeapot");
    }
    public static void glutWireTeapot ( double size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$956.glutWireTeapot$MH, "glutWireTeapot");
        try {
            mh$.invokeExact(size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSolidTeapot$MH() {
        return RuntimeHelper.requireNonNull(constants$956.glutSolidTeapot$MH,"glutSolidTeapot");
    }
    public static void glutSolidTeapot ( double size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$956.glutSolidTeapot$MH, "glutSolidTeapot");
        try {
            mh$.invokeExact(size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutGameModeString$MH() {
        return RuntimeHelper.requireNonNull(constants$956.glutGameModeString$MH,"glutGameModeString");
    }
    public static void glutGameModeString ( Addressable string) {
        var mh$ = RuntimeHelper.requireNonNull(constants$956.glutGameModeString$MH, "glutGameModeString");
        try {
            mh$.invokeExact(string.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutEnterGameMode$MH() {
        return RuntimeHelper.requireNonNull(constants$956.glutEnterGameMode$MH,"glutEnterGameMode");
    }
    public static int glutEnterGameMode () {
        var mh$ = RuntimeHelper.requireNonNull(constants$956.glutEnterGameMode$MH, "glutEnterGameMode");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutLeaveGameMode$MH() {
        return RuntimeHelper.requireNonNull(constants$957.glutLeaveGameMode$MH,"glutLeaveGameMode");
    }
    public static void glutLeaveGameMode () {
        var mh$ = RuntimeHelper.requireNonNull(constants$957.glutLeaveGameMode$MH, "glutLeaveGameMode");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutGameModeGet$MH() {
        return RuntimeHelper.requireNonNull(constants$957.glutGameModeGet$MH,"glutGameModeGet");
    }
    public static int glutGameModeGet ( int query) {
        var mh$ = RuntimeHelper.requireNonNull(constants$957.glutGameModeGet$MH, "glutGameModeGet");
        try {
            return (int)mh$.invokeExact(query);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutVideoResizeGet$MH() {
        return RuntimeHelper.requireNonNull(constants$957.glutVideoResizeGet$MH,"glutVideoResizeGet");
    }
    public static int glutVideoResizeGet ( int query) {
        var mh$ = RuntimeHelper.requireNonNull(constants$957.glutVideoResizeGet$MH, "glutVideoResizeGet");
        try {
            return (int)mh$.invokeExact(query);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSetupVideoResizing$MH() {
        return RuntimeHelper.requireNonNull(constants$957.glutSetupVideoResizing$MH,"glutSetupVideoResizing");
    }
    public static void glutSetupVideoResizing () {
        var mh$ = RuntimeHelper.requireNonNull(constants$957.glutSetupVideoResizing$MH, "glutSetupVideoResizing");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutStopVideoResizing$MH() {
        return RuntimeHelper.requireNonNull(constants$957.glutStopVideoResizing$MH,"glutStopVideoResizing");
    }
    public static void glutStopVideoResizing () {
        var mh$ = RuntimeHelper.requireNonNull(constants$957.glutStopVideoResizing$MH, "glutStopVideoResizing");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutVideoResize$MH() {
        return RuntimeHelper.requireNonNull(constants$957.glutVideoResize$MH,"glutVideoResize");
    }
    public static void glutVideoResize ( int x,  int y,  int width,  int height) {
        var mh$ = RuntimeHelper.requireNonNull(constants$957.glutVideoResize$MH, "glutVideoResize");
        try {
            mh$.invokeExact(x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutVideoPan$MH() {
        return RuntimeHelper.requireNonNull(constants$958.glutVideoPan$MH,"glutVideoPan");
    }
    public static void glutVideoPan ( int x,  int y,  int width,  int height) {
        var mh$ = RuntimeHelper.requireNonNull(constants$958.glutVideoPan$MH, "glutVideoPan");
        try {
            mh$.invokeExact(x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSetColor$MH() {
        return RuntimeHelper.requireNonNull(constants$958.glutSetColor$MH,"glutSetColor");
    }
    public static void glutSetColor ( int color,  float red,  float green,  float blue) {
        var mh$ = RuntimeHelper.requireNonNull(constants$958.glutSetColor$MH, "glutSetColor");
        try {
            mh$.invokeExact(color, red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutGetColor$MH() {
        return RuntimeHelper.requireNonNull(constants$958.glutGetColor$MH,"glutGetColor");
    }
    public static float glutGetColor ( int color,  int component) {
        var mh$ = RuntimeHelper.requireNonNull(constants$958.glutGetColor$MH, "glutGetColor");
        try {
            return (float)mh$.invokeExact(color, component);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutCopyColormap$MH() {
        return RuntimeHelper.requireNonNull(constants$958.glutCopyColormap$MH,"glutCopyColormap");
    }
    public static void glutCopyColormap ( int window) {
        var mh$ = RuntimeHelper.requireNonNull(constants$958.glutCopyColormap$MH, "glutCopyColormap");
        try {
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutIgnoreKeyRepeat$MH() {
        return RuntimeHelper.requireNonNull(constants$958.glutIgnoreKeyRepeat$MH,"glutIgnoreKeyRepeat");
    }
    public static void glutIgnoreKeyRepeat ( int ignore) {
        var mh$ = RuntimeHelper.requireNonNull(constants$958.glutIgnoreKeyRepeat$MH, "glutIgnoreKeyRepeat");
        try {
            mh$.invokeExact(ignore);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSetKeyRepeat$MH() {
        return RuntimeHelper.requireNonNull(constants$958.glutSetKeyRepeat$MH,"glutSetKeyRepeat");
    }
    public static void glutSetKeyRepeat ( int repeatMode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$958.glutSetKeyRepeat$MH, "glutSetKeyRepeat");
        try {
            mh$.invokeExact(repeatMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutForceJoystickFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$959.glutForceJoystickFunc$MH,"glutForceJoystickFunc");
    }
    public static void glutForceJoystickFunc () {
        var mh$ = RuntimeHelper.requireNonNull(constants$959.glutForceJoystickFunc$MH, "glutForceJoystickFunc");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutExtensionSupported$MH() {
        return RuntimeHelper.requireNonNull(constants$959.glutExtensionSupported$MH,"glutExtensionSupported");
    }
    public static int glutExtensionSupported ( Addressable extension) {
        var mh$ = RuntimeHelper.requireNonNull(constants$959.glutExtensionSupported$MH, "glutExtensionSupported");
        try {
            return (int)mh$.invokeExact(extension.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutReportErrors$MH() {
        return RuntimeHelper.requireNonNull(constants$959.glutReportErrors$MH,"glutReportErrors");
    }
    public static void glutReportErrors () {
        var mh$ = RuntimeHelper.requireNonNull(constants$959.glutReportErrors$MH, "glutReportErrors");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int P_ALL() {
        return (int)0L;
    }
    public static int P_PID() {
        return (int)1L;
    }
    public static int P_PGID() {
        return (int)2L;
    }
    public static ValueLayout _Float32 = C_FLOAT;
    public static ValueLayout _Float64 = C_DOUBLE;
    public static ValueLayout _Float32x = C_DOUBLE;
    public static MethodHandle __ctype_get_mb_cur_max$MH() {
        return RuntimeHelper.requireNonNull(constants$959.__ctype_get_mb_cur_max$MH,"__ctype_get_mb_cur_max");
    }
    public static long __ctype_get_mb_cur_max () {
        var mh$ = RuntimeHelper.requireNonNull(constants$959.__ctype_get_mb_cur_max$MH, "__ctype_get_mb_cur_max");
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atof$MH() {
        return RuntimeHelper.requireNonNull(constants$959.atof$MH,"atof");
    }
    public static double atof ( Addressable __nptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$959.atof$MH, "atof");
        try {
            return (double)mh$.invokeExact(__nptr.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atoi$MH() {
        return RuntimeHelper.requireNonNull(constants$959.atoi$MH,"atoi");
    }
    public static int atoi ( Addressable __nptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$959.atoi$MH, "atoi");
        try {
            return (int)mh$.invokeExact(__nptr.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atol$MH() {
        return RuntimeHelper.requireNonNull(constants$960.atol$MH,"atol");
    }
    public static long atol ( Addressable __nptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$960.atol$MH, "atol");
        try {
            return (long)mh$.invokeExact(__nptr.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atoll$MH() {
        return RuntimeHelper.requireNonNull(constants$960.atoll$MH,"atoll");
    }
    public static long atoll ( Addressable __nptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$960.atoll$MH, "atoll");
        try {
            return (long)mh$.invokeExact(__nptr.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtod$MH() {
        return RuntimeHelper.requireNonNull(constants$960.strtod$MH,"strtod");
    }
    public static double strtod ( Addressable __nptr,  Addressable __endptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$960.strtod$MH, "strtod");
        try {
            return (double)mh$.invokeExact(__nptr.address(), __endptr.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtof$MH() {
        return RuntimeHelper.requireNonNull(constants$960.strtof$MH,"strtof");
    }
    public static float strtof ( Addressable __nptr,  Addressable __endptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$960.strtof$MH, "strtof");
        try {
            return (float)mh$.invokeExact(__nptr.address(), __endptr.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtol$MH() {
        return RuntimeHelper.requireNonNull(constants$960.strtol$MH,"strtol");
    }
    public static long strtol ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = RuntimeHelper.requireNonNull(constants$960.strtol$MH, "strtol");
        try {
            return (long)mh$.invokeExact(__nptr.address(), __endptr.address(), __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoul$MH() {
        return RuntimeHelper.requireNonNull(constants$960.strtoul$MH,"strtoul");
    }
    public static long strtoul ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = RuntimeHelper.requireNonNull(constants$960.strtoul$MH, "strtoul");
        try {
            return (long)mh$.invokeExact(__nptr.address(), __endptr.address(), __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoq$MH() {
        return RuntimeHelper.requireNonNull(constants$961.strtoq$MH,"strtoq");
    }
    public static long strtoq ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = RuntimeHelper.requireNonNull(constants$961.strtoq$MH, "strtoq");
        try {
            return (long)mh$.invokeExact(__nptr.address(), __endptr.address(), __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtouq$MH() {
        return RuntimeHelper.requireNonNull(constants$961.strtouq$MH,"strtouq");
    }
    public static long strtouq ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = RuntimeHelper.requireNonNull(constants$961.strtouq$MH, "strtouq");
        try {
            return (long)mh$.invokeExact(__nptr.address(), __endptr.address(), __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoll$MH() {
        return RuntimeHelper.requireNonNull(constants$961.strtoll$MH,"strtoll");
    }
    public static long strtoll ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = RuntimeHelper.requireNonNull(constants$961.strtoll$MH, "strtoll");
        try {
            return (long)mh$.invokeExact(__nptr.address(), __endptr.address(), __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoull$MH() {
        return RuntimeHelper.requireNonNull(constants$961.strtoull$MH,"strtoull");
    }
    public static long strtoull ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = RuntimeHelper.requireNonNull(constants$961.strtoull$MH, "strtoull");
        try {
            return (long)mh$.invokeExact(__nptr.address(), __endptr.address(), __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle l64a$MH() {
        return RuntimeHelper.requireNonNull(constants$961.l64a$MH,"l64a");
    }
    public static MemoryAddress l64a ( long __n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$961.l64a$MH, "l64a");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle a64l$MH() {
        return RuntimeHelper.requireNonNull(constants$961.a64l$MH,"a64l");
    }
    public static long a64l ( Addressable __s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$961.a64l$MH, "a64l");
        try {
            return (long)mh$.invokeExact(__s.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static ValueLayout quad_t = C_LONG;
    public static ValueLayout loff_t = C_LONG;
    public static ValueLayout off_t = C_LONG;
    public static ValueLayout pid_t = C_INT;
    public static ValueLayout ssize_t = C_LONG;
    public static ValueLayout daddr_t = C_INT;
    public static ValueLayout key_t = C_INT;
    public static ValueLayout clock_t = C_LONG;
    public static ValueLayout clockid_t = C_INT;
    public static ValueLayout time_t = C_LONG;
    public static ValueLayout register_t = C_LONG;
    public static MethodHandle __bswap_16$MH() {
        return RuntimeHelper.requireNonNull(constants$962.__bswap_16$MH,"__bswap_16");
    }
    public static short __bswap_16 ( short __bsx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$962.__bswap_16$MH, "__bswap_16");
        try {
            return (short)mh$.invokeExact(__bsx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __bswap_32$MH() {
        return RuntimeHelper.requireNonNull(constants$962.__bswap_32$MH,"__bswap_32");
    }
    public static int __bswap_32 ( int __bsx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$962.__bswap_32$MH, "__bswap_32");
        try {
            return (int)mh$.invokeExact(__bsx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __bswap_64$MH() {
        return RuntimeHelper.requireNonNull(constants$962.__bswap_64$MH,"__bswap_64");
    }
    public static long __bswap_64 ( long __bsx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$962.__bswap_64$MH, "__bswap_64");
        try {
            return (long)mh$.invokeExact(__bsx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __uint16_identity$MH() {
        return RuntimeHelper.requireNonNull(constants$962.__uint16_identity$MH,"__uint16_identity");
    }
    public static short __uint16_identity ( short __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$962.__uint16_identity$MH, "__uint16_identity");
        try {
            return (short)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __uint32_identity$MH() {
        return RuntimeHelper.requireNonNull(constants$962.__uint32_identity$MH,"__uint32_identity");
    }
    public static int __uint32_identity ( int __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$962.__uint32_identity$MH, "__uint32_identity");
        try {
            return (int)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __uint64_identity$MH() {
        return RuntimeHelper.requireNonNull(constants$962.__uint64_identity$MH,"__uint64_identity");
    }
    public static long __uint64_identity ( long __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$962.__uint64_identity$MH, "__uint64_identity");
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static ValueLayout suseconds_t = C_LONG;
    public static ValueLayout __fd_mask = C_LONG;
    public static ValueLayout fd_mask = C_LONG;
    public static MethodHandle select$MH() {
        return RuntimeHelper.requireNonNull(constants$963.select$MH,"select");
    }
    public static int select ( int __nfds,  Addressable __readfds,  Addressable __writefds,  Addressable __exceptfds,  Addressable __timeout) {
        var mh$ = RuntimeHelper.requireNonNull(constants$963.select$MH, "select");
        try {
            return (int)mh$.invokeExact(__nfds, __readfds.address(), __writefds.address(), __exceptfds.address(), __timeout.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pselect$MH() {
        return RuntimeHelper.requireNonNull(constants$963.pselect$MH,"pselect");
    }
    public static int pselect ( int __nfds,  Addressable __readfds,  Addressable __writefds,  Addressable __exceptfds,  Addressable __timeout,  Addressable __sigmask) {
        var mh$ = RuntimeHelper.requireNonNull(constants$963.pselect$MH, "pselect");
        try {
            return (int)mh$.invokeExact(__nfds, __readfds.address(), __writefds.address(), __exceptfds.address(), __timeout.address(), __sigmask.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static ValueLayout blksize_t = C_LONG;
    public static ValueLayout blkcnt_t = C_LONG;
    public static ValueLayout pthread_once_t = C_INT;
    public static ValueLayout pthread_spinlock_t = C_INT;
    public static MethodHandle random$MH() {
        return RuntimeHelper.requireNonNull(constants$963.random$MH,"random");
    }
    public static long random () {
        var mh$ = RuntimeHelper.requireNonNull(constants$963.random$MH, "random");
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srandom$MH() {
        return RuntimeHelper.requireNonNull(constants$963.srandom$MH,"srandom");
    }
    public static void srandom ( int __seed) {
        var mh$ = RuntimeHelper.requireNonNull(constants$963.srandom$MH, "srandom");
        try {
            mh$.invokeExact(__seed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle initstate$MH() {
        return RuntimeHelper.requireNonNull(constants$963.initstate$MH,"initstate");
    }
    public static MemoryAddress initstate ( int __seed,  Addressable __statebuf,  long __statelen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$963.initstate$MH, "initstate");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__seed, __statebuf.address(), __statelen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setstate$MH() {
        return RuntimeHelper.requireNonNull(constants$963.setstate$MH,"setstate");
    }
    public static MemoryAddress setstate ( Addressable __statebuf) {
        var mh$ = RuntimeHelper.requireNonNull(constants$963.setstate$MH, "setstate");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__statebuf.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle random_r$MH() {
        return RuntimeHelper.requireNonNull(constants$964.random_r$MH,"random_r");
    }
    public static int random_r ( Addressable __buf,  Addressable __result) {
        var mh$ = RuntimeHelper.requireNonNull(constants$964.random_r$MH, "random_r");
        try {
            return (int)mh$.invokeExact(__buf.address(), __result.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srandom_r$MH() {
        return RuntimeHelper.requireNonNull(constants$964.srandom_r$MH,"srandom_r");
    }
    public static int srandom_r ( int __seed,  Addressable __buf) {
        var mh$ = RuntimeHelper.requireNonNull(constants$964.srandom_r$MH, "srandom_r");
        try {
            return (int)mh$.invokeExact(__seed, __buf.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle initstate_r$MH() {
        return RuntimeHelper.requireNonNull(constants$964.initstate_r$MH,"initstate_r");
    }
    public static int initstate_r ( int __seed,  Addressable __statebuf,  long __statelen,  Addressable __buf) {
        var mh$ = RuntimeHelper.requireNonNull(constants$964.initstate_r$MH, "initstate_r");
        try {
            return (int)mh$.invokeExact(__seed, __statebuf.address(), __statelen, __buf.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setstate_r$MH() {
        return RuntimeHelper.requireNonNull(constants$964.setstate_r$MH,"setstate_r");
    }
    public static int setstate_r ( Addressable __statebuf,  Addressable __buf) {
        var mh$ = RuntimeHelper.requireNonNull(constants$964.setstate_r$MH, "setstate_r");
        try {
            return (int)mh$.invokeExact(__statebuf.address(), __buf.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rand$MH() {
        return RuntimeHelper.requireNonNull(constants$964.rand$MH,"rand");
    }
    public static int rand () {
        var mh$ = RuntimeHelper.requireNonNull(constants$964.rand$MH, "rand");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srand$MH() {
        return RuntimeHelper.requireNonNull(constants$964.srand$MH,"srand");
    }
    public static void srand ( int __seed) {
        var mh$ = RuntimeHelper.requireNonNull(constants$964.srand$MH, "srand");
        try {
            mh$.invokeExact(__seed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rand_r$MH() {
        return RuntimeHelper.requireNonNull(constants$965.rand_r$MH,"rand_r");
    }
    public static int rand_r ( Addressable __seed) {
        var mh$ = RuntimeHelper.requireNonNull(constants$965.rand_r$MH, "rand_r");
        try {
            return (int)mh$.invokeExact(__seed.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle drand48$MH() {
        return RuntimeHelper.requireNonNull(constants$965.drand48$MH,"drand48");
    }
    public static double drand48 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$965.drand48$MH, "drand48");
        try {
            return (double)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle erand48$MH() {
        return RuntimeHelper.requireNonNull(constants$965.erand48$MH,"erand48");
    }
    public static double erand48 ( Addressable __xsubi) {
        var mh$ = RuntimeHelper.requireNonNull(constants$965.erand48$MH, "erand48");
        try {
            return (double)mh$.invokeExact(__xsubi.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lrand48$MH() {
        return RuntimeHelper.requireNonNull(constants$965.lrand48$MH,"lrand48");
    }
    public static long lrand48 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$965.lrand48$MH, "lrand48");
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nrand48$MH() {
        return RuntimeHelper.requireNonNull(constants$965.nrand48$MH,"nrand48");
    }
    public static long nrand48 ( Addressable __xsubi) {
        var mh$ = RuntimeHelper.requireNonNull(constants$965.nrand48$MH, "nrand48");
        try {
            return (long)mh$.invokeExact(__xsubi.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mrand48$MH() {
        return RuntimeHelper.requireNonNull(constants$965.mrand48$MH,"mrand48");
    }
    public static long mrand48 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$965.mrand48$MH, "mrand48");
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle jrand48$MH() {
        return RuntimeHelper.requireNonNull(constants$966.jrand48$MH,"jrand48");
    }
    public static long jrand48 ( Addressable __xsubi) {
        var mh$ = RuntimeHelper.requireNonNull(constants$966.jrand48$MH, "jrand48");
        try {
            return (long)mh$.invokeExact(__xsubi.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srand48$MH() {
        return RuntimeHelper.requireNonNull(constants$966.srand48$MH,"srand48");
    }
    public static void srand48 ( long __seedval) {
        var mh$ = RuntimeHelper.requireNonNull(constants$966.srand48$MH, "srand48");
        try {
            mh$.invokeExact(__seedval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle seed48$MH() {
        return RuntimeHelper.requireNonNull(constants$966.seed48$MH,"seed48");
    }
    public static MemoryAddress seed48 ( Addressable __seed16v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$966.seed48$MH, "seed48");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__seed16v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lcong48$MH() {
        return RuntimeHelper.requireNonNull(constants$966.lcong48$MH,"lcong48");
    }
    public static void lcong48 ( Addressable __param) {
        var mh$ = RuntimeHelper.requireNonNull(constants$966.lcong48$MH, "lcong48");
        try {
            mh$.invokeExact(__param.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle drand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$966.drand48_r$MH,"drand48_r");
    }
    public static int drand48_r ( Addressable __buffer,  Addressable __result) {
        var mh$ = RuntimeHelper.requireNonNull(constants$966.drand48_r$MH, "drand48_r");
        try {
            return (int)mh$.invokeExact(__buffer.address(), __result.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle erand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$966.erand48_r$MH,"erand48_r");
    }
    public static int erand48_r ( Addressable __xsubi,  Addressable __buffer,  Addressable __result) {
        var mh$ = RuntimeHelper.requireNonNull(constants$966.erand48_r$MH, "erand48_r");
        try {
            return (int)mh$.invokeExact(__xsubi.address(), __buffer.address(), __result.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lrand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$967.lrand48_r$MH,"lrand48_r");
    }
    public static int lrand48_r ( Addressable __buffer,  Addressable __result) {
        var mh$ = RuntimeHelper.requireNonNull(constants$967.lrand48_r$MH, "lrand48_r");
        try {
            return (int)mh$.invokeExact(__buffer.address(), __result.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nrand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$967.nrand48_r$MH,"nrand48_r");
    }
    public static int nrand48_r ( Addressable __xsubi,  Addressable __buffer,  Addressable __result) {
        var mh$ = RuntimeHelper.requireNonNull(constants$967.nrand48_r$MH, "nrand48_r");
        try {
            return (int)mh$.invokeExact(__xsubi.address(), __buffer.address(), __result.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mrand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$967.mrand48_r$MH,"mrand48_r");
    }
    public static int mrand48_r ( Addressable __buffer,  Addressable __result) {
        var mh$ = RuntimeHelper.requireNonNull(constants$967.mrand48_r$MH, "mrand48_r");
        try {
            return (int)mh$.invokeExact(__buffer.address(), __result.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle jrand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$967.jrand48_r$MH,"jrand48_r");
    }
    public static int jrand48_r ( Addressable __xsubi,  Addressable __buffer,  Addressable __result) {
        var mh$ = RuntimeHelper.requireNonNull(constants$967.jrand48_r$MH, "jrand48_r");
        try {
            return (int)mh$.invokeExact(__xsubi.address(), __buffer.address(), __result.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$967.srand48_r$MH,"srand48_r");
    }
    public static int srand48_r ( long __seedval,  Addressable __buffer) {
        var mh$ = RuntimeHelper.requireNonNull(constants$967.srand48_r$MH, "srand48_r");
        try {
            return (int)mh$.invokeExact(__seedval, __buffer.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle seed48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$967.seed48_r$MH,"seed48_r");
    }
    public static int seed48_r ( Addressable __seed16v,  Addressable __buffer) {
        var mh$ = RuntimeHelper.requireNonNull(constants$967.seed48_r$MH, "seed48_r");
        try {
            return (int)mh$.invokeExact(__seed16v.address(), __buffer.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lcong48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$968.lcong48_r$MH,"lcong48_r");
    }
    public static int lcong48_r ( Addressable __param,  Addressable __buffer) {
        var mh$ = RuntimeHelper.requireNonNull(constants$968.lcong48_r$MH, "lcong48_r");
        try {
            return (int)mh$.invokeExact(__param.address(), __buffer.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle malloc$MH() {
        return RuntimeHelper.requireNonNull(constants$968.malloc$MH,"malloc");
    }
    public static MemoryAddress malloc ( long __size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$968.malloc$MH, "malloc");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle calloc$MH() {
        return RuntimeHelper.requireNonNull(constants$968.calloc$MH,"calloc");
    }
    public static MemoryAddress calloc ( long __nmemb,  long __size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$968.calloc$MH, "calloc");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__nmemb, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle realloc$MH() {
        return RuntimeHelper.requireNonNull(constants$968.realloc$MH,"realloc");
    }
    public static MemoryAddress realloc ( Addressable __ptr,  long __size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$968.realloc$MH, "realloc");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__ptr.address(), __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle free$MH() {
        return RuntimeHelper.requireNonNull(constants$968.free$MH,"free");
    }
    public static void free ( Addressable __ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$968.free$MH, "free");
        try {
            mh$.invokeExact(__ptr.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle alloca$MH() {
        return RuntimeHelper.requireNonNull(constants$968.alloca$MH,"alloca");
    }
    public static MemoryAddress alloca ( long __size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$968.alloca$MH, "alloca");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle valloc$MH() {
        return RuntimeHelper.requireNonNull(constants$969.valloc$MH,"valloc");
    }
    public static MemoryAddress valloc ( long __size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$969.valloc$MH, "valloc");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle posix_memalign$MH() {
        return RuntimeHelper.requireNonNull(constants$969.posix_memalign$MH,"posix_memalign");
    }
    public static int posix_memalign ( Addressable __memptr,  long __alignment,  long __size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$969.posix_memalign$MH, "posix_memalign");
        try {
            return (int)mh$.invokeExact(__memptr.address(), __alignment, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle aligned_alloc$MH() {
        return RuntimeHelper.requireNonNull(constants$969.aligned_alloc$MH,"aligned_alloc");
    }
    public static MemoryAddress aligned_alloc ( long __alignment,  long __size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$969.aligned_alloc$MH, "aligned_alloc");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__alignment, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle abort$MH() {
        return RuntimeHelper.requireNonNull(constants$969.abort$MH,"abort");
    }
    public static void abort () {
        var mh$ = RuntimeHelper.requireNonNull(constants$969.abort$MH, "abort");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atexit$MH() {
        return RuntimeHelper.requireNonNull(constants$970.atexit$MH,"atexit");
    }
    public static int atexit ( Addressable __func) {
        var mh$ = RuntimeHelper.requireNonNull(constants$970.atexit$MH, "atexit");
        try {
            return (int)mh$.invokeExact(__func.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle at_quick_exit$MH() {
        return RuntimeHelper.requireNonNull(constants$970.at_quick_exit$MH,"at_quick_exit");
    }
    public static int at_quick_exit ( Addressable __func) {
        var mh$ = RuntimeHelper.requireNonNull(constants$970.at_quick_exit$MH, "at_quick_exit");
        try {
            return (int)mh$.invokeExact(__func.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle on_exit$MH() {
        return RuntimeHelper.requireNonNull(constants$971.on_exit$MH,"on_exit");
    }
    public static int on_exit ( Addressable __func,  Addressable __arg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$971.on_exit$MH, "on_exit");
        try {
            return (int)mh$.invokeExact(__func.address(), __arg.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle exit$MH() {
        return RuntimeHelper.requireNonNull(constants$971.exit$MH,"exit");
    }
    public static void exit ( int __status) {
        var mh$ = RuntimeHelper.requireNonNull(constants$971.exit$MH, "exit");
        try {
            mh$.invokeExact(__status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle quick_exit$MH() {
        return RuntimeHelper.requireNonNull(constants$971.quick_exit$MH,"quick_exit");
    }
    public static void quick_exit ( int __status) {
        var mh$ = RuntimeHelper.requireNonNull(constants$971.quick_exit$MH, "quick_exit");
        try {
            mh$.invokeExact(__status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _Exit$MH() {
        return RuntimeHelper.requireNonNull(constants$971._Exit$MH,"_Exit");
    }
    public static void _Exit ( int __status) {
        var mh$ = RuntimeHelper.requireNonNull(constants$971._Exit$MH, "_Exit");
        try {
            mh$.invokeExact(__status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getenv$MH() {
        return RuntimeHelper.requireNonNull(constants$971.getenv$MH,"getenv");
    }
    public static MemoryAddress getenv ( Addressable __name) {
        var mh$ = RuntimeHelper.requireNonNull(constants$971.getenv$MH, "getenv");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__name.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putenv$MH() {
        return RuntimeHelper.requireNonNull(constants$971.putenv$MH,"putenv");
    }
    public static int putenv ( Addressable __string) {
        var mh$ = RuntimeHelper.requireNonNull(constants$971.putenv$MH, "putenv");
        try {
            return (int)mh$.invokeExact(__string.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setenv$MH() {
        return RuntimeHelper.requireNonNull(constants$972.setenv$MH,"setenv");
    }
    public static int setenv ( Addressable __name,  Addressable __value,  int __replace) {
        var mh$ = RuntimeHelper.requireNonNull(constants$972.setenv$MH, "setenv");
        try {
            return (int)mh$.invokeExact(__name.address(), __value.address(), __replace);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle unsetenv$MH() {
        return RuntimeHelper.requireNonNull(constants$972.unsetenv$MH,"unsetenv");
    }
    public static int unsetenv ( Addressable __name) {
        var mh$ = RuntimeHelper.requireNonNull(constants$972.unsetenv$MH, "unsetenv");
        try {
            return (int)mh$.invokeExact(__name.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clearenv$MH() {
        return RuntimeHelper.requireNonNull(constants$972.clearenv$MH,"clearenv");
    }
    public static int clearenv () {
        var mh$ = RuntimeHelper.requireNonNull(constants$972.clearenv$MH, "clearenv");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mktemp$MH() {
        return RuntimeHelper.requireNonNull(constants$972.mktemp$MH,"mktemp");
    }
    public static MemoryAddress mktemp ( Addressable __template) {
        var mh$ = RuntimeHelper.requireNonNull(constants$972.mktemp$MH, "mktemp");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__template.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkstemp$MH() {
        return RuntimeHelper.requireNonNull(constants$972.mkstemp$MH,"mkstemp");
    }
    public static int mkstemp ( Addressable __template) {
        var mh$ = RuntimeHelper.requireNonNull(constants$972.mkstemp$MH, "mkstemp");
        try {
            return (int)mh$.invokeExact(__template.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkstemps$MH() {
        return RuntimeHelper.requireNonNull(constants$972.mkstemps$MH,"mkstemps");
    }
    public static int mkstemps ( Addressable __template,  int __suffixlen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$972.mkstemps$MH, "mkstemps");
        try {
            return (int)mh$.invokeExact(__template.address(), __suffixlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkdtemp$MH() {
        return RuntimeHelper.requireNonNull(constants$973.mkdtemp$MH,"mkdtemp");
    }
    public static MemoryAddress mkdtemp ( Addressable __template) {
        var mh$ = RuntimeHelper.requireNonNull(constants$973.mkdtemp$MH, "mkdtemp");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__template.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle system$MH() {
        return RuntimeHelper.requireNonNull(constants$973.system$MH,"system");
    }
    public static int system ( Addressable __command) {
        var mh$ = RuntimeHelper.requireNonNull(constants$973.system$MH, "system");
        try {
            return (int)mh$.invokeExact(__command.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle realpath$MH() {
        return RuntimeHelper.requireNonNull(constants$973.realpath$MH,"realpath");
    }
    public static MemoryAddress realpath ( Addressable __name,  Addressable __resolved) {
        var mh$ = RuntimeHelper.requireNonNull(constants$973.realpath$MH, "realpath");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__name.address(), __resolved.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle bsearch$MH() {
        return RuntimeHelper.requireNonNull(constants$973.bsearch$MH,"bsearch");
    }
    public static MemoryAddress bsearch ( Addressable __key,  Addressable __base,  long __nmemb,  long __size,  Addressable __compar) {
        var mh$ = RuntimeHelper.requireNonNull(constants$973.bsearch$MH, "bsearch");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__key.address(), __base.address(), __nmemb, __size, __compar.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle qsort$MH() {
        return RuntimeHelper.requireNonNull(constants$974.qsort$MH,"qsort");
    }
    public static void qsort ( Addressable __base,  long __nmemb,  long __size,  Addressable __compar) {
        var mh$ = RuntimeHelper.requireNonNull(constants$974.qsort$MH, "qsort");
        try {
            mh$.invokeExact(__base.address(), __nmemb, __size, __compar.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle abs$MH() {
        return RuntimeHelper.requireNonNull(constants$974.abs$MH,"abs");
    }
    public static int abs ( int __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$974.abs$MH, "abs");
        try {
            return (int)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle labs$MH() {
        return RuntimeHelper.requireNonNull(constants$974.labs$MH,"labs");
    }
    public static long labs ( long __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$974.labs$MH, "labs");
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llabs$MH() {
        return RuntimeHelper.requireNonNull(constants$974.llabs$MH,"llabs");
    }
    public static long llabs ( long __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$974.llabs$MH, "llabs");
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle div$MH() {
        return RuntimeHelper.requireNonNull(constants$974.div$MH,"div");
    }
    public static MemorySegment div ( SegmentAllocator allocator,  int __numer,  int __denom) {
        var mh$ = RuntimeHelper.requireNonNull(constants$974.div$MH, "div");
        try {
            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, __numer, __denom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment div ( ResourceScope scope,  int __numer,  int __denom) {
        return div(SegmentAllocator.ofScope(scope), __numer, __denom);
    }
    public static MethodHandle ldiv$MH() {
        return RuntimeHelper.requireNonNull(constants$974.ldiv$MH,"ldiv");
    }
    public static MemorySegment ldiv ( SegmentAllocator allocator,  long __numer,  long __denom) {
        var mh$ = RuntimeHelper.requireNonNull(constants$974.ldiv$MH, "ldiv");
        try {
            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, __numer, __denom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment ldiv ( ResourceScope scope,  long __numer,  long __denom) {
        return ldiv(SegmentAllocator.ofScope(scope), __numer, __denom);
    }
    public static MethodHandle lldiv$MH() {
        return RuntimeHelper.requireNonNull(constants$975.lldiv$MH,"lldiv");
    }
    public static MemorySegment lldiv ( SegmentAllocator allocator,  long __numer,  long __denom) {
        var mh$ = RuntimeHelper.requireNonNull(constants$975.lldiv$MH, "lldiv");
        try {
            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, __numer, __denom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment lldiv ( ResourceScope scope,  long __numer,  long __denom) {
        return lldiv(SegmentAllocator.ofScope(scope), __numer, __denom);
    }
    public static MethodHandle ecvt$MH() {
        return RuntimeHelper.requireNonNull(constants$975.ecvt$MH,"ecvt");
    }
    public static MemoryAddress ecvt ( double __value,  int __ndigit,  Addressable __decpt,  Addressable __sign) {
        var mh$ = RuntimeHelper.requireNonNull(constants$975.ecvt$MH, "ecvt");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__value, __ndigit, __decpt.address(), __sign.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fcvt$MH() {
        return RuntimeHelper.requireNonNull(constants$975.fcvt$MH,"fcvt");
    }
    public static MemoryAddress fcvt ( double __value,  int __ndigit,  Addressable __decpt,  Addressable __sign) {
        var mh$ = RuntimeHelper.requireNonNull(constants$975.fcvt$MH, "fcvt");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__value, __ndigit, __decpt.address(), __sign.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gcvt$MH() {
        return RuntimeHelper.requireNonNull(constants$975.gcvt$MH,"gcvt");
    }
    public static MemoryAddress gcvt ( double __value,  int __ndigit,  Addressable __buf) {
        var mh$ = RuntimeHelper.requireNonNull(constants$975.gcvt$MH, "gcvt");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__value, __ndigit, __buf.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ecvt_r$MH() {
        return RuntimeHelper.requireNonNull(constants$975.ecvt_r$MH,"ecvt_r");
    }
    public static int ecvt_r ( double __value,  int __ndigit,  Addressable __decpt,  Addressable __sign,  Addressable __buf,  long __len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$975.ecvt_r$MH, "ecvt_r");
        try {
            return (int)mh$.invokeExact(__value, __ndigit, __decpt.address(), __sign.address(), __buf.address(), __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fcvt_r$MH() {
        return RuntimeHelper.requireNonNull(constants$975.fcvt_r$MH,"fcvt_r");
    }
    public static int fcvt_r ( double __value,  int __ndigit,  Addressable __decpt,  Addressable __sign,  Addressable __buf,  long __len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$975.fcvt_r$MH, "fcvt_r");
        try {
            return (int)mh$.invokeExact(__value, __ndigit, __decpt.address(), __sign.address(), __buf.address(), __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mblen$MH() {
        return RuntimeHelper.requireNonNull(constants$976.mblen$MH,"mblen");
    }
    public static int mblen ( Addressable __s,  long __n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$976.mblen$MH, "mblen");
        try {
            return (int)mh$.invokeExact(__s.address(), __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mbtowc$MH() {
        return RuntimeHelper.requireNonNull(constants$976.mbtowc$MH,"mbtowc");
    }
    public static int mbtowc ( Addressable __pwc,  Addressable __s,  long __n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$976.mbtowc$MH, "mbtowc");
        try {
            return (int)mh$.invokeExact(__pwc.address(), __s.address(), __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wctomb$MH() {
        return RuntimeHelper.requireNonNull(constants$976.wctomb$MH,"wctomb");
    }
    public static int wctomb ( Addressable __s,  int __wchar) {
        var mh$ = RuntimeHelper.requireNonNull(constants$976.wctomb$MH, "wctomb");
        try {
            return (int)mh$.invokeExact(__s.address(), __wchar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mbstowcs$MH() {
        return RuntimeHelper.requireNonNull(constants$976.mbstowcs$MH,"mbstowcs");
    }
    public static long mbstowcs ( Addressable __pwcs,  Addressable __s,  long __n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$976.mbstowcs$MH, "mbstowcs");
        try {
            return (long)mh$.invokeExact(__pwcs.address(), __s.address(), __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcstombs$MH() {
        return RuntimeHelper.requireNonNull(constants$976.wcstombs$MH,"wcstombs");
    }
    public static long wcstombs ( Addressable __s,  Addressable __pwcs,  long __n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$976.wcstombs$MH, "wcstombs");
        try {
            return (long)mh$.invokeExact(__s.address(), __pwcs.address(), __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rpmatch$MH() {
        return RuntimeHelper.requireNonNull(constants$976.rpmatch$MH,"rpmatch");
    }
    public static int rpmatch ( Addressable __response) {
        var mh$ = RuntimeHelper.requireNonNull(constants$976.rpmatch$MH, "rpmatch");
        try {
            return (int)mh$.invokeExact(__response.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getsubopt$MH() {
        return RuntimeHelper.requireNonNull(constants$977.getsubopt$MH,"getsubopt");
    }
    public static int getsubopt ( Addressable __optionp,  Addressable __tokens,  Addressable __valuep) {
        var mh$ = RuntimeHelper.requireNonNull(constants$977.getsubopt$MH, "getsubopt");
        try {
            return (int)mh$.invokeExact(__optionp.address(), __tokens.address(), __valuep.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getloadavg$MH() {
        return RuntimeHelper.requireNonNull(constants$977.getloadavg$MH,"getloadavg");
    }
    public static int getloadavg ( Addressable __loadavg,  int __nelem) {
        var mh$ = RuntimeHelper.requireNonNull(constants$977.getloadavg$MH, "getloadavg");
        try {
            return (int)mh$.invokeExact(__loadavg.address(), __nelem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int GL_ALL_ATTRIB_BITS() {
        return (int)4294967295L;
    }
    public static int GL_ALL_CLIENT_ATTRIB_BITS() {
        return (int)4294967295L;
    }
    public static int GL_CLIENT_ALL_ATTRIB_BITS() {
        return (int)4294967295L;
    }
    public static long _POSIX_C_SOURCE() {
        return 200809L;
    }
    public static long __STDC_ISO_10646__() {
        return 201706L;
    }
    public static int __WCHAR_MAX() {
        return (int)2147483647L;
    }
    public static int __WCHAR_MIN() {
        return (int)-2147483648L;
    }
    public static int INT8_MIN() {
        return (int)-128L;
    }
    public static int INT16_MIN() {
        return (int)-32768L;
    }
    public static int INT32_MIN() {
        return (int)-2147483648L;
    }
    public static long INT64_MIN() {
        return -9223372036854775808L;
    }
    public static int INT8_MAX() {
        return (int)127L;
    }
    public static int INT16_MAX() {
        return (int)32767L;
    }
    public static int INT32_MAX() {
        return (int)2147483647L;
    }
    public static long INT64_MAX() {
        return 9223372036854775807L;
    }
    public static int UINT8_MAX() {
        return (int)255L;
    }
    public static int UINT16_MAX() {
        return (int)65535L;
    }
    public static int UINT32_MAX() {
        return (int)4294967295L;
    }
    public static long UINT64_MAX() {
        return -1L;
    }
    public static int INT_LEAST8_MIN() {
        return (int)-128L;
    }
    public static int INT_LEAST16_MIN() {
        return (int)-32768L;
    }
    public static int INT_LEAST32_MIN() {
        return (int)-2147483648L;
    }
    public static long INT_LEAST64_MIN() {
        return -9223372036854775808L;
    }
    public static int INT_LEAST8_MAX() {
        return (int)127L;
    }
    public static int INT_LEAST16_MAX() {
        return (int)32767L;
    }
    public static int INT_LEAST32_MAX() {
        return (int)2147483647L;
    }
    public static long INT_LEAST64_MAX() {
        return 9223372036854775807L;
    }
    public static int UINT_LEAST8_MAX() {
        return (int)255L;
    }
    public static int UINT_LEAST16_MAX() {
        return (int)65535L;
    }
    public static int UINT_LEAST32_MAX() {
        return (int)4294967295L;
    }
    public static long UINT_LEAST64_MAX() {
        return -1L;
    }
    public static int INT_FAST8_MIN() {
        return (int)-128L;
    }
    public static long INT_FAST16_MIN() {
        return -9223372036854775808L;
    }
    public static long INT_FAST32_MIN() {
        return -9223372036854775808L;
    }
    public static long INT_FAST64_MIN() {
        return -9223372036854775808L;
    }
    public static int INT_FAST8_MAX() {
        return (int)127L;
    }
    public static long INT_FAST16_MAX() {
        return 9223372036854775807L;
    }
    public static long INT_FAST32_MAX() {
        return 9223372036854775807L;
    }
    public static long INT_FAST64_MAX() {
        return 9223372036854775807L;
    }
    public static int UINT_FAST8_MAX() {
        return (int)255L;
    }
    public static long UINT_FAST16_MAX() {
        return -1L;
    }
    public static long UINT_FAST32_MAX() {
        return -1L;
    }
    public static long UINT_FAST64_MAX() {
        return -1L;
    }
    public static long INTPTR_MIN() {
        return -9223372036854775808L;
    }
    public static long INTPTR_MAX() {
        return 9223372036854775807L;
    }
    public static long UINTPTR_MAX() {
        return -1L;
    }
    public static long INTMAX_MIN() {
        return -9223372036854775808L;
    }
    public static long INTMAX_MAX() {
        return 9223372036854775807L;
    }
    public static long UINTMAX_MAX() {
        return -1L;
    }
    public static long PTRDIFF_MIN() {
        return -9223372036854775808L;
    }
    public static long PTRDIFF_MAX() {
        return 9223372036854775807L;
    }
    public static int SIG_ATOMIC_MIN() {
        return (int)-2147483648L;
    }
    public static int SIG_ATOMIC_MAX() {
        return (int)2147483647L;
    }
    public static long SIZE_MAX() {
        return -1L;
    }
    public static int WCHAR_MIN() {
        return (int)-2147483648L;
    }
    public static int WCHAR_MAX() {
        return (int)2147483647L;
    }
    public static int WINT_MIN() {
        return (int)0L;
    }
    public static int WINT_MAX() {
        return (int)4294967295L;
    }
    public static int GL_INVALID_INDEX() {
        return (int)4294967295L;
    }
    public static MemorySegment __PRI64_PREFIX() {
        return constants$977.__PRI64_PREFIX$SEGMENT;
    }
    public static MemorySegment __PRIPTR_PREFIX() {
        return constants$977.__PRIPTR_PREFIX$SEGMENT;
    }
    public static MemorySegment PRId8() {
        return constants$977.PRId8$SEGMENT;
    }
    public static MemorySegment PRId16() {
        return constants$977.PRId16$SEGMENT;
    }
    public static MemorySegment PRId32() {
        return constants$978.PRId32$SEGMENT;
    }
    public static MemorySegment PRId64() {
        return constants$978.PRId64$SEGMENT;
    }
    public static MemorySegment PRIdLEAST8() {
        return constants$978.PRIdLEAST8$SEGMENT;
    }
    public static MemorySegment PRIdLEAST16() {
        return constants$978.PRIdLEAST16$SEGMENT;
    }
    public static MemorySegment PRIdLEAST32() {
        return constants$978.PRIdLEAST32$SEGMENT;
    }
    public static MemorySegment PRIdLEAST64() {
        return constants$978.PRIdLEAST64$SEGMENT;
    }
    public static MemorySegment PRIdFAST8() {
        return constants$979.PRIdFAST8$SEGMENT;
    }
    public static MemorySegment PRIdFAST16() {
        return constants$979.PRIdFAST16$SEGMENT;
    }
    public static MemorySegment PRIdFAST32() {
        return constants$979.PRIdFAST32$SEGMENT;
    }
    public static MemorySegment PRIdFAST64() {
        return constants$979.PRIdFAST64$SEGMENT;
    }
    public static MemorySegment PRIi8() {
        return constants$979.PRIi8$SEGMENT;
    }
    public static MemorySegment PRIi16() {
        return constants$979.PRIi16$SEGMENT;
    }
    public static MemorySegment PRIi32() {
        return constants$980.PRIi32$SEGMENT;
    }
    public static MemorySegment PRIi64() {
        return constants$980.PRIi64$SEGMENT;
    }
    public static MemorySegment PRIiLEAST8() {
        return constants$980.PRIiLEAST8$SEGMENT;
    }
    public static MemorySegment PRIiLEAST16() {
        return constants$980.PRIiLEAST16$SEGMENT;
    }
    public static MemorySegment PRIiLEAST32() {
        return constants$980.PRIiLEAST32$SEGMENT;
    }
    public static MemorySegment PRIiLEAST64() {
        return constants$980.PRIiLEAST64$SEGMENT;
    }
    public static MemorySegment PRIiFAST8() {
        return constants$981.PRIiFAST8$SEGMENT;
    }
    public static MemorySegment PRIiFAST16() {
        return constants$981.PRIiFAST16$SEGMENT;
    }
    public static MemorySegment PRIiFAST32() {
        return constants$981.PRIiFAST32$SEGMENT;
    }
    public static MemorySegment PRIiFAST64() {
        return constants$981.PRIiFAST64$SEGMENT;
    }
    public static MemorySegment PRIo8() {
        return constants$981.PRIo8$SEGMENT;
    }
    public static MemorySegment PRIo16() {
        return constants$981.PRIo16$SEGMENT;
    }
    public static MemorySegment PRIo32() {
        return constants$982.PRIo32$SEGMENT;
    }
    public static MemorySegment PRIo64() {
        return constants$982.PRIo64$SEGMENT;
    }
    public static MemorySegment PRIoLEAST8() {
        return constants$982.PRIoLEAST8$SEGMENT;
    }
    public static MemorySegment PRIoLEAST16() {
        return constants$982.PRIoLEAST16$SEGMENT;
    }
    public static MemorySegment PRIoLEAST32() {
        return constants$982.PRIoLEAST32$SEGMENT;
    }
    public static MemorySegment PRIoLEAST64() {
        return constants$982.PRIoLEAST64$SEGMENT;
    }
    public static MemorySegment PRIoFAST8() {
        return constants$983.PRIoFAST8$SEGMENT;
    }
    public static MemorySegment PRIoFAST16() {
        return constants$983.PRIoFAST16$SEGMENT;
    }
    public static MemorySegment PRIoFAST32() {
        return constants$983.PRIoFAST32$SEGMENT;
    }
    public static MemorySegment PRIoFAST64() {
        return constants$983.PRIoFAST64$SEGMENT;
    }
    public static MemorySegment PRIu8() {
        return constants$983.PRIu8$SEGMENT;
    }
    public static MemorySegment PRIu16() {
        return constants$983.PRIu16$SEGMENT;
    }
    public static MemorySegment PRIu32() {
        return constants$984.PRIu32$SEGMENT;
    }
    public static MemorySegment PRIu64() {
        return constants$984.PRIu64$SEGMENT;
    }
    public static MemorySegment PRIuLEAST8() {
        return constants$984.PRIuLEAST8$SEGMENT;
    }
    public static MemorySegment PRIuLEAST16() {
        return constants$984.PRIuLEAST16$SEGMENT;
    }
    public static MemorySegment PRIuLEAST32() {
        return constants$984.PRIuLEAST32$SEGMENT;
    }
    public static MemorySegment PRIuLEAST64() {
        return constants$984.PRIuLEAST64$SEGMENT;
    }
    public static MemorySegment PRIuFAST8() {
        return constants$985.PRIuFAST8$SEGMENT;
    }
    public static MemorySegment PRIuFAST16() {
        return constants$985.PRIuFAST16$SEGMENT;
    }
    public static MemorySegment PRIuFAST32() {
        return constants$985.PRIuFAST32$SEGMENT;
    }
    public static MemorySegment PRIuFAST64() {
        return constants$985.PRIuFAST64$SEGMENT;
    }
    public static MemorySegment PRIx8() {
        return constants$985.PRIx8$SEGMENT;
    }
    public static MemorySegment PRIx16() {
        return constants$985.PRIx16$SEGMENT;
    }
    public static MemorySegment PRIx32() {
        return constants$986.PRIx32$SEGMENT;
    }
    public static MemorySegment PRIx64() {
        return constants$986.PRIx64$SEGMENT;
    }
    public static MemorySegment PRIxLEAST8() {
        return constants$986.PRIxLEAST8$SEGMENT;
    }
    public static MemorySegment PRIxLEAST16() {
        return constants$986.PRIxLEAST16$SEGMENT;
    }
    public static MemorySegment PRIxLEAST32() {
        return constants$986.PRIxLEAST32$SEGMENT;
    }
    public static MemorySegment PRIxLEAST64() {
        return constants$986.PRIxLEAST64$SEGMENT;
    }
    public static MemorySegment PRIxFAST8() {
        return constants$987.PRIxFAST8$SEGMENT;
    }
    public static MemorySegment PRIxFAST16() {
        return constants$987.PRIxFAST16$SEGMENT;
    }
    public static MemorySegment PRIxFAST32() {
        return constants$987.PRIxFAST32$SEGMENT;
    }
    public static MemorySegment PRIxFAST64() {
        return constants$987.PRIxFAST64$SEGMENT;
    }
    public static MemorySegment PRIX8() {
        return constants$987.PRIX8$SEGMENT;
    }
    public static MemorySegment PRIX16() {
        return constants$987.PRIX16$SEGMENT;
    }
    public static MemorySegment PRIX32() {
        return constants$988.PRIX32$SEGMENT;
    }
    public static MemorySegment PRIX64() {
        return constants$988.PRIX64$SEGMENT;
    }
    public static MemorySegment PRIXLEAST8() {
        return constants$988.PRIXLEAST8$SEGMENT;
    }
    public static MemorySegment PRIXLEAST16() {
        return constants$988.PRIXLEAST16$SEGMENT;
    }
    public static MemorySegment PRIXLEAST32() {
        return constants$988.PRIXLEAST32$SEGMENT;
    }
    public static MemorySegment PRIXLEAST64() {
        return constants$988.PRIXLEAST64$SEGMENT;
    }
    public static MemorySegment PRIXFAST8() {
        return constants$989.PRIXFAST8$SEGMENT;
    }
    public static MemorySegment PRIXFAST16() {
        return constants$989.PRIXFAST16$SEGMENT;
    }
    public static MemorySegment PRIXFAST32() {
        return constants$989.PRIXFAST32$SEGMENT;
    }
    public static MemorySegment PRIXFAST64() {
        return constants$989.PRIXFAST64$SEGMENT;
    }
    public static MemorySegment PRIdMAX() {
        return constants$989.PRIdMAX$SEGMENT;
    }
    public static MemorySegment PRIiMAX() {
        return constants$989.PRIiMAX$SEGMENT;
    }
    public static MemorySegment PRIoMAX() {
        return constants$990.PRIoMAX$SEGMENT;
    }
    public static MemorySegment PRIuMAX() {
        return constants$990.PRIuMAX$SEGMENT;
    }
    public static MemorySegment PRIxMAX() {
        return constants$990.PRIxMAX$SEGMENT;
    }
    public static MemorySegment PRIXMAX() {
        return constants$990.PRIXMAX$SEGMENT;
    }
    public static MemorySegment PRIdPTR() {
        return constants$990.PRIdPTR$SEGMENT;
    }
    public static MemorySegment PRIiPTR() {
        return constants$990.PRIiPTR$SEGMENT;
    }
    public static MemorySegment PRIoPTR() {
        return constants$991.PRIoPTR$SEGMENT;
    }
    public static MemorySegment PRIuPTR() {
        return constants$991.PRIuPTR$SEGMENT;
    }
    public static MemorySegment PRIxPTR() {
        return constants$991.PRIxPTR$SEGMENT;
    }
    public static MemorySegment PRIXPTR() {
        return constants$991.PRIXPTR$SEGMENT;
    }
    public static MemorySegment SCNd8() {
        return constants$991.SCNd8$SEGMENT;
    }
    public static MemorySegment SCNd16() {
        return constants$991.SCNd16$SEGMENT;
    }
    public static MemorySegment SCNd32() {
        return constants$992.SCNd32$SEGMENT;
    }
    public static MemorySegment SCNd64() {
        return constants$992.SCNd64$SEGMENT;
    }
    public static MemorySegment SCNdLEAST8() {
        return constants$992.SCNdLEAST8$SEGMENT;
    }
    public static MemorySegment SCNdLEAST16() {
        return constants$992.SCNdLEAST16$SEGMENT;
    }
    public static MemorySegment SCNdLEAST32() {
        return constants$992.SCNdLEAST32$SEGMENT;
    }
    public static MemorySegment SCNdLEAST64() {
        return constants$992.SCNdLEAST64$SEGMENT;
    }
    public static MemorySegment SCNdFAST8() {
        return constants$993.SCNdFAST8$SEGMENT;
    }
    public static MemorySegment SCNdFAST16() {
        return constants$993.SCNdFAST16$SEGMENT;
    }
    public static MemorySegment SCNdFAST32() {
        return constants$993.SCNdFAST32$SEGMENT;
    }
    public static MemorySegment SCNdFAST64() {
        return constants$993.SCNdFAST64$SEGMENT;
    }
    public static MemorySegment SCNi8() {
        return constants$993.SCNi8$SEGMENT;
    }
    public static MemorySegment SCNi16() {
        return constants$993.SCNi16$SEGMENT;
    }
    public static MemorySegment SCNi32() {
        return constants$994.SCNi32$SEGMENT;
    }
    public static MemorySegment SCNi64() {
        return constants$994.SCNi64$SEGMENT;
    }
    public static MemorySegment SCNiLEAST8() {
        return constants$994.SCNiLEAST8$SEGMENT;
    }
    public static MemorySegment SCNiLEAST16() {
        return constants$994.SCNiLEAST16$SEGMENT;
    }
    public static MemorySegment SCNiLEAST32() {
        return constants$994.SCNiLEAST32$SEGMENT;
    }
    public static MemorySegment SCNiLEAST64() {
        return constants$994.SCNiLEAST64$SEGMENT;
    }
    public static MemorySegment SCNiFAST8() {
        return constants$995.SCNiFAST8$SEGMENT;
    }
    public static MemorySegment SCNiFAST16() {
        return constants$995.SCNiFAST16$SEGMENT;
    }
    public static MemorySegment SCNiFAST32() {
        return constants$995.SCNiFAST32$SEGMENT;
    }
    public static MemorySegment SCNiFAST64() {
        return constants$995.SCNiFAST64$SEGMENT;
    }
    public static MemorySegment SCNu8() {
        return constants$995.SCNu8$SEGMENT;
    }
    public static MemorySegment SCNu16() {
        return constants$995.SCNu16$SEGMENT;
    }
    public static MemorySegment SCNu32() {
        return constants$996.SCNu32$SEGMENT;
    }
    public static MemorySegment SCNu64() {
        return constants$996.SCNu64$SEGMENT;
    }
    public static MemorySegment SCNuLEAST8() {
        return constants$996.SCNuLEAST8$SEGMENT;
    }
    public static MemorySegment SCNuLEAST16() {
        return constants$996.SCNuLEAST16$SEGMENT;
    }
    public static MemorySegment SCNuLEAST32() {
        return constants$996.SCNuLEAST32$SEGMENT;
    }
    public static MemorySegment SCNuLEAST64() {
        return constants$996.SCNuLEAST64$SEGMENT;
    }
    public static MemorySegment SCNuFAST8() {
        return constants$997.SCNuFAST8$SEGMENT;
    }
    public static MemorySegment SCNuFAST16() {
        return constants$997.SCNuFAST16$SEGMENT;
    }
    public static MemorySegment SCNuFAST32() {
        return constants$997.SCNuFAST32$SEGMENT;
    }
    public static MemorySegment SCNuFAST64() {
        return constants$997.SCNuFAST64$SEGMENT;
    }
    public static MemorySegment SCNo8() {
        return constants$997.SCNo8$SEGMENT;
    }
    public static MemorySegment SCNo16() {
        return constants$997.SCNo16$SEGMENT;
    }
    public static MemorySegment SCNo32() {
        return constants$998.SCNo32$SEGMENT;
    }
    public static MemorySegment SCNo64() {
        return constants$998.SCNo64$SEGMENT;
    }
    public static MemorySegment SCNoLEAST8() {
        return constants$998.SCNoLEAST8$SEGMENT;
    }
    public static MemorySegment SCNoLEAST16() {
        return constants$998.SCNoLEAST16$SEGMENT;
    }
    public static MemorySegment SCNoLEAST32() {
        return constants$998.SCNoLEAST32$SEGMENT;
    }
    public static MemorySegment SCNoLEAST64() {
        return constants$998.SCNoLEAST64$SEGMENT;
    }
    public static MemorySegment SCNoFAST8() {
        return constants$999.SCNoFAST8$SEGMENT;
    }
    public static MemorySegment SCNoFAST16() {
        return constants$999.SCNoFAST16$SEGMENT;
    }
    public static MemorySegment SCNoFAST32() {
        return constants$999.SCNoFAST32$SEGMENT;
    }
    public static MemorySegment SCNoFAST64() {
        return constants$999.SCNoFAST64$SEGMENT;
    }
    public static MemorySegment SCNx8() {
        return constants$999.SCNx8$SEGMENT;
    }
    public static MemorySegment SCNx16() {
        return constants$999.SCNx16$SEGMENT;
    }
    public static MemorySegment SCNx32() {
        return constants$1000.SCNx32$SEGMENT;
    }
    public static MemorySegment SCNx64() {
        return constants$1000.SCNx64$SEGMENT;
    }
    public static MemorySegment SCNxLEAST8() {
        return constants$1000.SCNxLEAST8$SEGMENT;
    }
    public static MemorySegment SCNxLEAST16() {
        return constants$1000.SCNxLEAST16$SEGMENT;
    }
    public static MemorySegment SCNxLEAST32() {
        return constants$1000.SCNxLEAST32$SEGMENT;
    }
    public static MemorySegment SCNxLEAST64() {
        return constants$1000.SCNxLEAST64$SEGMENT;
    }
    public static MemorySegment SCNxFAST8() {
        return constants$1001.SCNxFAST8$SEGMENT;
    }
    public static MemorySegment SCNxFAST16() {
        return constants$1001.SCNxFAST16$SEGMENT;
    }
    public static MemorySegment SCNxFAST32() {
        return constants$1001.SCNxFAST32$SEGMENT;
    }
    public static MemorySegment SCNxFAST64() {
        return constants$1001.SCNxFAST64$SEGMENT;
    }
    public static MemorySegment SCNdMAX() {
        return constants$1001.SCNdMAX$SEGMENT;
    }
    public static MemorySegment SCNiMAX() {
        return constants$1001.SCNiMAX$SEGMENT;
    }
    public static MemorySegment SCNoMAX() {
        return constants$1002.SCNoMAX$SEGMENT;
    }
    public static MemorySegment SCNuMAX() {
        return constants$1002.SCNuMAX$SEGMENT;
    }
    public static MemorySegment SCNxMAX() {
        return constants$1002.SCNxMAX$SEGMENT;
    }
    public static MemorySegment SCNdPTR() {
        return constants$1002.SCNdPTR$SEGMENT;
    }
    public static MemorySegment SCNiPTR() {
        return constants$1002.SCNiPTR$SEGMENT;
    }
    public static MemorySegment SCNoPTR() {
        return constants$1002.SCNoPTR$SEGMENT;
    }
    public static MemorySegment SCNuPTR() {
        return constants$1003.SCNuPTR$SEGMENT;
    }
    public static MemorySegment SCNxPTR() {
        return constants$1003.SCNxPTR$SEGMENT;
    }
    public static long GL_TIMEOUT_IGNORED() {
        return -1L;
    }
    public static int GL_ALL_SHADER_BITS() {
        return (int)4294967295L;
    }
    public static int GL_ALL_BARRIER_BITS() {
        return (int)4294967295L;
    }
    public static MemoryAddress NULL() {
        return constants$1003.NULL$ADDR;
    }
    public static int GL_ALL_PIXELS_AMD() {
        return (int)4294967295L;
    }
    public static int GL_QUERY_ALL_EVENT_BITS_AMD() {
        return (int)4294967295L;
    }
    public static int GL_ALL_BARRIER_BITS_EXT() {
        return (int)4294967295L;
    }
    public static int GL_NEXT_BUFFER_NV() {
        return (int)-2L;
    }
    public static int GL_SKIP_COMPONENTS4_NV() {
        return (int)-3L;
    }
    public static int GL_SKIP_COMPONENTS3_NV() {
        return (int)-4L;
    }
    public static int GL_SKIP_COMPONENTS2_NV() {
        return (int)-5L;
    }
    public static int GL_SKIP_COMPONENTS1_NV() {
        return (int)-6L;
    }
    public static int GL_TEXCOORD4_BIT_PGI() {
        return (int)2147483648L;
    }
    public static double GLU_TESS_MAX_COORD() {
        return 1.0E150d;
    }
    public static int __WCLONE() {
        return (int)2147483648L;
    }
    public static int __HAVE_DISTINCT_FLOAT16() {
        return (int)0L;
    }
    public static int __HAVE_DISTINCT_FLOAT128X() {
        return (int)0L;
    }
    public static int __HAVE_FLOAT128_UNLIKE_LDBL() {
        return (int)0L;
    }
    public static int __BYTE_ORDER() {
        return (int)1234L;
    }
    public static int __FLOAT_WORD_ORDER() {
        return (int)1234L;
    }
    public static int LITTLE_ENDIAN() {
        return (int)1234L;
    }
    public static int BIG_ENDIAN() {
        return (int)4321L;
    }
    public static int PDP_ENDIAN() {
        return (int)3412L;
    }
    public static int BYTE_ORDER() {
        return (int)1234L;
    }
    public static MemorySegment __FD_ZERO_STOS() {
        return constants$1003.__FD_ZERO_STOS$SEGMENT;
    }
    public static long _SIGSET_NWORDS() {
        return 16L;
    }
    public static int __NFDBITS() {
        return (int)64L;
    }
    public static int FD_SETSIZE() {
        return (int)1024L;
    }
    public static int NFDBITS() {
        return (int)64L;
    }
    public static int __PTHREAD_RWLOCK_ELISION_EXTRA() {
        return (int)0L;
    }
    public static int __PTHREAD_SPINS() {
        return (int)0L;
    }
}


