// Generated by jextract

package org.eclipse.swt.opengl.panama;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
 class glut_h_5 extends glut_h_4 {

    public static int GL_PROGRAM_ERROR_POSITION_NV() {
        return (int)34379L;
    }
    public static int GL_VERTEX_ATTRIB_ARRAY0_NV() {
        return (int)34384L;
    }
    public static int GL_VERTEX_ATTRIB_ARRAY1_NV() {
        return (int)34385L;
    }
    public static int GL_VERTEX_ATTRIB_ARRAY2_NV() {
        return (int)34386L;
    }
    public static int GL_VERTEX_ATTRIB_ARRAY3_NV() {
        return (int)34387L;
    }
    public static int GL_VERTEX_ATTRIB_ARRAY4_NV() {
        return (int)34388L;
    }
    public static int GL_VERTEX_ATTRIB_ARRAY5_NV() {
        return (int)34389L;
    }
    public static int GL_VERTEX_ATTRIB_ARRAY6_NV() {
        return (int)34390L;
    }
    public static int GL_VERTEX_ATTRIB_ARRAY7_NV() {
        return (int)34391L;
    }
    public static int GL_VERTEX_ATTRIB_ARRAY8_NV() {
        return (int)34392L;
    }
    public static int GL_VERTEX_ATTRIB_ARRAY9_NV() {
        return (int)34393L;
    }
    public static int GL_VERTEX_ATTRIB_ARRAY10_NV() {
        return (int)34394L;
    }
    public static int GL_VERTEX_ATTRIB_ARRAY11_NV() {
        return (int)34395L;
    }
    public static int GL_VERTEX_ATTRIB_ARRAY12_NV() {
        return (int)34396L;
    }
    public static int GL_VERTEX_ATTRIB_ARRAY13_NV() {
        return (int)34397L;
    }
    public static int GL_VERTEX_ATTRIB_ARRAY14_NV() {
        return (int)34398L;
    }
    public static int GL_VERTEX_ATTRIB_ARRAY15_NV() {
        return (int)34399L;
    }
    public static int GL_MAP1_VERTEX_ATTRIB0_4_NV() {
        return (int)34400L;
    }
    public static int GL_MAP1_VERTEX_ATTRIB1_4_NV() {
        return (int)34401L;
    }
    public static int GL_MAP1_VERTEX_ATTRIB2_4_NV() {
        return (int)34402L;
    }
    public static int GL_MAP1_VERTEX_ATTRIB3_4_NV() {
        return (int)34403L;
    }
    public static int GL_MAP1_VERTEX_ATTRIB4_4_NV() {
        return (int)34404L;
    }
    public static int GL_MAP1_VERTEX_ATTRIB5_4_NV() {
        return (int)34405L;
    }
    public static int GL_MAP1_VERTEX_ATTRIB6_4_NV() {
        return (int)34406L;
    }
    public static int GL_MAP1_VERTEX_ATTRIB7_4_NV() {
        return (int)34407L;
    }
    public static int GL_MAP1_VERTEX_ATTRIB8_4_NV() {
        return (int)34408L;
    }
    public static int GL_MAP1_VERTEX_ATTRIB9_4_NV() {
        return (int)34409L;
    }
    public static int GL_MAP1_VERTEX_ATTRIB10_4_NV() {
        return (int)34410L;
    }
    public static int GL_MAP1_VERTEX_ATTRIB11_4_NV() {
        return (int)34411L;
    }
    public static int GL_MAP1_VERTEX_ATTRIB12_4_NV() {
        return (int)34412L;
    }
    public static int GL_MAP1_VERTEX_ATTRIB13_4_NV() {
        return (int)34413L;
    }
    public static int GL_MAP1_VERTEX_ATTRIB14_4_NV() {
        return (int)34414L;
    }
    public static int GL_MAP1_VERTEX_ATTRIB15_4_NV() {
        return (int)34415L;
    }
    public static int GL_MAP2_VERTEX_ATTRIB0_4_NV() {
        return (int)34416L;
    }
    public static int GL_MAP2_VERTEX_ATTRIB1_4_NV() {
        return (int)34417L;
    }
    public static int GL_MAP2_VERTEX_ATTRIB2_4_NV() {
        return (int)34418L;
    }
    public static int GL_MAP2_VERTEX_ATTRIB3_4_NV() {
        return (int)34419L;
    }
    public static int GL_MAP2_VERTEX_ATTRIB4_4_NV() {
        return (int)34420L;
    }
    public static int GL_MAP2_VERTEX_ATTRIB5_4_NV() {
        return (int)34421L;
    }
    public static int GL_MAP2_VERTEX_ATTRIB6_4_NV() {
        return (int)34422L;
    }
    public static int GL_MAP2_VERTEX_ATTRIB7_4_NV() {
        return (int)34423L;
    }
    public static int GL_MAP2_VERTEX_ATTRIB8_4_NV() {
        return (int)34424L;
    }
    public static int GL_MAP2_VERTEX_ATTRIB9_4_NV() {
        return (int)34425L;
    }
    public static int GL_MAP2_VERTEX_ATTRIB10_4_NV() {
        return (int)34426L;
    }
    public static int GL_MAP2_VERTEX_ATTRIB11_4_NV() {
        return (int)34427L;
    }
    public static int GL_MAP2_VERTEX_ATTRIB12_4_NV() {
        return (int)34428L;
    }
    public static int GL_MAP2_VERTEX_ATTRIB13_4_NV() {
        return (int)34429L;
    }
    public static int GL_MAP2_VERTEX_ATTRIB14_4_NV() {
        return (int)34430L;
    }
    public static int GL_MAP2_VERTEX_ATTRIB15_4_NV() {
        return (int)34431L;
    }
    public static int GL_NV_vertex_program1_1() {
        return (int)1L;
    }
    public static int GL_NV_vertex_program2() {
        return (int)1L;
    }
    public static int GL_NV_vertex_program2_option() {
        return (int)1L;
    }
    public static int GL_NV_vertex_program3() {
        return (int)1L;
    }
    public static int GL_NV_vertex_program4() {
        return (int)1L;
    }
    public static int GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV() {
        return (int)35069L;
    }
    public static int GL_NV_video_capture() {
        return (int)1L;
    }
    public static int GL_VIDEO_BUFFER_NV() {
        return (int)36896L;
    }
    public static int GL_VIDEO_BUFFER_BINDING_NV() {
        return (int)36897L;
    }
    public static int GL_FIELD_UPPER_NV() {
        return (int)36898L;
    }
    public static int GL_FIELD_LOWER_NV() {
        return (int)36899L;
    }
    public static int GL_NUM_VIDEO_CAPTURE_STREAMS_NV() {
        return (int)36900L;
    }
    public static int GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV() {
        return (int)36901L;
    }
    public static int GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV() {
        return (int)36902L;
    }
    public static int GL_LAST_VIDEO_CAPTURE_STATUS_NV() {
        return (int)36903L;
    }
    public static int GL_VIDEO_BUFFER_PITCH_NV() {
        return (int)36904L;
    }
    public static int GL_VIDEO_COLOR_CONVERSION_MATRIX_NV() {
        return (int)36905L;
    }
    public static int GL_VIDEO_COLOR_CONVERSION_MAX_NV() {
        return (int)36906L;
    }
    public static int GL_VIDEO_COLOR_CONVERSION_MIN_NV() {
        return (int)36907L;
    }
    public static int GL_VIDEO_COLOR_CONVERSION_OFFSET_NV() {
        return (int)36908L;
    }
    public static int GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV() {
        return (int)36909L;
    }
    public static int GL_PARTIAL_SUCCESS_NV() {
        return (int)36910L;
    }
    public static int GL_SUCCESS_NV() {
        return (int)36911L;
    }
    public static int GL_FAILURE_NV() {
        return (int)36912L;
    }
    public static int GL_YCBYCR8_422_NV() {
        return (int)36913L;
    }
    public static int GL_YCBAYCR8A_4224_NV() {
        return (int)36914L;
    }
    public static int GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV() {
        return (int)36915L;
    }
    public static int GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV() {
        return (int)36916L;
    }
    public static int GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV() {
        return (int)36917L;
    }
    public static int GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV() {
        return (int)36918L;
    }
    public static int GL_Z4Y12Z4CB12Z4CR12_444_NV() {
        return (int)36919L;
    }
    public static int GL_VIDEO_CAPTURE_FRAME_WIDTH_NV() {
        return (int)36920L;
    }
    public static int GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV() {
        return (int)36921L;
    }
    public static int GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV() {
        return (int)36922L;
    }
    public static int GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV() {
        return (int)36923L;
    }
    public static int GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV() {
        return (int)36924L;
    }
    public static int GL_NV_viewport_array2() {
        return (int)1L;
    }
    public static int GL_NV_viewport_swizzle() {
        return (int)1L;
    }
    public static int GL_VIEWPORT_SWIZZLE_POSITIVE_X_NV() {
        return (int)37712L;
    }
    public static int GL_VIEWPORT_SWIZZLE_NEGATIVE_X_NV() {
        return (int)37713L;
    }
    public static int GL_VIEWPORT_SWIZZLE_POSITIVE_Y_NV() {
        return (int)37714L;
    }
    public static int GL_VIEWPORT_SWIZZLE_NEGATIVE_Y_NV() {
        return (int)37715L;
    }
    public static int GL_VIEWPORT_SWIZZLE_POSITIVE_Z_NV() {
        return (int)37716L;
    }
    public static int GL_VIEWPORT_SWIZZLE_NEGATIVE_Z_NV() {
        return (int)37717L;
    }
    public static int GL_VIEWPORT_SWIZZLE_POSITIVE_W_NV() {
        return (int)37718L;
    }
    public static int GL_VIEWPORT_SWIZZLE_NEGATIVE_W_NV() {
        return (int)37719L;
    }
    public static int GL_VIEWPORT_SWIZZLE_X_NV() {
        return (int)37720L;
    }
    public static int GL_VIEWPORT_SWIZZLE_Y_NV() {
        return (int)37721L;
    }
    public static int GL_VIEWPORT_SWIZZLE_Z_NV() {
        return (int)37722L;
    }
    public static int GL_VIEWPORT_SWIZZLE_W_NV() {
        return (int)37723L;
    }
    public static int GL_OML_interlace() {
        return (int)1L;
    }
    public static int GL_INTERLACE_OML() {
        return (int)35200L;
    }
    public static int GL_INTERLACE_READ_OML() {
        return (int)35201L;
    }
    public static int GL_OML_resample() {
        return (int)1L;
    }
    public static int GL_PACK_RESAMPLE_OML() {
        return (int)35204L;
    }
    public static int GL_UNPACK_RESAMPLE_OML() {
        return (int)35205L;
    }
    public static int GL_RESAMPLE_REPLICATE_OML() {
        return (int)35206L;
    }
    public static int GL_RESAMPLE_ZERO_FILL_OML() {
        return (int)35207L;
    }
    public static int GL_RESAMPLE_AVERAGE_OML() {
        return (int)35208L;
    }
    public static int GL_RESAMPLE_DECIMATE_OML() {
        return (int)35209L;
    }
    public static int GL_OML_subsample() {
        return (int)1L;
    }
    public static int GL_FORMAT_SUBSAMPLE_24_24_OML() {
        return (int)35202L;
    }
    public static int GL_FORMAT_SUBSAMPLE_244_244_OML() {
        return (int)35203L;
    }
    public static int GL_OVR_multiview() {
        return (int)1L;
    }
    public static int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR() {
        return (int)38448L;
    }
    public static int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR() {
        return (int)38450L;
    }
    public static int GL_MAX_VIEWS_OVR() {
        return (int)38449L;
    }
    public static int GL_FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR() {
        return (int)38451L;
    }
    public static int GL_OVR_multiview2() {
        return (int)1L;
    }
    public static int GL_PGI_misc_hints() {
        return (int)1L;
    }
    public static int GL_PREFER_DOUBLEBUFFER_HINT_PGI() {
        return (int)107000L;
    }
    public static int GL_CONSERVE_MEMORY_HINT_PGI() {
        return (int)107005L;
    }
    public static int GL_RECLAIM_MEMORY_HINT_PGI() {
        return (int)107006L;
    }
    public static int GL_NATIVE_GRAPHICS_HANDLE_PGI() {
        return (int)107010L;
    }
    public static int GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI() {
        return (int)107011L;
    }
    public static int GL_NATIVE_GRAPHICS_END_HINT_PGI() {
        return (int)107012L;
    }
    public static int GL_ALWAYS_FAST_HINT_PGI() {
        return (int)107020L;
    }
    public static int GL_ALWAYS_SOFT_HINT_PGI() {
        return (int)107021L;
    }
    public static int GL_ALLOW_DRAW_OBJ_HINT_PGI() {
        return (int)107022L;
    }
    public static int GL_ALLOW_DRAW_WIN_HINT_PGI() {
        return (int)107023L;
    }
    public static int GL_ALLOW_DRAW_FRG_HINT_PGI() {
        return (int)107024L;
    }
    public static int GL_ALLOW_DRAW_MEM_HINT_PGI() {
        return (int)107025L;
    }
    public static int GL_STRICT_DEPTHFUNC_HINT_PGI() {
        return (int)107030L;
    }
    public static int GL_STRICT_LIGHTING_HINT_PGI() {
        return (int)107031L;
    }
    public static int GL_STRICT_SCISSOR_HINT_PGI() {
        return (int)107032L;
    }
    public static int GL_FULL_STIPPLE_HINT_PGI() {
        return (int)107033L;
    }
    public static int GL_CLIP_NEAR_HINT_PGI() {
        return (int)107040L;
    }
    public static int GL_CLIP_FAR_HINT_PGI() {
        return (int)107041L;
    }
    public static int GL_WIDE_LINE_HINT_PGI() {
        return (int)107042L;
    }
    public static int GL_BACK_NORMALS_HINT_PGI() {
        return (int)107043L;
    }
    public static int GL_PGI_vertex_hints() {
        return (int)1L;
    }
    public static int GL_VERTEX_DATA_HINT_PGI() {
        return (int)107050L;
    }
    public static int GL_VERTEX_CONSISTENT_HINT_PGI() {
        return (int)107051L;
    }
    public static int GL_MATERIAL_SIDE_HINT_PGI() {
        return (int)107052L;
    }
    public static int GL_MAX_VERTEX_HINT_PGI() {
        return (int)107053L;
    }
    public static int GL_COLOR3_BIT_PGI() {
        return (int)65536L;
    }
    public static int GL_COLOR4_BIT_PGI() {
        return (int)131072L;
    }
    public static int GL_EDGEFLAG_BIT_PGI() {
        return (int)262144L;
    }
    public static int GL_INDEX_BIT_PGI() {
        return (int)524288L;
    }
    public static int GL_MAT_AMBIENT_BIT_PGI() {
        return (int)1048576L;
    }
    public static int GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI() {
        return (int)2097152L;
    }
    public static int GL_MAT_DIFFUSE_BIT_PGI() {
        return (int)4194304L;
    }
    public static int GL_MAT_EMISSION_BIT_PGI() {
        return (int)8388608L;
    }
    public static int GL_MAT_COLOR_INDEXES_BIT_PGI() {
        return (int)16777216L;
    }
    public static int GL_MAT_SHININESS_BIT_PGI() {
        return (int)33554432L;
    }
    public static int GL_MAT_SPECULAR_BIT_PGI() {
        return (int)67108864L;
    }
    public static int GL_NORMAL_BIT_PGI() {
        return (int)134217728L;
    }
    public static int GL_TEXCOORD1_BIT_PGI() {
        return (int)268435456L;
    }
    public static int GL_TEXCOORD2_BIT_PGI() {
        return (int)536870912L;
    }
    public static int GL_TEXCOORD3_BIT_PGI() {
        return (int)1073741824L;
    }
    public static int GL_VERTEX23_BIT_PGI() {
        return (int)4L;
    }
    public static int GL_VERTEX4_BIT_PGI() {
        return (int)8L;
    }
    public static int GL_REND_screen_coordinates() {
        return (int)1L;
    }
    public static int GL_SCREEN_COORDINATES_REND() {
        return (int)33936L;
    }
    public static int GL_INVERTED_SCREEN_W_REND() {
        return (int)33937L;
    }
    public static int GL_S3_s3tc() {
        return (int)1L;
    }
    public static int GL_RGB_S3TC() {
        return (int)33696L;
    }
    public static int GL_RGB4_S3TC() {
        return (int)33697L;
    }
    public static int GL_RGBA_S3TC() {
        return (int)33698L;
    }
    public static int GL_RGBA4_S3TC() {
        return (int)33699L;
    }
    public static int GL_RGBA_DXT5_S3TC() {
        return (int)33700L;
    }
    public static int GL_RGBA4_DXT5_S3TC() {
        return (int)33701L;
    }
    public static int GL_SGIS_detail_texture() {
        return (int)1L;
    }
    public static int GL_DETAIL_TEXTURE_2D_SGIS() {
        return (int)32917L;
    }
    public static int GL_DETAIL_TEXTURE_2D_BINDING_SGIS() {
        return (int)32918L;
    }
    public static int GL_LINEAR_DETAIL_SGIS() {
        return (int)32919L;
    }
    public static int GL_LINEAR_DETAIL_ALPHA_SGIS() {
        return (int)32920L;
    }
    public static int GL_LINEAR_DETAIL_COLOR_SGIS() {
        return (int)32921L;
    }
    public static int GL_DETAIL_TEXTURE_LEVEL_SGIS() {
        return (int)32922L;
    }
    public static int GL_DETAIL_TEXTURE_MODE_SGIS() {
        return (int)32923L;
    }
    public static int GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS() {
        return (int)32924L;
    }
    public static int GL_SGIS_fog_function() {
        return (int)1L;
    }
    public static int GL_FOG_FUNC_SGIS() {
        return (int)33066L;
    }
    public static int GL_FOG_FUNC_POINTS_SGIS() {
        return (int)33067L;
    }
    public static int GL_MAX_FOG_FUNC_POINTS_SGIS() {
        return (int)33068L;
    }
    public static int GL_SGIS_generate_mipmap() {
        return (int)1L;
    }
    public static int GL_GENERATE_MIPMAP_SGIS() {
        return (int)33169L;
    }
    public static int GL_GENERATE_MIPMAP_HINT_SGIS() {
        return (int)33170L;
    }
    public static int GL_SGIS_multisample() {
        return (int)1L;
    }
    public static int GL_MULTISAMPLE_SGIS() {
        return (int)32925L;
    }
    public static int GL_SAMPLE_ALPHA_TO_MASK_SGIS() {
        return (int)32926L;
    }
    public static int GL_SAMPLE_ALPHA_TO_ONE_SGIS() {
        return (int)32927L;
    }
    public static int GL_SAMPLE_MASK_SGIS() {
        return (int)32928L;
    }
    public static int GL_1PASS_SGIS() {
        return (int)32929L;
    }
    public static int GL_2PASS_0_SGIS() {
        return (int)32930L;
    }
    public static int GL_2PASS_1_SGIS() {
        return (int)32931L;
    }
    public static int GL_4PASS_0_SGIS() {
        return (int)32932L;
    }
    public static int GL_4PASS_1_SGIS() {
        return (int)32933L;
    }
    public static int GL_4PASS_2_SGIS() {
        return (int)32934L;
    }
    public static int GL_4PASS_3_SGIS() {
        return (int)32935L;
    }
    public static int GL_SAMPLE_BUFFERS_SGIS() {
        return (int)32936L;
    }
    public static int GL_SAMPLES_SGIS() {
        return (int)32937L;
    }
    public static int GL_SAMPLE_MASK_VALUE_SGIS() {
        return (int)32938L;
    }
    public static int GL_SAMPLE_MASK_INVERT_SGIS() {
        return (int)32939L;
    }
    public static int GL_SAMPLE_PATTERN_SGIS() {
        return (int)32940L;
    }
    public static int GL_SGIS_pixel_texture() {
        return (int)1L;
    }
    public static int GL_PIXEL_TEXTURE_SGIS() {
        return (int)33619L;
    }
    public static int GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS() {
        return (int)33620L;
    }
    public static int GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS() {
        return (int)33621L;
    }
    public static int GL_PIXEL_GROUP_COLOR_SGIS() {
        return (int)33622L;
    }
    public static int GL_SGIS_point_line_texgen() {
        return (int)1L;
    }
    public static int GL_EYE_DISTANCE_TO_POINT_SGIS() {
        return (int)33264L;
    }
    public static int GL_OBJECT_DISTANCE_TO_POINT_SGIS() {
        return (int)33265L;
    }
    public static int GL_EYE_DISTANCE_TO_LINE_SGIS() {
        return (int)33266L;
    }
    public static int GL_OBJECT_DISTANCE_TO_LINE_SGIS() {
        return (int)33267L;
    }
    public static int GL_EYE_POINT_SGIS() {
        return (int)33268L;
    }
    public static int GL_OBJECT_POINT_SGIS() {
        return (int)33269L;
    }
    public static int GL_EYE_LINE_SGIS() {
        return (int)33270L;
    }
    public static int GL_OBJECT_LINE_SGIS() {
        return (int)33271L;
    }
    public static int GL_SGIS_point_parameters() {
        return (int)1L;
    }
    public static int GL_POINT_SIZE_MIN_SGIS() {
        return (int)33062L;
    }
    public static int GL_POINT_SIZE_MAX_SGIS() {
        return (int)33063L;
    }
    public static int GL_POINT_FADE_THRESHOLD_SIZE_SGIS() {
        return (int)33064L;
    }
    public static int GL_DISTANCE_ATTENUATION_SGIS() {
        return (int)33065L;
    }
    public static int GL_SGIS_sharpen_texture() {
        return (int)1L;
    }
    public static int GL_LINEAR_SHARPEN_SGIS() {
        return (int)32941L;
    }
    public static int GL_LINEAR_SHARPEN_ALPHA_SGIS() {
        return (int)32942L;
    }
    public static int GL_LINEAR_SHARPEN_COLOR_SGIS() {
        return (int)32943L;
    }
    public static int GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS() {
        return (int)32944L;
    }
    public static int GL_SGIS_texture4D() {
        return (int)1L;
    }
    public static int GL_PACK_SKIP_VOLUMES_SGIS() {
        return (int)33072L;
    }
    public static int GL_PACK_IMAGE_DEPTH_SGIS() {
        return (int)33073L;
    }
    public static int GL_UNPACK_SKIP_VOLUMES_SGIS() {
        return (int)33074L;
    }
    public static int GL_UNPACK_IMAGE_DEPTH_SGIS() {
        return (int)33075L;
    }
    public static int GL_TEXTURE_4D_SGIS() {
        return (int)33076L;
    }
    public static int GL_PROXY_TEXTURE_4D_SGIS() {
        return (int)33077L;
    }
    public static int GL_TEXTURE_4DSIZE_SGIS() {
        return (int)33078L;
    }
    public static int GL_TEXTURE_WRAP_Q_SGIS() {
        return (int)33079L;
    }
    public static int GL_MAX_4D_TEXTURE_SIZE_SGIS() {
        return (int)33080L;
    }
    public static int GL_TEXTURE_4D_BINDING_SGIS() {
        return (int)33103L;
    }
    public static int GL_SGIS_texture_border_clamp() {
        return (int)1L;
    }
    public static int GL_CLAMP_TO_BORDER_SGIS() {
        return (int)33069L;
    }
    public static int GL_SGIS_texture_color_mask() {
        return (int)1L;
    }
    public static int GL_TEXTURE_COLOR_WRITEMASK_SGIS() {
        return (int)33263L;
    }
    public static int GL_SGIS_texture_edge_clamp() {
        return (int)1L;
    }
    public static int GL_CLAMP_TO_EDGE_SGIS() {
        return (int)33071L;
    }
    public static int GL_SGIS_texture_filter4() {
        return (int)1L;
    }
    public static int GL_FILTER4_SGIS() {
        return (int)33094L;
    }
    public static int GL_TEXTURE_FILTER4_SIZE_SGIS() {
        return (int)33095L;
    }
    public static int GL_SGIS_texture_lod() {
        return (int)1L;
    }
    public static int GL_TEXTURE_MIN_LOD_SGIS() {
        return (int)33082L;
    }
    public static int GL_TEXTURE_MAX_LOD_SGIS() {
        return (int)33083L;
    }
    public static int GL_TEXTURE_BASE_LEVEL_SGIS() {
        return (int)33084L;
    }
    public static int GL_TEXTURE_MAX_LEVEL_SGIS() {
        return (int)33085L;
    }
    public static int GL_SGIS_texture_select() {
        return (int)1L;
    }
    public static int GL_DUAL_ALPHA4_SGIS() {
        return (int)33040L;
    }
    public static int GL_DUAL_ALPHA8_SGIS() {
        return (int)33041L;
    }
    public static int GL_DUAL_ALPHA12_SGIS() {
        return (int)33042L;
    }
    public static int GL_DUAL_ALPHA16_SGIS() {
        return (int)33043L;
    }
    public static int GL_DUAL_LUMINANCE4_SGIS() {
        return (int)33044L;
    }
    public static int GL_DUAL_LUMINANCE8_SGIS() {
        return (int)33045L;
    }
    public static int GL_DUAL_LUMINANCE12_SGIS() {
        return (int)33046L;
    }
    public static int GL_DUAL_LUMINANCE16_SGIS() {
        return (int)33047L;
    }
    public static int GL_DUAL_INTENSITY4_SGIS() {
        return (int)33048L;
    }
    public static int GL_DUAL_INTENSITY8_SGIS() {
        return (int)33049L;
    }
    public static int GL_DUAL_INTENSITY12_SGIS() {
        return (int)33050L;
    }
    public static int GL_DUAL_INTENSITY16_SGIS() {
        return (int)33051L;
    }
    public static int GL_DUAL_LUMINANCE_ALPHA4_SGIS() {
        return (int)33052L;
    }
    public static int GL_DUAL_LUMINANCE_ALPHA8_SGIS() {
        return (int)33053L;
    }
    public static int GL_QUAD_ALPHA4_SGIS() {
        return (int)33054L;
    }
    public static int GL_QUAD_ALPHA8_SGIS() {
        return (int)33055L;
    }
    public static int GL_QUAD_LUMINANCE4_SGIS() {
        return (int)33056L;
    }
    public static int GL_QUAD_LUMINANCE8_SGIS() {
        return (int)33057L;
    }
    public static int GL_QUAD_INTENSITY4_SGIS() {
        return (int)33058L;
    }
    public static int GL_QUAD_INTENSITY8_SGIS() {
        return (int)33059L;
    }
    public static int GL_DUAL_TEXTURE_SELECT_SGIS() {
        return (int)33060L;
    }
    public static int GL_QUAD_TEXTURE_SELECT_SGIS() {
        return (int)33061L;
    }
    public static int GL_SGIX_async() {
        return (int)1L;
    }
    public static int GL_ASYNC_MARKER_SGIX() {
        return (int)33577L;
    }
    public static int GL_SGIX_async_histogram() {
        return (int)1L;
    }
    public static int GL_ASYNC_HISTOGRAM_SGIX() {
        return (int)33580L;
    }
    public static int GL_MAX_ASYNC_HISTOGRAM_SGIX() {
        return (int)33581L;
    }
    public static int GL_SGIX_async_pixel() {
        return (int)1L;
    }
    public static int GL_ASYNC_TEX_IMAGE_SGIX() {
        return (int)33628L;
    }
    public static int GL_ASYNC_DRAW_PIXELS_SGIX() {
        return (int)33629L;
    }
    public static int GL_ASYNC_READ_PIXELS_SGIX() {
        return (int)33630L;
    }
    public static int GL_MAX_ASYNC_TEX_IMAGE_SGIX() {
        return (int)33631L;
    }
    public static int GL_MAX_ASYNC_DRAW_PIXELS_SGIX() {
        return (int)33632L;
    }
    public static int GL_MAX_ASYNC_READ_PIXELS_SGIX() {
        return (int)33633L;
    }
    public static int GL_SGIX_blend_alpha_minmax() {
        return (int)1L;
    }
    public static int GL_ALPHA_MIN_SGIX() {
        return (int)33568L;
    }
    public static int GL_ALPHA_MAX_SGIX() {
        return (int)33569L;
    }
    public static int GL_SGIX_calligraphic_fragment() {
        return (int)1L;
    }
    public static int GL_CALLIGRAPHIC_FRAGMENT_SGIX() {
        return (int)33155L;
    }
    public static int GL_SGIX_clipmap() {
        return (int)1L;
    }
    public static int GL_LINEAR_CLIPMAP_LINEAR_SGIX() {
        return (int)33136L;
    }
    public static int GL_TEXTURE_CLIPMAP_CENTER_SGIX() {
        return (int)33137L;
    }
    public static int GL_TEXTURE_CLIPMAP_FRAME_SGIX() {
        return (int)33138L;
    }
    public static int GL_TEXTURE_CLIPMAP_OFFSET_SGIX() {
        return (int)33139L;
    }
    public static int GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX() {
        return (int)33140L;
    }
    public static int GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX() {
        return (int)33141L;
    }
    public static int GL_TEXTURE_CLIPMAP_DEPTH_SGIX() {
        return (int)33142L;
    }
    public static int GL_MAX_CLIPMAP_DEPTH_SGIX() {
        return (int)33143L;
    }
    public static int GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX() {
        return (int)33144L;
    }
    public static int GL_NEAREST_CLIPMAP_NEAREST_SGIX() {
        return (int)33869L;
    }
    public static int GL_NEAREST_CLIPMAP_LINEAR_SGIX() {
        return (int)33870L;
    }
    public static int GL_LINEAR_CLIPMAP_NEAREST_SGIX() {
        return (int)33871L;
    }
    public static int GL_SGIX_convolution_accuracy() {
        return (int)1L;
    }
    public static int GL_CONVOLUTION_HINT_SGIX() {
        return (int)33558L;
    }
    public static int GL_SGIX_depth_pass_instrument() {
        return (int)1L;
    }
    public static int GL_SGIX_depth_texture() {
        return (int)1L;
    }
    public static int GL_DEPTH_COMPONENT16_SGIX() {
        return (int)33189L;
    }
    public static int GL_DEPTH_COMPONENT24_SGIX() {
        return (int)33190L;
    }
    public static int GL_DEPTH_COMPONENT32_SGIX() {
        return (int)33191L;
    }
    public static int GL_SGIX_flush_raster() {
        return (int)1L;
    }
    public static int GL_SGIX_fog_offset() {
        return (int)1L;
    }
    public static int GL_FOG_OFFSET_SGIX() {
        return (int)33176L;
    }
    public static int GL_FOG_OFFSET_VALUE_SGIX() {
        return (int)33177L;
    }
    public static int GL_SGIX_fragment_lighting() {
        return (int)1L;
    }
    public static int GL_FRAGMENT_LIGHTING_SGIX() {
        return (int)33792L;
    }
    public static int GL_FRAGMENT_COLOR_MATERIAL_SGIX() {
        return (int)33793L;
    }
    public static int GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX() {
        return (int)33794L;
    }
    public static int GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX() {
        return (int)33795L;
    }
    public static int GL_MAX_FRAGMENT_LIGHTS_SGIX() {
        return (int)33796L;
    }
    public static int GL_MAX_ACTIVE_LIGHTS_SGIX() {
        return (int)33797L;
    }
    public static int GL_CURRENT_RASTER_NORMAL_SGIX() {
        return (int)33798L;
    }
    public static int GL_LIGHT_ENV_MODE_SGIX() {
        return (int)33799L;
    }
    public static int GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX() {
        return (int)33800L;
    }
    public static int GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX() {
        return (int)33801L;
    }
    public static int GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX() {
        return (int)33802L;
    }
    public static int GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX() {
        return (int)33803L;
    }
    public static int GL_FRAGMENT_LIGHT0_SGIX() {
        return (int)33804L;
    }
    public static int GL_FRAGMENT_LIGHT1_SGIX() {
        return (int)33805L;
    }
    public static int GL_FRAGMENT_LIGHT2_SGIX() {
        return (int)33806L;
    }
    public static int GL_FRAGMENT_LIGHT3_SGIX() {
        return (int)33807L;
    }
    public static int GL_FRAGMENT_LIGHT4_SGIX() {
        return (int)33808L;
    }
    public static int GL_FRAGMENT_LIGHT5_SGIX() {
        return (int)33809L;
    }
    public static int GL_FRAGMENT_LIGHT6_SGIX() {
        return (int)33810L;
    }
    public static int GL_FRAGMENT_LIGHT7_SGIX() {
        return (int)33811L;
    }
    public static int GL_SGIX_framezoom() {
        return (int)1L;
    }
    public static int GL_FRAMEZOOM_SGIX() {
        return (int)33163L;
    }
    public static int GL_FRAMEZOOM_FACTOR_SGIX() {
        return (int)33164L;
    }
    public static int GL_MAX_FRAMEZOOM_FACTOR_SGIX() {
        return (int)33165L;
    }
    public static int GL_SGIX_igloo_interface() {
        return (int)1L;
    }
    public static int GL_SGIX_instruments() {
        return (int)1L;
    }
    public static int GL_INSTRUMENT_BUFFER_POINTER_SGIX() {
        return (int)33152L;
    }
    public static int GL_INSTRUMENT_MEASUREMENTS_SGIX() {
        return (int)33153L;
    }
    public static int GL_SGIX_interlace() {
        return (int)1L;
    }
    public static int GL_INTERLACE_SGIX() {
        return (int)32916L;
    }
    public static int GL_SGIX_ir_instrument1() {
        return (int)1L;
    }
    public static int GL_IR_INSTRUMENT1_SGIX() {
        return (int)33151L;
    }
    public static int GL_SGIX_list_priority() {
        return (int)1L;
    }
    public static int GL_LIST_PRIORITY_SGIX() {
        return (int)33154L;
    }
    public static int GL_SGIX_pixel_texture() {
        return (int)1L;
    }
    public static int GL_PIXEL_TEX_GEN_SGIX() {
        return (int)33081L;
    }
    public static int GL_PIXEL_TEX_GEN_MODE_SGIX() {
        return (int)33579L;
    }
    public static int GL_SGIX_pixel_tiles() {
        return (int)1L;
    }
    public static int GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX() {
        return (int)33086L;
    }
    public static int GL_PIXEL_TILE_CACHE_INCREMENT_SGIX() {
        return (int)33087L;
    }
    public static int GL_PIXEL_TILE_WIDTH_SGIX() {
        return (int)33088L;
    }
    public static int GL_PIXEL_TILE_HEIGHT_SGIX() {
        return (int)33089L;
    }
    public static int GL_PIXEL_TILE_GRID_WIDTH_SGIX() {
        return (int)33090L;
    }
    public static int GL_PIXEL_TILE_GRID_HEIGHT_SGIX() {
        return (int)33091L;
    }
    public static int GL_PIXEL_TILE_GRID_DEPTH_SGIX() {
        return (int)33092L;
    }
    public static int GL_PIXEL_TILE_CACHE_SIZE_SGIX() {
        return (int)33093L;
    }
    public static int GL_SGIX_polynomial_ffd() {
        return (int)1L;
    }
    public static int GL_TEXTURE_DEFORMATION_BIT_SGIX() {
        return (int)1L;
    }
    public static int GL_GEOMETRY_DEFORMATION_BIT_SGIX() {
        return (int)2L;
    }
    public static int GL_GEOMETRY_DEFORMATION_SGIX() {
        return (int)33172L;
    }
    public static int GL_TEXTURE_DEFORMATION_SGIX() {
        return (int)33173L;
    }
    public static int GL_DEFORMATIONS_MASK_SGIX() {
        return (int)33174L;
    }
    public static int GL_MAX_DEFORMATION_ORDER_SGIX() {
        return (int)33175L;
    }
    public static int GL_SGIX_reference_plane() {
        return (int)1L;
    }
    public static int GL_REFERENCE_PLANE_SGIX() {
        return (int)33149L;
    }
    public static int GL_REFERENCE_PLANE_EQUATION_SGIX() {
        return (int)33150L;
    }
    public static int GL_SGIX_resample() {
        return (int)1L;
    }
    public static int GL_PACK_RESAMPLE_SGIX() {
        return (int)33838L;
    }
    public static int GL_UNPACK_RESAMPLE_SGIX() {
        return (int)33839L;
    }
    public static int GL_RESAMPLE_REPLICATE_SGIX() {
        return (int)33843L;
    }
    public static int GL_RESAMPLE_ZERO_FILL_SGIX() {
        return (int)33844L;
    }
    public static int GL_RESAMPLE_DECIMATE_SGIX() {
        return (int)33840L;
    }
    public static int GL_SGIX_scalebias_hint() {
        return (int)1L;
    }
    public static int GL_SCALEBIAS_HINT_SGIX() {
        return (int)33570L;
    }
    public static int GL_SGIX_shadow() {
        return (int)1L;
    }
    public static int GL_TEXTURE_COMPARE_SGIX() {
        return (int)33178L;
    }
    public static int GL_TEXTURE_COMPARE_OPERATOR_SGIX() {
        return (int)33179L;
    }
    public static int GL_TEXTURE_LEQUAL_R_SGIX() {
        return (int)33180L;
    }
    public static int GL_TEXTURE_GEQUAL_R_SGIX() {
        return (int)33181L;
    }
    public static int GL_SGIX_shadow_ambient() {
        return (int)1L;
    }
    public static int GL_SHADOW_AMBIENT_SGIX() {
        return (int)32959L;
    }
    public static int GL_SGIX_sprite() {
        return (int)1L;
    }
    public static int GL_SPRITE_SGIX() {
        return (int)33096L;
    }
    public static int GL_SPRITE_MODE_SGIX() {
        return (int)33097L;
    }
    public static int GL_SPRITE_AXIS_SGIX() {
        return (int)33098L;
    }
    public static int GL_SPRITE_TRANSLATION_SGIX() {
        return (int)33099L;
    }
    public static int GL_SPRITE_AXIAL_SGIX() {
        return (int)33100L;
    }
    public static int GL_SPRITE_OBJECT_ALIGNED_SGIX() {
        return (int)33101L;
    }
    public static int GL_SPRITE_EYE_ALIGNED_SGIX() {
        return (int)33102L;
    }
    public static int GL_SGIX_subsample() {
        return (int)1L;
    }
    public static int GL_PACK_SUBSAMPLE_RATE_SGIX() {
        return (int)34208L;
    }
    public static int GL_UNPACK_SUBSAMPLE_RATE_SGIX() {
        return (int)34209L;
    }
    public static int GL_PIXEL_SUBSAMPLE_4444_SGIX() {
        return (int)34210L;
    }
    public static int GL_PIXEL_SUBSAMPLE_2424_SGIX() {
        return (int)34211L;
    }
    public static int GL_PIXEL_SUBSAMPLE_4242_SGIX() {
        return (int)34212L;
    }
    public static int GL_SGIX_tag_sample_buffer() {
        return (int)1L;
    }
    public static int GL_SGIX_texture_add_env() {
        return (int)1L;
    }
    public static int GL_TEXTURE_ENV_BIAS_SGIX() {
        return (int)32958L;
    }
    public static int GL_SGIX_texture_coordinate_clamp() {
        return (int)1L;
    }
    public static int GL_TEXTURE_MAX_CLAMP_S_SGIX() {
        return (int)33641L;
    }
    public static int GL_TEXTURE_MAX_CLAMP_T_SGIX() {
        return (int)33642L;
    }
    public static int GL_TEXTURE_MAX_CLAMP_R_SGIX() {
        return (int)33643L;
    }
    public static int GL_SGIX_texture_lod_bias() {
        return (int)1L;
    }
    public static int GL_TEXTURE_LOD_BIAS_S_SGIX() {
        return (int)33166L;
    }
    public static int GL_TEXTURE_LOD_BIAS_T_SGIX() {
        return (int)33167L;
    }
    public static int GL_TEXTURE_LOD_BIAS_R_SGIX() {
        return (int)33168L;
    }
    public static int GL_SGIX_texture_multi_buffer() {
        return (int)1L;
    }
    public static int GL_TEXTURE_MULTI_BUFFER_HINT_SGIX() {
        return (int)33070L;
    }
    public static int GL_SGIX_texture_scale_bias() {
        return (int)1L;
    }
    public static int GL_POST_TEXTURE_FILTER_BIAS_SGIX() {
        return (int)33145L;
    }
    public static int GL_POST_TEXTURE_FILTER_SCALE_SGIX() {
        return (int)33146L;
    }
    public static int GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX() {
        return (int)33147L;
    }
    public static int GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX() {
        return (int)33148L;
    }
    public static int GL_SGIX_vertex_preclip() {
        return (int)1L;
    }
    public static int GL_VERTEX_PRECLIP_SGIX() {
        return (int)33774L;
    }
    public static int GL_VERTEX_PRECLIP_HINT_SGIX() {
        return (int)33775L;
    }
    public static int GL_SGIX_ycrcb() {
        return (int)1L;
    }
    public static int GL_YCRCB_422_SGIX() {
        return (int)33211L;
    }
    public static int GL_YCRCB_444_SGIX() {
        return (int)33212L;
    }
    public static int GL_SGIX_ycrcb_subsample() {
        return (int)1L;
    }
    public static int GL_SGIX_ycrcba() {
        return (int)1L;
    }
    public static int GL_YCRCB_SGIX() {
        return (int)33560L;
    }
    public static int GL_YCRCBA_SGIX() {
        return (int)33561L;
    }
    public static int GL_SGI_color_matrix() {
        return (int)1L;
    }
    public static int GL_COLOR_MATRIX_SGI() {
        return (int)32945L;
    }
    public static int GL_COLOR_MATRIX_STACK_DEPTH_SGI() {
        return (int)32946L;
    }
    public static int GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI() {
        return (int)32947L;
    }
    public static int GL_POST_COLOR_MATRIX_RED_SCALE_SGI() {
        return (int)32948L;
    }
    public static int GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI() {
        return (int)32949L;
    }
    public static int GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI() {
        return (int)32950L;
    }
    public static int GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI() {
        return (int)32951L;
    }
    public static int GL_POST_COLOR_MATRIX_RED_BIAS_SGI() {
        return (int)32952L;
    }
    public static int GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI() {
        return (int)32953L;
    }
    public static int GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI() {
        return (int)32954L;
    }
    public static int GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI() {
        return (int)32955L;
    }
    public static int GL_SGI_color_table() {
        return (int)1L;
    }
    public static int GL_COLOR_TABLE_SGI() {
        return (int)32976L;
    }
    public static int GL_POST_CONVOLUTION_COLOR_TABLE_SGI() {
        return (int)32977L;
    }
    public static int GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI() {
        return (int)32978L;
    }
    public static int GL_PROXY_COLOR_TABLE_SGI() {
        return (int)32979L;
    }
    public static int GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI() {
        return (int)32980L;
    }
    public static int GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI() {
        return (int)32981L;
    }
    public static int GL_COLOR_TABLE_SCALE_SGI() {
        return (int)32982L;
    }
    public static int GL_COLOR_TABLE_BIAS_SGI() {
        return (int)32983L;
    }
    public static int GL_COLOR_TABLE_FORMAT_SGI() {
        return (int)32984L;
    }
    public static int GL_COLOR_TABLE_WIDTH_SGI() {
        return (int)32985L;
    }
    public static int GL_COLOR_TABLE_RED_SIZE_SGI() {
        return (int)32986L;
    }
    public static int GL_COLOR_TABLE_GREEN_SIZE_SGI() {
        return (int)32987L;
    }
    public static int GL_COLOR_TABLE_BLUE_SIZE_SGI() {
        return (int)32988L;
    }
    public static int GL_COLOR_TABLE_ALPHA_SIZE_SGI() {
        return (int)32989L;
    }
    public static int GL_COLOR_TABLE_LUMINANCE_SIZE_SGI() {
        return (int)32990L;
    }
    public static int GL_COLOR_TABLE_INTENSITY_SIZE_SGI() {
        return (int)32991L;
    }
    public static int GL_SGI_texture_color_table() {
        return (int)1L;
    }
    public static int GL_TEXTURE_COLOR_TABLE_SGI() {
        return (int)32956L;
    }
    public static int GL_PROXY_TEXTURE_COLOR_TABLE_SGI() {
        return (int)32957L;
    }
    public static int GL_SUNX_constant_data() {
        return (int)1L;
    }
    public static int GL_UNPACK_CONSTANT_DATA_SUNX() {
        return (int)33237L;
    }
    public static int GL_TEXTURE_CONSTANT_DATA_SUNX() {
        return (int)33238L;
    }
    public static int GL_SUN_convolution_border_modes() {
        return (int)1L;
    }
    public static int GL_WRAP_BORDER_SUN() {
        return (int)33236L;
    }
    public static int GL_SUN_global_alpha() {
        return (int)1L;
    }
    public static int GL_GLOBAL_ALPHA_SUN() {
        return (int)33241L;
    }
    public static int GL_GLOBAL_ALPHA_FACTOR_SUN() {
        return (int)33242L;
    }
    public static int GL_SUN_mesh_array() {
        return (int)1L;
    }
    public static int GL_QUAD_MESH_SUN() {
        return (int)34324L;
    }
    public static int GL_TRIANGLE_MESH_SUN() {
        return (int)34325L;
    }
    public static int GL_SUN_slice_accum() {
        return (int)1L;
    }
    public static int GL_SLICE_ACCUM_SUN() {
        return (int)34252L;
    }
    public static int GL_SUN_triangle_list() {
        return (int)1L;
    }
    public static int GL_RESTART_SUN() {
        return (int)1L;
    }
    public static int GL_REPLACE_MIDDLE_SUN() {
        return (int)2L;
    }
    public static int GL_REPLACE_OLDEST_SUN() {
        return (int)3L;
    }
    public static int GL_TRIANGLE_LIST_SUN() {
        return (int)33239L;
    }
    public static int GL_REPLACEMENT_CODE_SUN() {
        return (int)33240L;
    }
    public static int GL_REPLACEMENT_CODE_ARRAY_SUN() {
        return (int)34240L;
    }
    public static int GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN() {
        return (int)34241L;
    }
    public static int GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN() {
        return (int)34242L;
    }
    public static int GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN() {
        return (int)34243L;
    }
    public static int GL_R1UI_V3F_SUN() {
        return (int)34244L;
    }
    public static int GL_R1UI_C4UB_V3F_SUN() {
        return (int)34245L;
    }
    public static int GL_R1UI_C3F_V3F_SUN() {
        return (int)34246L;
    }
    public static int GL_R1UI_N3F_V3F_SUN() {
        return (int)34247L;
    }
    public static int GL_R1UI_C4F_N3F_V3F_SUN() {
        return (int)34248L;
    }
    public static int GL_R1UI_T2F_V3F_SUN() {
        return (int)34249L;
    }
    public static int GL_R1UI_T2F_N3F_V3F_SUN() {
        return (int)34250L;
    }
    public static int GL_R1UI_T2F_C4F_N3F_V3F_SUN() {
        return (int)34251L;
    }
    public static int GL_SUN_vertex() {
        return (int)1L;
    }
    public static int GL_WIN_phong_shading() {
        return (int)1L;
    }
    public static int GL_PHONG_WIN() {
        return (int)33002L;
    }
    public static int GL_PHONG_HINT_WIN() {
        return (int)33003L;
    }
    public static int GL_WIN_specular_fog() {
        return (int)1L;
    }
    public static int GL_FOG_SPECULAR_TEXTURE_WIN() {
        return (int)33004L;
    }
    public static int GL_MESA_packed_depth_stencil() {
        return (int)1L;
    }
    public static int GL_DEPTH_STENCIL_MESA() {
        return (int)34640L;
    }
    public static int GL_UNSIGNED_INT_24_8_MESA() {
        return (int)34641L;
    }
    public static int GL_UNSIGNED_INT_8_24_REV_MESA() {
        return (int)34642L;
    }
    public static int GL_UNSIGNED_SHORT_15_1_MESA() {
        return (int)34643L;
    }
    public static int GL_UNSIGNED_SHORT_1_15_REV_MESA() {
        return (int)34644L;
    }
    public static int GL_ATI_blend_equation_separate() {
        return (int)1L;
    }
    public static int GL_ALPHA_BLEND_EQUATION_ATI() {
        return (int)34877L;
    }
    public static int GL_OES_EGL_image() {
        return (int)1L;
    }
    public static int GLU_EXT_object_space_tess() {
        return (int)1L;
    }
    public static int GLU_EXT_nurbs_tessellator() {
        return (int)1L;
    }
    public static int GLU_FALSE() {
        return (int)0L;
    }
    public static int GLU_TRUE() {
        return (int)1L;
    }
    public static int GLU_VERSION_1_1() {
        return (int)1L;
    }
    public static int GLU_VERSION_1_2() {
        return (int)1L;
    }
    public static int GLU_VERSION_1_3() {
        return (int)1L;
    }
    public static int GLU_VERSION() {
        return (int)100800L;
    }
    public static int GLU_EXTENSIONS() {
        return (int)100801L;
    }
    public static int GLU_INVALID_ENUM() {
        return (int)100900L;
    }
    public static int GLU_INVALID_VALUE() {
        return (int)100901L;
    }
    public static int GLU_OUT_OF_MEMORY() {
        return (int)100902L;
    }
    public static int GLU_INCOMPATIBLE_GL_VERSION() {
        return (int)100903L;
    }
    public static int GLU_INVALID_OPERATION() {
        return (int)100904L;
    }
    public static int GLU_OUTLINE_POLYGON() {
        return (int)100240L;
    }
    public static int GLU_OUTLINE_PATCH() {
        return (int)100241L;
    }
    public static int GLU_NURBS_ERROR() {
        return (int)100103L;
    }
    public static int GLU_ERROR() {
        return (int)100103L;
    }
    public static int GLU_NURBS_BEGIN() {
        return (int)100164L;
    }
    public static int GLU_NURBS_BEGIN_EXT() {
        return (int)100164L;
    }
    public static int GLU_NURBS_VERTEX() {
        return (int)100165L;
    }
    public static int GLU_NURBS_VERTEX_EXT() {
        return (int)100165L;
    }
    public static int GLU_NURBS_NORMAL() {
        return (int)100166L;
    }
    public static int GLU_NURBS_NORMAL_EXT() {
        return (int)100166L;
    }
    public static int GLU_NURBS_COLOR() {
        return (int)100167L;
    }
    public static int GLU_NURBS_COLOR_EXT() {
        return (int)100167L;
    }
    public static int GLU_NURBS_TEXTURE_COORD() {
        return (int)100168L;
    }
    public static int GLU_NURBS_TEX_COORD_EXT() {
        return (int)100168L;
    }
    public static int GLU_NURBS_END() {
        return (int)100169L;
    }
    public static int GLU_NURBS_END_EXT() {
        return (int)100169L;
    }
    public static int GLU_NURBS_BEGIN_DATA() {
        return (int)100170L;
    }
    public static int GLU_NURBS_BEGIN_DATA_EXT() {
        return (int)100170L;
    }
    public static int GLU_NURBS_VERTEX_DATA() {
        return (int)100171L;
    }
    public static int GLU_NURBS_VERTEX_DATA_EXT() {
        return (int)100171L;
    }
    public static int GLU_NURBS_NORMAL_DATA() {
        return (int)100172L;
    }
    public static int GLU_NURBS_NORMAL_DATA_EXT() {
        return (int)100172L;
    }
    public static int GLU_NURBS_COLOR_DATA() {
        return (int)100173L;
    }
    public static int GLU_NURBS_COLOR_DATA_EXT() {
        return (int)100173L;
    }
    public static int GLU_NURBS_TEXTURE_COORD_DATA() {
        return (int)100174L;
    }
    public static int GLU_NURBS_TEX_COORD_DATA_EXT() {
        return (int)100174L;
    }
    public static int GLU_NURBS_END_DATA() {
        return (int)100175L;
    }
    public static int GLU_NURBS_END_DATA_EXT() {
        return (int)100175L;
    }
    public static int GLU_NURBS_ERROR1() {
        return (int)100251L;
    }
    public static int GLU_NURBS_ERROR2() {
        return (int)100252L;
    }
    public static int GLU_NURBS_ERROR3() {
        return (int)100253L;
    }
    public static int GLU_NURBS_ERROR4() {
        return (int)100254L;
    }
    public static int GLU_NURBS_ERROR5() {
        return (int)100255L;
    }
    public static int GLU_NURBS_ERROR6() {
        return (int)100256L;
    }
    public static int GLU_NURBS_ERROR7() {
        return (int)100257L;
    }
    public static int GLU_NURBS_ERROR8() {
        return (int)100258L;
    }
    public static int GLU_NURBS_ERROR9() {
        return (int)100259L;
    }
    public static int GLU_NURBS_ERROR10() {
        return (int)100260L;
    }
    public static int GLU_NURBS_ERROR11() {
        return (int)100261L;
    }
    public static int GLU_NURBS_ERROR12() {
        return (int)100262L;
    }
    public static int GLU_NURBS_ERROR13() {
        return (int)100263L;
    }
    public static int GLU_NURBS_ERROR14() {
        return (int)100264L;
    }
    public static int GLU_NURBS_ERROR15() {
        return (int)100265L;
    }
    public static int GLU_NURBS_ERROR16() {
        return (int)100266L;
    }
    public static int GLU_NURBS_ERROR17() {
        return (int)100267L;
    }
    public static int GLU_NURBS_ERROR18() {
        return (int)100268L;
    }
    public static int GLU_NURBS_ERROR19() {
        return (int)100269L;
    }
    public static int GLU_NURBS_ERROR20() {
        return (int)100270L;
    }
    public static int GLU_NURBS_ERROR21() {
        return (int)100271L;
    }
    public static int GLU_NURBS_ERROR22() {
        return (int)100272L;
    }
    public static int GLU_NURBS_ERROR23() {
        return (int)100273L;
    }
    public static int GLU_NURBS_ERROR24() {
        return (int)100274L;
    }
    public static int GLU_NURBS_ERROR25() {
        return (int)100275L;
    }
    public static int GLU_NURBS_ERROR26() {
        return (int)100276L;
    }
    public static int GLU_NURBS_ERROR27() {
        return (int)100277L;
    }
    public static int GLU_NURBS_ERROR28() {
        return (int)100278L;
    }
    public static int GLU_NURBS_ERROR29() {
        return (int)100279L;
    }
    public static int GLU_NURBS_ERROR30() {
        return (int)100280L;
    }
    public static int GLU_NURBS_ERROR31() {
        return (int)100281L;
    }
    public static int GLU_NURBS_ERROR32() {
        return (int)100282L;
    }
    public static int GLU_NURBS_ERROR33() {
        return (int)100283L;
    }
    public static int GLU_NURBS_ERROR34() {
        return (int)100284L;
    }
    public static int GLU_NURBS_ERROR35() {
        return (int)100285L;
    }
    public static int GLU_NURBS_ERROR36() {
        return (int)100286L;
    }
    public static int GLU_NURBS_ERROR37() {
        return (int)100287L;
    }
    public static int GLU_AUTO_LOAD_MATRIX() {
        return (int)100200L;
    }
    public static int GLU_CULLING() {
        return (int)100201L;
    }
    public static int GLU_SAMPLING_TOLERANCE() {
        return (int)100203L;
    }
    public static int GLU_DISPLAY_MODE() {
        return (int)100204L;
    }
    public static int GLU_PARAMETRIC_TOLERANCE() {
        return (int)100202L;
    }
    public static int GLU_SAMPLING_METHOD() {
        return (int)100205L;
    }
    public static int GLU_U_STEP() {
        return (int)100206L;
    }
    public static int GLU_V_STEP() {
        return (int)100207L;
    }
    public static int GLU_NURBS_MODE() {
        return (int)100160L;
    }
    public static int GLU_NURBS_MODE_EXT() {
        return (int)100160L;
    }
    public static int GLU_NURBS_TESSELLATOR() {
        return (int)100161L;
    }
    public static int GLU_NURBS_TESSELLATOR_EXT() {
        return (int)100161L;
    }
    public static int GLU_NURBS_RENDERER() {
        return (int)100162L;
    }
    public static int GLU_NURBS_RENDERER_EXT() {
        return (int)100162L;
    }
    public static int GLU_OBJECT_PARAMETRIC_ERROR() {
        return (int)100208L;
    }
    public static int GLU_OBJECT_PARAMETRIC_ERROR_EXT() {
        return (int)100208L;
    }
    public static int GLU_OBJECT_PATH_LENGTH() {
        return (int)100209L;
    }
    public static int GLU_OBJECT_PATH_LENGTH_EXT() {
        return (int)100209L;
    }
    public static int GLU_PATH_LENGTH() {
        return (int)100215L;
    }
    public static int GLU_PARAMETRIC_ERROR() {
        return (int)100216L;
    }
    public static int GLU_DOMAIN_DISTANCE() {
        return (int)100217L;
    }
    public static int GLU_MAP1_TRIM_2() {
        return (int)100210L;
    }
    public static int GLU_MAP1_TRIM_3() {
        return (int)100211L;
    }
    public static int GLU_POINT() {
        return (int)100010L;
    }
    public static int GLU_LINE() {
        return (int)100011L;
    }
    public static int GLU_FILL() {
        return (int)100012L;
    }
    public static int GLU_SILHOUETTE() {
        return (int)100013L;
    }
    public static int GLU_SMOOTH() {
        return (int)100000L;
    }
    public static int GLU_FLAT() {
        return (int)100001L;
    }
    public static int GLU_NONE() {
        return (int)100002L;
    }
    public static int GLU_OUTSIDE() {
        return (int)100020L;
    }
    public static int GLU_INSIDE() {
        return (int)100021L;
    }
    public static int GLU_TESS_BEGIN() {
        return (int)100100L;
    }
    public static int GLU_BEGIN() {
        return (int)100100L;
    }
    public static int GLU_TESS_VERTEX() {
        return (int)100101L;
    }
    public static int GLU_VERTEX() {
        return (int)100101L;
    }
    public static int GLU_TESS_END() {
        return (int)100102L;
    }
    public static int GLU_END() {
        return (int)100102L;
    }
    public static int GLU_TESS_ERROR() {
        return (int)100103L;
    }
    public static int GLU_TESS_EDGE_FLAG() {
        return (int)100104L;
    }
    public static int GLU_EDGE_FLAG() {
        return (int)100104L;
    }
    public static int GLU_TESS_COMBINE() {
        return (int)100105L;
    }
    public static int GLU_TESS_BEGIN_DATA() {
        return (int)100106L;
    }
    public static int GLU_TESS_VERTEX_DATA() {
        return (int)100107L;
    }
    public static int GLU_TESS_END_DATA() {
        return (int)100108L;
    }
    public static int GLU_TESS_ERROR_DATA() {
        return (int)100109L;
    }
    public static int GLU_TESS_EDGE_FLAG_DATA() {
        return (int)100110L;
    }
    public static int GLU_TESS_COMBINE_DATA() {
        return (int)100111L;
    }
    public static int GLU_CW() {
        return (int)100120L;
    }
    public static int GLU_CCW() {
        return (int)100121L;
    }
    public static int GLU_INTERIOR() {
        return (int)100122L;
    }
    public static int GLU_EXTERIOR() {
        return (int)100123L;
    }
    public static int GLU_UNKNOWN() {
        return (int)100124L;
    }
    public static int GLU_TESS_WINDING_RULE() {
        return (int)100140L;
    }
    public static int GLU_TESS_BOUNDARY_ONLY() {
        return (int)100141L;
    }
    public static int GLU_TESS_TOLERANCE() {
        return (int)100142L;
    }
    public static int GLU_TESS_ERROR1() {
        return (int)100151L;
    }
    public static int GLU_TESS_ERROR2() {
        return (int)100152L;
    }
    public static int GLU_TESS_ERROR3() {
        return (int)100153L;
    }
    public static int GLU_TESS_ERROR4() {
        return (int)100154L;
    }
    public static int GLU_TESS_ERROR5() {
        return (int)100155L;
    }
    public static int GLU_TESS_ERROR6() {
        return (int)100156L;
    }
    public static int GLU_TESS_ERROR7() {
        return (int)100157L;
    }
    public static int GLU_TESS_ERROR8() {
        return (int)100158L;
    }
    public static int GLU_TESS_MISSING_BEGIN_POLYGON() {
        return (int)100151L;
    }
    public static int GLU_TESS_MISSING_BEGIN_CONTOUR() {
        return (int)100152L;
    }
    public static int GLU_TESS_MISSING_END_POLYGON() {
        return (int)100153L;
    }
    public static int GLU_TESS_MISSING_END_CONTOUR() {
        return (int)100154L;
    }
    public static int GLU_TESS_COORD_TOO_LARGE() {
        return (int)100155L;
    }
    public static int GLU_TESS_NEED_COMBINE_CALLBACK() {
        return (int)100156L;
    }
    public static int GLU_TESS_WINDING_ODD() {
        return (int)100130L;
    }
    public static int GLU_TESS_WINDING_NONZERO() {
        return (int)100131L;
    }
    public static int GLU_TESS_WINDING_POSITIVE() {
        return (int)100132L;
    }
    public static int GLU_TESS_WINDING_NEGATIVE() {
        return (int)100133L;
    }
    public static int GLU_TESS_WINDING_ABS_GEQ_TWO() {
        return (int)100134L;
    }
    public static int GLUT_KEY_F1() {
        return (int)1L;
    }
    public static int GLUT_KEY_F2() {
        return (int)2L;
    }
    public static int GLUT_KEY_F3() {
        return (int)3L;
    }
    public static int GLUT_KEY_F4() {
        return (int)4L;
    }
    public static int GLUT_KEY_F5() {
        return (int)5L;
    }
    public static int GLUT_KEY_F6() {
        return (int)6L;
    }
    public static int GLUT_KEY_F7() {
        return (int)7L;
    }
    public static int GLUT_KEY_F8() {
        return (int)8L;
    }
    public static int GLUT_KEY_F9() {
        return (int)9L;
    }
    public static int GLUT_KEY_F10() {
        return (int)10L;
    }
    public static int GLUT_KEY_F11() {
        return (int)11L;
    }
    public static int GLUT_KEY_F12() {
        return (int)12L;
    }
    public static int GLUT_KEY_LEFT() {
        return (int)100L;
    }
    public static int GLUT_KEY_UP() {
        return (int)101L;
    }
    public static int GLUT_KEY_RIGHT() {
        return (int)102L;
    }
    public static int GLUT_KEY_DOWN() {
        return (int)103L;
    }
    public static int GLUT_KEY_PAGE_UP() {
        return (int)104L;
    }
    public static int GLUT_KEY_PAGE_DOWN() {
        return (int)105L;
    }
    public static int GLUT_KEY_HOME() {
        return (int)106L;
    }
    public static int GLUT_KEY_END() {
        return (int)107L;
    }
    public static int GLUT_KEY_INSERT() {
        return (int)108L;
    }
    public static int GLUT_LEFT_BUTTON() {
        return (int)0L;
    }
    public static int GLUT_MIDDLE_BUTTON() {
        return (int)1L;
    }
    public static int GLUT_RIGHT_BUTTON() {
        return (int)2L;
    }
    public static int GLUT_DOWN() {
        return (int)0L;
    }
    public static int GLUT_UP() {
        return (int)1L;
    }
    public static int GLUT_LEFT() {
        return (int)0L;
    }
    public static int GLUT_ENTERED() {
        return (int)1L;
    }
    public static int GLUT_RGB() {
        return (int)0L;
    }
    public static int GLUT_RGBA() {
        return (int)0L;
    }
    public static int GLUT_INDEX() {
        return (int)1L;
    }
    public static int GLUT_SINGLE() {
        return (int)0L;
    }
    public static int GLUT_DOUBLE() {
        return (int)2L;
    }
    public static int GLUT_ACCUM() {
        return (int)4L;
    }
    public static int GLUT_ALPHA() {
        return (int)8L;
    }
    public static int GLUT_DEPTH() {
        return (int)16L;
    }
    public static int GLUT_STENCIL() {
        return (int)32L;
    }
    public static int GLUT_MULTISAMPLE() {
        return (int)128L;
    }
    public static int GLUT_STEREO() {
        return (int)256L;
    }
    public static int GLUT_LUMINANCE() {
        return (int)512L;
    }
    public static int GLUT_MENU_NOT_IN_USE() {
        return (int)0L;
    }
    public static int GLUT_MENU_IN_USE() {
        return (int)1L;
    }
    public static int GLUT_NOT_VISIBLE() {
        return (int)0L;
    }
    public static int GLUT_VISIBLE() {
        return (int)1L;
    }
    public static int GLUT_HIDDEN() {
        return (int)0L;
    }
    public static int GLUT_FULLY_RETAINED() {
        return (int)1L;
    }
    public static int GLUT_PARTIALLY_RETAINED() {
        return (int)2L;
    }
    public static int GLUT_FULLY_COVERED() {
        return (int)3L;
    }
    public static int GLUT_WINDOW_X() {
        return (int)100L;
    }
    public static int GLUT_WINDOW_Y() {
        return (int)101L;
    }
    public static int GLUT_WINDOW_WIDTH() {
        return (int)102L;
    }
    public static int GLUT_WINDOW_HEIGHT() {
        return (int)103L;
    }
    public static int GLUT_WINDOW_BUFFER_SIZE() {
        return (int)104L;
    }
    public static int GLUT_WINDOW_STENCIL_SIZE() {
        return (int)105L;
    }
    public static int GLUT_WINDOW_DEPTH_SIZE() {
        return (int)106L;
    }
    public static int GLUT_WINDOW_RED_SIZE() {
        return (int)107L;
    }
    public static int GLUT_WINDOW_GREEN_SIZE() {
        return (int)108L;
    }
    public static int GLUT_WINDOW_BLUE_SIZE() {
        return (int)109L;
    }
    public static int GLUT_WINDOW_ALPHA_SIZE() {
        return (int)110L;
    }
    public static int GLUT_WINDOW_ACCUM_RED_SIZE() {
        return (int)111L;
    }
    public static int GLUT_WINDOW_ACCUM_GREEN_SIZE() {
        return (int)112L;
    }
    public static int GLUT_WINDOW_ACCUM_BLUE_SIZE() {
        return (int)113L;
    }
    public static int GLUT_WINDOW_ACCUM_ALPHA_SIZE() {
        return (int)114L;
    }
    public static int GLUT_WINDOW_DOUBLEBUFFER() {
        return (int)115L;
    }
    public static int GLUT_WINDOW_RGBA() {
        return (int)116L;
    }
    public static int GLUT_WINDOW_PARENT() {
        return (int)117L;
    }
    public static int GLUT_WINDOW_NUM_CHILDREN() {
        return (int)118L;
    }
    public static int GLUT_WINDOW_COLORMAP_SIZE() {
        return (int)119L;
    }
    public static int GLUT_WINDOW_NUM_SAMPLES() {
        return (int)120L;
    }
    public static int GLUT_WINDOW_STEREO() {
        return (int)121L;
    }
    public static int GLUT_WINDOW_CURSOR() {
        return (int)122L;
    }
    public static int GLUT_SCREEN_WIDTH() {
        return (int)200L;
    }
    public static int GLUT_SCREEN_HEIGHT() {
        return (int)201L;
    }
    public static int GLUT_SCREEN_WIDTH_MM() {
        return (int)202L;
    }
    public static int GLUT_SCREEN_HEIGHT_MM() {
        return (int)203L;
    }
    public static int GLUT_MENU_NUM_ITEMS() {
        return (int)300L;
    }
    public static int GLUT_DISPLAY_MODE_POSSIBLE() {
        return (int)400L;
    }
    public static int GLUT_INIT_WINDOW_X() {
        return (int)500L;
    }
    public static int GLUT_INIT_WINDOW_Y() {
        return (int)501L;
    }
    public static int GLUT_INIT_WINDOW_WIDTH() {
        return (int)502L;
    }
    public static int GLUT_INIT_WINDOW_HEIGHT() {
        return (int)503L;
    }
    public static int GLUT_INIT_DISPLAY_MODE() {
        return (int)504L;
    }
    public static int GLUT_ELAPSED_TIME() {
        return (int)700L;
    }
    public static int GLUT_WINDOW_FORMAT_ID() {
        return (int)123L;
    }
    public static int GLUT_HAS_KEYBOARD() {
        return (int)600L;
    }
    public static int GLUT_HAS_MOUSE() {
        return (int)601L;
    }
    public static int GLUT_HAS_SPACEBALL() {
        return (int)602L;
    }
    public static int GLUT_HAS_DIAL_AND_BUTTON_BOX() {
        return (int)603L;
    }
    public static int GLUT_HAS_TABLET() {
        return (int)604L;
    }
    public static int GLUT_NUM_MOUSE_BUTTONS() {
        return (int)605L;
    }
    public static int GLUT_NUM_SPACEBALL_BUTTONS() {
        return (int)606L;
    }
    public static int GLUT_NUM_BUTTON_BOX_BUTTONS() {
        return (int)607L;
    }
    public static int GLUT_NUM_DIALS() {
        return (int)608L;
    }
    public static int GLUT_NUM_TABLET_BUTTONS() {
        return (int)609L;
    }
    public static int GLUT_DEVICE_IGNORE_KEY_REPEAT() {
        return (int)610L;
    }
    public static int GLUT_DEVICE_KEY_REPEAT() {
        return (int)611L;
    }
    public static int GLUT_HAS_JOYSTICK() {
        return (int)612L;
    }
    public static int GLUT_OWNS_JOYSTICK() {
        return (int)613L;
    }
    public static int GLUT_JOYSTICK_BUTTONS() {
        return (int)614L;
    }
    public static int GLUT_JOYSTICK_AXES() {
        return (int)615L;
    }
    public static int GLUT_JOYSTICK_POLL_RATE() {
        return (int)616L;
    }
    public static int GLUT_OVERLAY_POSSIBLE() {
        return (int)800L;
    }
    public static int GLUT_LAYER_IN_USE() {
        return (int)801L;
    }
    public static int GLUT_HAS_OVERLAY() {
        return (int)802L;
    }
    public static int GLUT_TRANSPARENT_INDEX() {
        return (int)803L;
    }
    public static int GLUT_NORMAL_DAMAGED() {
        return (int)804L;
    }
    public static int GLUT_OVERLAY_DAMAGED() {
        return (int)805L;
    }
    public static int GLUT_VIDEO_RESIZE_POSSIBLE() {
        return (int)900L;
    }
    public static int GLUT_VIDEO_RESIZE_IN_USE() {
        return (int)901L;
    }
    public static int GLUT_VIDEO_RESIZE_X_DELTA() {
        return (int)902L;
    }
    public static int GLUT_VIDEO_RESIZE_Y_DELTA() {
        return (int)903L;
    }
    public static int GLUT_VIDEO_RESIZE_WIDTH_DELTA() {
        return (int)904L;
    }
    public static int GLUT_VIDEO_RESIZE_HEIGHT_DELTA() {
        return (int)905L;
    }
    public static int GLUT_VIDEO_RESIZE_X() {
        return (int)906L;
    }
    public static int GLUT_VIDEO_RESIZE_Y() {
        return (int)907L;
    }
    public static int GLUT_VIDEO_RESIZE_WIDTH() {
        return (int)908L;
    }
    public static int GLUT_VIDEO_RESIZE_HEIGHT() {
        return (int)909L;
    }
    public static int GLUT_NORMAL() {
        return (int)0L;
    }
    public static int GLUT_OVERLAY() {
        return (int)1L;
    }
    public static int GLUT_ACTIVE_SHIFT() {
        return (int)1L;
    }
    public static int GLUT_ACTIVE_CTRL() {
        return (int)2L;
    }
    public static int GLUT_ACTIVE_ALT() {
        return (int)4L;
    }
    public static int GLUT_CURSOR_RIGHT_ARROW() {
        return (int)0L;
    }
    public static int GLUT_CURSOR_LEFT_ARROW() {
        return (int)1L;
    }
    public static int GLUT_CURSOR_INFO() {
        return (int)2L;
    }
    public static int GLUT_CURSOR_DESTROY() {
        return (int)3L;
    }
    public static int GLUT_CURSOR_HELP() {
        return (int)4L;
    }
    public static int GLUT_CURSOR_CYCLE() {
        return (int)5L;
    }
    public static int GLUT_CURSOR_SPRAY() {
        return (int)6L;
    }
    public static int GLUT_CURSOR_WAIT() {
        return (int)7L;
    }
    public static int GLUT_CURSOR_TEXT() {
        return (int)8L;
    }
    public static int GLUT_CURSOR_CROSSHAIR() {
        return (int)9L;
    }
    public static int GLUT_CURSOR_UP_DOWN() {
        return (int)10L;
    }
    public static int GLUT_CURSOR_LEFT_RIGHT() {
        return (int)11L;
    }
    public static int GLUT_CURSOR_TOP_SIDE() {
        return (int)12L;
    }
    public static int GLUT_CURSOR_BOTTOM_SIDE() {
        return (int)13L;
    }
    public static int GLUT_CURSOR_LEFT_SIDE() {
        return (int)14L;
    }
    public static int GLUT_CURSOR_RIGHT_SIDE() {
        return (int)15L;
    }
    public static int GLUT_CURSOR_TOP_LEFT_CORNER() {
        return (int)16L;
    }
    public static int GLUT_CURSOR_TOP_RIGHT_CORNER() {
        return (int)17L;
    }
    public static int GLUT_CURSOR_BOTTOM_RIGHT_CORNER() {
        return (int)18L;
    }
    public static int GLUT_CURSOR_BOTTOM_LEFT_CORNER() {
        return (int)19L;
    }
    public static int GLUT_CURSOR_INHERIT() {
        return (int)100L;
    }
    public static int GLUT_CURSOR_NONE() {
        return (int)101L;
    }
    public static int GLUT_CURSOR_FULL_CROSSHAIR() {
        return (int)102L;
    }
    public static int GLUT_RED() {
        return (int)0L;
    }
    public static int GLUT_GREEN() {
        return (int)1L;
    }
    public static int GLUT_BLUE() {
        return (int)2L;
    }
    public static int GLUT_KEY_REPEAT_OFF() {
        return (int)0L;
    }
    public static int GLUT_KEY_REPEAT_ON() {
        return (int)1L;
    }
    public static int GLUT_KEY_REPEAT_DEFAULT() {
        return (int)2L;
    }
    public static int GLUT_JOYSTICK_BUTTON_A() {
        return (int)1L;
    }
    public static int GLUT_JOYSTICK_BUTTON_B() {
        return (int)2L;
    }
    public static int GLUT_JOYSTICK_BUTTON_C() {
        return (int)4L;
    }
    public static int GLUT_JOYSTICK_BUTTON_D() {
        return (int)8L;
    }
    public static int GLUT_GAME_MODE_ACTIVE() {
        return (int)0L;
    }
    public static int GLUT_GAME_MODE_POSSIBLE() {
        return (int)1L;
    }
    public static int GLUT_GAME_MODE_WIDTH() {
        return (int)2L;
    }
    public static int GLUT_GAME_MODE_HEIGHT() {
        return (int)3L;
    }
    public static int GLUT_GAME_MODE_PIXEL_DEPTH() {
        return (int)4L;
    }
    public static int GLUT_GAME_MODE_REFRESH_RATE() {
        return (int)5L;
    }
    public static int GLUT_GAME_MODE_DISPLAY_CHANGED() {
        return (int)6L;
    }
    public static int _STDLIB_H() {
        return (int)1L;
    }
    public static int WNOHANG() {
        return (int)1L;
    }
    public static int WUNTRACED() {
        return (int)2L;
    }
    public static int WSTOPPED() {
        return (int)2L;
    }
    public static int WEXITED() {
        return (int)4L;
    }
    public static int WCONTINUED() {
        return (int)8L;
    }
    public static int WNOWAIT() {
        return (int)16777216L;
    }
    public static int __WNOTHREAD() {
        return (int)536870912L;
    }
    public static int __WALL() {
        return (int)1073741824L;
    }
    public static int __ENUM_IDTYPE_T() {
        return (int)1L;
    }
    public static int __W_CONTINUED() {
        return (int)65535L;
    }
    public static int __WCOREFLAG() {
        return (int)128L;
    }
    public static int __HAVE_FLOAT128() {
        return (int)0L;
    }
    public static int __HAVE_DISTINCT_FLOAT128() {
        return (int)0L;
    }
    public static int __HAVE_FLOAT64X() {
        return (int)1L;
    }
    public static int __HAVE_FLOAT64X_LONG_DOUBLE() {
        return (int)1L;
    }
    public static int __HAVE_FLOAT16() {
        return (int)0L;
    }
    public static int __HAVE_FLOAT32() {
        return (int)1L;
    }
    public static int __HAVE_FLOAT64() {
        return (int)1L;
    }
    public static int __HAVE_FLOAT32X() {
        return (int)1L;
    }
    public static int __HAVE_FLOAT128X() {
        return (int)0L;
    }
    public static int __HAVE_DISTINCT_FLOAT32() {
        return (int)0L;
    }
    public static int __HAVE_DISTINCT_FLOAT64() {
        return (int)0L;
    }
    public static int __HAVE_DISTINCT_FLOAT32X() {
        return (int)0L;
    }
    public static int __HAVE_DISTINCT_FLOAT64X() {
        return (int)0L;
    }
    public static int __HAVE_FLOATN_NOT_TYPEDEF() {
        return (int)0L;
    }
    public static int __ldiv_t_defined() {
        return (int)1L;
    }
    public static int __lldiv_t_defined() {
        return (int)1L;
    }
    public static int RAND_MAX() {
        return (int)2147483647L;
    }
    public static int EXIT_FAILURE() {
        return (int)1L;
    }
    public static int EXIT_SUCCESS() {
        return (int)0L;
    }
    public static int _SYS_TYPES_H() {
        return (int)1L;
    }
    public static int __clock_t_defined() {
        return (int)1L;
    }
    public static int __clockid_t_defined() {
        return (int)1L;
    }
    public static int __time_t_defined() {
        return (int)1L;
    }
    public static int __timer_t_defined() {
        return (int)1L;
    }
    public static int __BIT_TYPES_DEFINED__() {
        return (int)1L;
    }
    public static int _ENDIAN_H() {
        return (int)1L;
    }
    public static int __LITTLE_ENDIAN() {
        return (int)1234L;
    }
    public static int __BIG_ENDIAN() {
        return (int)4321L;
    }
    public static int __PDP_ENDIAN() {
        return (int)3412L;
    }
    public static int _BITS_BYTESWAP_H() {
        return (int)1L;
    }
    public static int _BITS_UINTN_IDENTITY_H() {
        return (int)1L;
    }
    public static int _SYS_SELECT_H() {
        return (int)1L;
    }
    public static int __sigset_t_defined() {
        return (int)1L;
    }
    public static int __timeval_defined() {
        return (int)1L;
    }
    public static int _STRUCT_TIMESPEC() {
        return (int)1L;
    }
    public static int _BITS_PTHREADTYPES_COMMON_H() {
        return (int)1L;
    }
    public static int _THREAD_SHARED_TYPES_H() {
        return (int)1L;
    }
    public static int _BITS_PTHREADTYPES_ARCH_H() {
        return (int)1L;
    }
    public static int __SIZEOF_PTHREAD_MUTEX_T() {
        return (int)40L;
    }
    public static int __SIZEOF_PTHREAD_ATTR_T() {
        return (int)56L;
    }
    public static int __SIZEOF_PTHREAD_RWLOCK_T() {
        return (int)56L;
    }
    public static int __SIZEOF_PTHREAD_BARRIER_T() {
        return (int)32L;
    }
    public static int __SIZEOF_PTHREAD_MUTEXATTR_T() {
        return (int)4L;
    }
    public static int __SIZEOF_PTHREAD_COND_T() {
        return (int)48L;
    }
    public static int __SIZEOF_PTHREAD_CONDATTR_T() {
        return (int)4L;
    }
    public static int __SIZEOF_PTHREAD_RWLOCKATTR_T() {
        return (int)8L;
    }
    public static int __SIZEOF_PTHREAD_BARRIERATTR_T() {
        return (int)4L;
    }
    public static int __PTHREAD_MUTEX_LOCK_ELISION() {
        return (int)1L;
    }
    public static int __PTHREAD_MUTEX_NUSERS_AFTER_KIND() {
        return (int)0L;
    }
    public static int __PTHREAD_MUTEX_USE_UNION() {
        return (int)0L;
    }
    public static int __PTHREAD_RWLOCK_INT_FLAGS_SHARED() {
        return (int)1L;
    }
    public static int __PTHREAD_MUTEX_HAVE_PREV() {
        return (int)1L;
    }
    public static int __have_pthread_attr_t() {
        return (int)1L;
    }
    public static int _ALLOCA_H() {
        return (int)1L;
    }
    public static ValueLayout GLshort = C_SHORT;
    public static ValueLayout GLint = C_INT;
    public static ValueLayout GLsizei = C_INT;
    public static ValueLayout GLfloat = C_FLOAT;
    public static ValueLayout GLclampf = C_FLOAT;
    public static ValueLayout GLdouble = C_DOUBLE;
    public static ValueLayout GLclampd = C_DOUBLE;
    public static MethodHandle glClearIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$0.glClearIndex$MH,"glClearIndex");
    }
    public static void glClearIndex ( float c) {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.glClearIndex$MH, "glClearIndex");
        try {
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClearColor$MH() {
        return RuntimeHelper.requireNonNull(constants$0.glClearColor$MH,"glClearColor");
    }
    public static void glClearColor ( float red,  float green,  float blue,  float alpha) {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.glClearColor$MH, "glClearColor");
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClear$MH() {
        return RuntimeHelper.requireNonNull(constants$0.glClear$MH,"glClear");
    }
    public static void glClear ( int mask) {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.glClear$MH, "glClear");
        try {
            mh$.invokeExact(mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexMask$MH() {
        return RuntimeHelper.requireNonNull(constants$0.glIndexMask$MH,"glIndexMask");
    }
    public static void glIndexMask ( int mask) {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.glIndexMask$MH, "glIndexMask");
        try {
            mh$.invokeExact(mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColorMask$MH() {
        return RuntimeHelper.requireNonNull(constants$0.glColorMask$MH,"glColorMask");
    }
    public static void glColorMask ( byte red,  byte green,  byte blue,  byte alpha) {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.glColorMask$MH, "glColorMask");
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glAlphaFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$0.glAlphaFunc$MH,"glAlphaFunc");
    }
    public static void glAlphaFunc ( int func,  float ref) {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.glAlphaFunc$MH, "glAlphaFunc");
        try {
            mh$.invokeExact(func, ref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBlendFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$1.glBlendFunc$MH,"glBlendFunc");
    }
    public static void glBlendFunc ( int sfactor,  int dfactor) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1.glBlendFunc$MH, "glBlendFunc");
        try {
            mh$.invokeExact(sfactor, dfactor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLogicOp$MH() {
        return RuntimeHelper.requireNonNull(constants$1.glLogicOp$MH,"glLogicOp");
    }
    public static void glLogicOp ( int opcode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1.glLogicOp$MH, "glLogicOp");
        try {
            mh$.invokeExact(opcode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCullFace$MH() {
        return RuntimeHelper.requireNonNull(constants$1.glCullFace$MH,"glCullFace");
    }
    public static void glCullFace ( int mode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1.glCullFace$MH, "glCullFace");
        try {
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFrontFace$MH() {
        return RuntimeHelper.requireNonNull(constants$1.glFrontFace$MH,"glFrontFace");
    }
    public static void glFrontFace ( int mode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1.glFrontFace$MH, "glFrontFace");
        try {
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPointSize$MH() {
        return RuntimeHelper.requireNonNull(constants$1.glPointSize$MH,"glPointSize");
    }
    public static void glPointSize ( float size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1.glPointSize$MH, "glPointSize");
        try {
            mh$.invokeExact(size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLineWidth$MH() {
        return RuntimeHelper.requireNonNull(constants$1.glLineWidth$MH,"glLineWidth");
    }
    public static void glLineWidth ( float width) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1.glLineWidth$MH, "glLineWidth");
        try {
            mh$.invokeExact(width);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLineStipple$MH() {
        return RuntimeHelper.requireNonNull(constants$2.glLineStipple$MH,"glLineStipple");
    }
    public static void glLineStipple ( int factor,  short pattern) {
        var mh$ = RuntimeHelper.requireNonNull(constants$2.glLineStipple$MH, "glLineStipple");
        try {
            mh$.invokeExact(factor, pattern);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPolygonMode$MH() {
        return RuntimeHelper.requireNonNull(constants$2.glPolygonMode$MH,"glPolygonMode");
    }
    public static void glPolygonMode ( int face,  int mode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$2.glPolygonMode$MH, "glPolygonMode");
        try {
            mh$.invokeExact(face, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPolygonOffset$MH() {
        return RuntimeHelper.requireNonNull(constants$2.glPolygonOffset$MH,"glPolygonOffset");
    }
    public static void glPolygonOffset ( float factor,  float units) {
        var mh$ = RuntimeHelper.requireNonNull(constants$2.glPolygonOffset$MH, "glPolygonOffset");
        try {
            mh$.invokeExact(factor, units);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPolygonStipple$MH() {
        return RuntimeHelper.requireNonNull(constants$2.glPolygonStipple$MH,"glPolygonStipple");
    }
    public static void glPolygonStipple ( Addressable mask) {
        var mh$ = RuntimeHelper.requireNonNull(constants$2.glPolygonStipple$MH, "glPolygonStipple");
        try {
            mh$.invokeExact(mask.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetPolygonStipple$MH() {
        return RuntimeHelper.requireNonNull(constants$2.glGetPolygonStipple$MH,"glGetPolygonStipple");
    }
    public static void glGetPolygonStipple ( Addressable mask) {
        var mh$ = RuntimeHelper.requireNonNull(constants$2.glGetPolygonStipple$MH, "glGetPolygonStipple");
        try {
            mh$.invokeExact(mask.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEdgeFlag$MH() {
        return RuntimeHelper.requireNonNull(constants$2.glEdgeFlag$MH,"glEdgeFlag");
    }
    public static void glEdgeFlag ( byte flag) {
        var mh$ = RuntimeHelper.requireNonNull(constants$2.glEdgeFlag$MH, "glEdgeFlag");
        try {
            mh$.invokeExact(flag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEdgeFlagv$MH() {
        return RuntimeHelper.requireNonNull(constants$3.glEdgeFlagv$MH,"glEdgeFlagv");
    }
    public static void glEdgeFlagv ( Addressable flag) {
        var mh$ = RuntimeHelper.requireNonNull(constants$3.glEdgeFlagv$MH, "glEdgeFlagv");
        try {
            mh$.invokeExact(flag.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glScissor$MH() {
        return RuntimeHelper.requireNonNull(constants$3.glScissor$MH,"glScissor");
    }
    public static void glScissor ( int x,  int y,  int width,  int height) {
        var mh$ = RuntimeHelper.requireNonNull(constants$3.glScissor$MH, "glScissor");
        try {
            mh$.invokeExact(x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClipPlane$MH() {
        return RuntimeHelper.requireNonNull(constants$3.glClipPlane$MH,"glClipPlane");
    }
    public static void glClipPlane ( int plane,  Addressable equation) {
        var mh$ = RuntimeHelper.requireNonNull(constants$3.glClipPlane$MH, "glClipPlane");
        try {
            mh$.invokeExact(plane, equation.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetClipPlane$MH() {
        return RuntimeHelper.requireNonNull(constants$3.glGetClipPlane$MH,"glGetClipPlane");
    }
    public static void glGetClipPlane ( int plane,  Addressable equation) {
        var mh$ = RuntimeHelper.requireNonNull(constants$3.glGetClipPlane$MH, "glGetClipPlane");
        try {
            mh$.invokeExact(plane, equation.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$3.glDrawBuffer$MH,"glDrawBuffer");
    }
    public static void glDrawBuffer ( int mode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$3.glDrawBuffer$MH, "glDrawBuffer");
        try {
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glReadBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$3.glReadBuffer$MH,"glReadBuffer");
    }
    public static void glReadBuffer ( int mode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$3.glReadBuffer$MH, "glReadBuffer");
        try {
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEnable$MH() {
        return RuntimeHelper.requireNonNull(constants$4.glEnable$MH,"glEnable");
    }
    public static void glEnable ( int cap) {
        var mh$ = RuntimeHelper.requireNonNull(constants$4.glEnable$MH, "glEnable");
        try {
            mh$.invokeExact(cap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDisable$MH() {
        return RuntimeHelper.requireNonNull(constants$4.glDisable$MH,"glDisable");
    }
    public static void glDisable ( int cap) {
        var mh$ = RuntimeHelper.requireNonNull(constants$4.glDisable$MH, "glDisable");
        try {
            mh$.invokeExact(cap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIsEnabled$MH() {
        return RuntimeHelper.requireNonNull(constants$4.glIsEnabled$MH,"glIsEnabled");
    }
    public static byte glIsEnabled ( int cap) {
        var mh$ = RuntimeHelper.requireNonNull(constants$4.glIsEnabled$MH, "glIsEnabled");
        try {
            return (byte)mh$.invokeExact(cap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEnableClientState$MH() {
        return RuntimeHelper.requireNonNull(constants$4.glEnableClientState$MH,"glEnableClientState");
    }
    public static void glEnableClientState ( int cap) {
        var mh$ = RuntimeHelper.requireNonNull(constants$4.glEnableClientState$MH, "glEnableClientState");
        try {
            mh$.invokeExact(cap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDisableClientState$MH() {
        return RuntimeHelper.requireNonNull(constants$4.glDisableClientState$MH,"glDisableClientState");
    }
    public static void glDisableClientState ( int cap) {
        var mh$ = RuntimeHelper.requireNonNull(constants$4.glDisableClientState$MH, "glDisableClientState");
        try {
            mh$.invokeExact(cap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetBooleanv$MH() {
        return RuntimeHelper.requireNonNull(constants$4.glGetBooleanv$MH,"glGetBooleanv");
    }
    public static void glGetBooleanv ( int pname,  Addressable params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$4.glGetBooleanv$MH, "glGetBooleanv");
        try {
            mh$.invokeExact(pname, params.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetDoublev$MH() {
        return RuntimeHelper.requireNonNull(constants$5.glGetDoublev$MH,"glGetDoublev");
    }
    public static void glGetDoublev ( int pname,  Addressable params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$5.glGetDoublev$MH, "glGetDoublev");
        try {
            mh$.invokeExact(pname, params.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetFloatv$MH() {
        return RuntimeHelper.requireNonNull(constants$5.glGetFloatv$MH,"glGetFloatv");
    }
    public static void glGetFloatv ( int pname,  Addressable params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$5.glGetFloatv$MH, "glGetFloatv");
        try {
            mh$.invokeExact(pname, params.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetIntegerv$MH() {
        return RuntimeHelper.requireNonNull(constants$5.glGetIntegerv$MH,"glGetIntegerv");
    }
    public static void glGetIntegerv ( int pname,  Addressable params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$5.glGetIntegerv$MH, "glGetIntegerv");
        try {
            mh$.invokeExact(pname, params.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPushAttrib$MH() {
        return RuntimeHelper.requireNonNull(constants$5.glPushAttrib$MH,"glPushAttrib");
    }
    public static void glPushAttrib ( int mask) {
        var mh$ = RuntimeHelper.requireNonNull(constants$5.glPushAttrib$MH, "glPushAttrib");
        try {
            mh$.invokeExact(mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPopAttrib$MH() {
        return RuntimeHelper.requireNonNull(constants$5.glPopAttrib$MH,"glPopAttrib");
    }
    public static void glPopAttrib () {
        var mh$ = RuntimeHelper.requireNonNull(constants$5.glPopAttrib$MH, "glPopAttrib");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPushClientAttrib$MH() {
        return RuntimeHelper.requireNonNull(constants$5.glPushClientAttrib$MH,"glPushClientAttrib");
    }
    public static void glPushClientAttrib ( int mask) {
        var mh$ = RuntimeHelper.requireNonNull(constants$5.glPushClientAttrib$MH, "glPushClientAttrib");
        try {
            mh$.invokeExact(mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPopClientAttrib$MH() {
        return RuntimeHelper.requireNonNull(constants$6.glPopClientAttrib$MH,"glPopClientAttrib");
    }
    public static void glPopClientAttrib () {
        var mh$ = RuntimeHelper.requireNonNull(constants$6.glPopClientAttrib$MH, "glPopClientAttrib");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRenderMode$MH() {
        return RuntimeHelper.requireNonNull(constants$6.glRenderMode$MH,"glRenderMode");
    }
    public static int glRenderMode ( int mode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$6.glRenderMode$MH, "glRenderMode");
        try {
            return (int)mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetError$MH() {
        return RuntimeHelper.requireNonNull(constants$6.glGetError$MH,"glGetError");
    }
    public static int glGetError () {
        var mh$ = RuntimeHelper.requireNonNull(constants$6.glGetError$MH, "glGetError");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetString$MH() {
        return RuntimeHelper.requireNonNull(constants$6.glGetString$MH,"glGetString");
    }
    public static MemoryAddress glGetString ( int name) {
        var mh$ = RuntimeHelper.requireNonNull(constants$6.glGetString$MH, "glGetString");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFinish$MH() {
        return RuntimeHelper.requireNonNull(constants$6.glFinish$MH,"glFinish");
    }
    public static void glFinish () {
        var mh$ = RuntimeHelper.requireNonNull(constants$6.glFinish$MH, "glFinish");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFlush$MH() {
        return RuntimeHelper.requireNonNull(constants$6.glFlush$MH,"glFlush");
    }
    public static void glFlush () {
        var mh$ = RuntimeHelper.requireNonNull(constants$6.glFlush$MH, "glFlush");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glHint$MH() {
        return RuntimeHelper.requireNonNull(constants$7.glHint$MH,"glHint");
    }
    public static void glHint ( int target,  int mode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$7.glHint$MH, "glHint");
        try {
            mh$.invokeExact(target, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClearDepth$MH() {
        return RuntimeHelper.requireNonNull(constants$7.glClearDepth$MH,"glClearDepth");
    }
    public static void glClearDepth ( double depth) {
        var mh$ = RuntimeHelper.requireNonNull(constants$7.glClearDepth$MH, "glClearDepth");
        try {
            mh$.invokeExact(depth);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDepthFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$7.glDepthFunc$MH,"glDepthFunc");
    }
    public static void glDepthFunc ( int func) {
        var mh$ = RuntimeHelper.requireNonNull(constants$7.glDepthFunc$MH, "glDepthFunc");
        try {
            mh$.invokeExact(func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDepthMask$MH() {
        return RuntimeHelper.requireNonNull(constants$7.glDepthMask$MH,"glDepthMask");
    }
    public static void glDepthMask ( byte flag) {
        var mh$ = RuntimeHelper.requireNonNull(constants$7.glDepthMask$MH, "glDepthMask");
        try {
            mh$.invokeExact(flag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDepthRange$MH() {
        return RuntimeHelper.requireNonNull(constants$7.glDepthRange$MH,"glDepthRange");
    }
    public static void glDepthRange ( double near_val,  double far_val) {
        var mh$ = RuntimeHelper.requireNonNull(constants$7.glDepthRange$MH, "glDepthRange");
        try {
            mh$.invokeExact(near_val, far_val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClearAccum$MH() {
        return RuntimeHelper.requireNonNull(constants$7.glClearAccum$MH,"glClearAccum");
    }
    public static void glClearAccum ( float red,  float green,  float blue,  float alpha) {
        var mh$ = RuntimeHelper.requireNonNull(constants$7.glClearAccum$MH, "glClearAccum");
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glAccum$MH() {
        return RuntimeHelper.requireNonNull(constants$8.glAccum$MH,"glAccum");
    }
    public static void glAccum ( int op,  float value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$8.glAccum$MH, "glAccum");
        try {
            mh$.invokeExact(op, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMatrixMode$MH() {
        return RuntimeHelper.requireNonNull(constants$8.glMatrixMode$MH,"glMatrixMode");
    }
    public static void glMatrixMode ( int mode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$8.glMatrixMode$MH, "glMatrixMode");
        try {
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glOrtho$MH() {
        return RuntimeHelper.requireNonNull(constants$8.glOrtho$MH,"glOrtho");
    }
    public static void glOrtho ( double left,  double right,  double bottom,  double top,  double near_val,  double far_val) {
        var mh$ = RuntimeHelper.requireNonNull(constants$8.glOrtho$MH, "glOrtho");
        try {
            mh$.invokeExact(left, right, bottom, top, near_val, far_val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFrustum$MH() {
        return RuntimeHelper.requireNonNull(constants$8.glFrustum$MH,"glFrustum");
    }
    public static void glFrustum ( double left,  double right,  double bottom,  double top,  double near_val,  double far_val) {
        var mh$ = RuntimeHelper.requireNonNull(constants$8.glFrustum$MH, "glFrustum");
        try {
            mh$.invokeExact(left, right, bottom, top, near_val, far_val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glViewport$MH() {
        return RuntimeHelper.requireNonNull(constants$8.glViewport$MH,"glViewport");
    }
    public static void glViewport ( int x,  int y,  int width,  int height) {
        var mh$ = RuntimeHelper.requireNonNull(constants$8.glViewport$MH, "glViewport");
        try {
            mh$.invokeExact(x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPushMatrix$MH() {
        return RuntimeHelper.requireNonNull(constants$8.glPushMatrix$MH,"glPushMatrix");
    }
    public static void glPushMatrix () {
        var mh$ = RuntimeHelper.requireNonNull(constants$8.glPushMatrix$MH, "glPushMatrix");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPopMatrix$MH() {
        return RuntimeHelper.requireNonNull(constants$9.glPopMatrix$MH,"glPopMatrix");
    }
    public static void glPopMatrix () {
        var mh$ = RuntimeHelper.requireNonNull(constants$9.glPopMatrix$MH, "glPopMatrix");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLoadIdentity$MH() {
        return RuntimeHelper.requireNonNull(constants$9.glLoadIdentity$MH,"glLoadIdentity");
    }
    public static void glLoadIdentity () {
        var mh$ = RuntimeHelper.requireNonNull(constants$9.glLoadIdentity$MH, "glLoadIdentity");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLoadMatrixd$MH() {
        return RuntimeHelper.requireNonNull(constants$9.glLoadMatrixd$MH,"glLoadMatrixd");
    }
    public static void glLoadMatrixd ( Addressable m) {
        var mh$ = RuntimeHelper.requireNonNull(constants$9.glLoadMatrixd$MH, "glLoadMatrixd");
        try {
            mh$.invokeExact(m.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLoadMatrixf$MH() {
        return RuntimeHelper.requireNonNull(constants$9.glLoadMatrixf$MH,"glLoadMatrixf");
    }
    public static void glLoadMatrixf ( Addressable m) {
        var mh$ = RuntimeHelper.requireNonNull(constants$9.glLoadMatrixf$MH, "glLoadMatrixf");
        try {
            mh$.invokeExact(m.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultMatrixd$MH() {
        return RuntimeHelper.requireNonNull(constants$9.glMultMatrixd$MH,"glMultMatrixd");
    }
    public static void glMultMatrixd ( Addressable m) {
        var mh$ = RuntimeHelper.requireNonNull(constants$9.glMultMatrixd$MH, "glMultMatrixd");
        try {
            mh$.invokeExact(m.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultMatrixf$MH() {
        return RuntimeHelper.requireNonNull(constants$9.glMultMatrixf$MH,"glMultMatrixf");
    }
    public static void glMultMatrixf ( Addressable m) {
        var mh$ = RuntimeHelper.requireNonNull(constants$9.glMultMatrixf$MH, "glMultMatrixf");
        try {
            mh$.invokeExact(m.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRotated$MH() {
        return RuntimeHelper.requireNonNull(constants$10.glRotated$MH,"glRotated");
    }
    public static void glRotated ( double angle,  double x,  double y,  double z) {
        var mh$ = RuntimeHelper.requireNonNull(constants$10.glRotated$MH, "glRotated");
        try {
            mh$.invokeExact(angle, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRotatef$MH() {
        return RuntimeHelper.requireNonNull(constants$10.glRotatef$MH,"glRotatef");
    }
    public static void glRotatef ( float angle,  float x,  float y,  float z) {
        var mh$ = RuntimeHelper.requireNonNull(constants$10.glRotatef$MH, "glRotatef");
        try {
            mh$.invokeExact(angle, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glScaled$MH() {
        return RuntimeHelper.requireNonNull(constants$10.glScaled$MH,"glScaled");
    }
    public static void glScaled ( double x,  double y,  double z) {
        var mh$ = RuntimeHelper.requireNonNull(constants$10.glScaled$MH, "glScaled");
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glScalef$MH() {
        return RuntimeHelper.requireNonNull(constants$10.glScalef$MH,"glScalef");
    }
    public static void glScalef ( float x,  float y,  float z) {
        var mh$ = RuntimeHelper.requireNonNull(constants$10.glScalef$MH, "glScalef");
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTranslated$MH() {
        return RuntimeHelper.requireNonNull(constants$10.glTranslated$MH,"glTranslated");
    }
    public static void glTranslated ( double x,  double y,  double z) {
        var mh$ = RuntimeHelper.requireNonNull(constants$10.glTranslated$MH, "glTranslated");
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTranslatef$MH() {
        return RuntimeHelper.requireNonNull(constants$10.glTranslatef$MH,"glTranslatef");
    }
    public static void glTranslatef ( float x,  float y,  float z) {
        var mh$ = RuntimeHelper.requireNonNull(constants$10.glTranslatef$MH, "glTranslatef");
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIsList$MH() {
        return RuntimeHelper.requireNonNull(constants$11.glIsList$MH,"glIsList");
    }
    public static byte glIsList ( int list) {
        var mh$ = RuntimeHelper.requireNonNull(constants$11.glIsList$MH, "glIsList");
        try {
            return (byte)mh$.invokeExact(list);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDeleteLists$MH() {
        return RuntimeHelper.requireNonNull(constants$11.glDeleteLists$MH,"glDeleteLists");
    }
    public static void glDeleteLists ( int list,  int range) {
        var mh$ = RuntimeHelper.requireNonNull(constants$11.glDeleteLists$MH, "glDeleteLists");
        try {
            mh$.invokeExact(list, range);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGenLists$MH() {
        return RuntimeHelper.requireNonNull(constants$11.glGenLists$MH,"glGenLists");
    }
    public static int glGenLists ( int range) {
        var mh$ = RuntimeHelper.requireNonNull(constants$11.glGenLists$MH, "glGenLists");
        try {
            return (int)mh$.invokeExact(range);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNewList$MH() {
        return RuntimeHelper.requireNonNull(constants$11.glNewList$MH,"glNewList");
    }
    public static void glNewList ( int list,  int mode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$11.glNewList$MH, "glNewList");
        try {
            mh$.invokeExact(list, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEndList$MH() {
        return RuntimeHelper.requireNonNull(constants$11.glEndList$MH,"glEndList");
    }
    public static void glEndList () {
        var mh$ = RuntimeHelper.requireNonNull(constants$11.glEndList$MH, "glEndList");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCallList$MH() {
        return RuntimeHelper.requireNonNull(constants$11.glCallList$MH,"glCallList");
    }
    public static void glCallList ( int list) {
        var mh$ = RuntimeHelper.requireNonNull(constants$11.glCallList$MH, "glCallList");
        try {
            mh$.invokeExact(list);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCallLists$MH() {
        return RuntimeHelper.requireNonNull(constants$12.glCallLists$MH,"glCallLists");
    }
    public static void glCallLists ( int n,  int type,  Addressable lists) {
        var mh$ = RuntimeHelper.requireNonNull(constants$12.glCallLists$MH, "glCallLists");
        try {
            mh$.invokeExact(n, type, lists.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glListBase$MH() {
        return RuntimeHelper.requireNonNull(constants$12.glListBase$MH,"glListBase");
    }
    public static void glListBase ( int base) {
        var mh$ = RuntimeHelper.requireNonNull(constants$12.glListBase$MH, "glListBase");
        try {
            mh$.invokeExact(base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBegin$MH() {
        return RuntimeHelper.requireNonNull(constants$12.glBegin$MH,"glBegin");
    }
    public static void glBegin ( int mode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$12.glBegin$MH, "glBegin");
        try {
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEnd$MH() {
        return RuntimeHelper.requireNonNull(constants$12.glEnd$MH,"glEnd");
    }
    public static void glEnd () {
        var mh$ = RuntimeHelper.requireNonNull(constants$12.glEnd$MH, "glEnd");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex2d$MH() {
        return RuntimeHelper.requireNonNull(constants$12.glVertex2d$MH,"glVertex2d");
    }
    public static void glVertex2d ( double x,  double y) {
        var mh$ = RuntimeHelper.requireNonNull(constants$12.glVertex2d$MH, "glVertex2d");
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex2f$MH() {
        return RuntimeHelper.requireNonNull(constants$12.glVertex2f$MH,"glVertex2f");
    }
    public static void glVertex2f ( float x,  float y) {
        var mh$ = RuntimeHelper.requireNonNull(constants$12.glVertex2f$MH, "glVertex2f");
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex2i$MH() {
        return RuntimeHelper.requireNonNull(constants$13.glVertex2i$MH,"glVertex2i");
    }
    public static void glVertex2i ( int x,  int y) {
        var mh$ = RuntimeHelper.requireNonNull(constants$13.glVertex2i$MH, "glVertex2i");
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex2s$MH() {
        return RuntimeHelper.requireNonNull(constants$13.glVertex2s$MH,"glVertex2s");
    }
    public static void glVertex2s ( short x,  short y) {
        var mh$ = RuntimeHelper.requireNonNull(constants$13.glVertex2s$MH, "glVertex2s");
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex3d$MH() {
        return RuntimeHelper.requireNonNull(constants$13.glVertex3d$MH,"glVertex3d");
    }
    public static void glVertex3d ( double x,  double y,  double z) {
        var mh$ = RuntimeHelper.requireNonNull(constants$13.glVertex3d$MH, "glVertex3d");
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex3f$MH() {
        return RuntimeHelper.requireNonNull(constants$13.glVertex3f$MH,"glVertex3f");
    }
    public static void glVertex3f ( float x,  float y,  float z) {
        var mh$ = RuntimeHelper.requireNonNull(constants$13.glVertex3f$MH, "glVertex3f");
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex3i$MH() {
        return RuntimeHelper.requireNonNull(constants$13.glVertex3i$MH,"glVertex3i");
    }
    public static void glVertex3i ( int x,  int y,  int z) {
        var mh$ = RuntimeHelper.requireNonNull(constants$13.glVertex3i$MH, "glVertex3i");
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex3s$MH() {
        return RuntimeHelper.requireNonNull(constants$13.glVertex3s$MH,"glVertex3s");
    }
    public static void glVertex3s ( short x,  short y,  short z) {
        var mh$ = RuntimeHelper.requireNonNull(constants$13.glVertex3s$MH, "glVertex3s");
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex4d$MH() {
        return RuntimeHelper.requireNonNull(constants$14.glVertex4d$MH,"glVertex4d");
    }
    public static void glVertex4d ( double x,  double y,  double z,  double w) {
        var mh$ = RuntimeHelper.requireNonNull(constants$14.glVertex4d$MH, "glVertex4d");
        try {
            mh$.invokeExact(x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex4f$MH() {
        return RuntimeHelper.requireNonNull(constants$14.glVertex4f$MH,"glVertex4f");
    }
    public static void glVertex4f ( float x,  float y,  float z,  float w) {
        var mh$ = RuntimeHelper.requireNonNull(constants$14.glVertex4f$MH, "glVertex4f");
        try {
            mh$.invokeExact(x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex4i$MH() {
        return RuntimeHelper.requireNonNull(constants$14.glVertex4i$MH,"glVertex4i");
    }
    public static void glVertex4i ( int x,  int y,  int z,  int w) {
        var mh$ = RuntimeHelper.requireNonNull(constants$14.glVertex4i$MH, "glVertex4i");
        try {
            mh$.invokeExact(x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex4s$MH() {
        return RuntimeHelper.requireNonNull(constants$14.glVertex4s$MH,"glVertex4s");
    }
    public static void glVertex4s ( short x,  short y,  short z,  short w) {
        var mh$ = RuntimeHelper.requireNonNull(constants$14.glVertex4s$MH, "glVertex4s");
        try {
            mh$.invokeExact(x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex2dv$MH() {
        return RuntimeHelper.requireNonNull(constants$14.glVertex2dv$MH,"glVertex2dv");
    }
    public static void glVertex2dv ( Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$14.glVertex2dv$MH, "glVertex2dv");
        try {
            mh$.invokeExact(v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex2fv$MH() {
        return RuntimeHelper.requireNonNull(constants$14.glVertex2fv$MH,"glVertex2fv");
    }
    public static void glVertex2fv ( Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$14.glVertex2fv$MH, "glVertex2fv");
        try {
            mh$.invokeExact(v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex2iv$MH() {
        return RuntimeHelper.requireNonNull(constants$15.glVertex2iv$MH,"glVertex2iv");
    }
    public static void glVertex2iv ( Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$15.glVertex2iv$MH, "glVertex2iv");
        try {
            mh$.invokeExact(v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex2sv$MH() {
        return RuntimeHelper.requireNonNull(constants$15.glVertex2sv$MH,"glVertex2sv");
    }
    public static void glVertex2sv ( Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$15.glVertex2sv$MH, "glVertex2sv");
        try {
            mh$.invokeExact(v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex3dv$MH() {
        return RuntimeHelper.requireNonNull(constants$15.glVertex3dv$MH,"glVertex3dv");
    }
    public static void glVertex3dv ( Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$15.glVertex3dv$MH, "glVertex3dv");
        try {
            mh$.invokeExact(v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex3fv$MH() {
        return RuntimeHelper.requireNonNull(constants$15.glVertex3fv$MH,"glVertex3fv");
    }
    public static void glVertex3fv ( Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$15.glVertex3fv$MH, "glVertex3fv");
        try {
            mh$.invokeExact(v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex3iv$MH() {
        return RuntimeHelper.requireNonNull(constants$15.glVertex3iv$MH,"glVertex3iv");
    }
    public static void glVertex3iv ( Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$15.glVertex3iv$MH, "glVertex3iv");
        try {
            mh$.invokeExact(v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex3sv$MH() {
        return RuntimeHelper.requireNonNull(constants$15.glVertex3sv$MH,"glVertex3sv");
    }
    public static void glVertex3sv ( Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$15.glVertex3sv$MH, "glVertex3sv");
        try {
            mh$.invokeExact(v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex4dv$MH() {
        return RuntimeHelper.requireNonNull(constants$16.glVertex4dv$MH,"glVertex4dv");
    }
    public static void glVertex4dv ( Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$16.glVertex4dv$MH, "glVertex4dv");
        try {
            mh$.invokeExact(v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex4fv$MH() {
        return RuntimeHelper.requireNonNull(constants$16.glVertex4fv$MH,"glVertex4fv");
    }
    public static void glVertex4fv ( Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$16.glVertex4fv$MH, "glVertex4fv");
        try {
            mh$.invokeExact(v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex4iv$MH() {
        return RuntimeHelper.requireNonNull(constants$16.glVertex4iv$MH,"glVertex4iv");
    }
    public static void glVertex4iv ( Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$16.glVertex4iv$MH, "glVertex4iv");
        try {
            mh$.invokeExact(v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex4sv$MH() {
        return RuntimeHelper.requireNonNull(constants$16.glVertex4sv$MH,"glVertex4sv");
    }
    public static void glVertex4sv ( Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$16.glVertex4sv$MH, "glVertex4sv");
        try {
            mh$.invokeExact(v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormal3b$MH() {
        return RuntimeHelper.requireNonNull(constants$16.glNormal3b$MH,"glNormal3b");
    }
    public static void glNormal3b ( byte nx,  byte ny,  byte nz) {
        var mh$ = RuntimeHelper.requireNonNull(constants$16.glNormal3b$MH, "glNormal3b");
        try {
            mh$.invokeExact(nx, ny, nz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
}


