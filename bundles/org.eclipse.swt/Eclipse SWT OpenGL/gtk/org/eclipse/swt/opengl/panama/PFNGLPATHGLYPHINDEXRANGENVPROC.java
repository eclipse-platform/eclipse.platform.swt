// Generated by jextract

package org.eclipse.swt.opengl.panama;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public interface PFNGLPATHGLYPHINDEXRANGENVPROC {

    int apply(int x0, jdk.incubator.foreign.MemoryAddress x1, int x2, int x3, float x4, jdk.incubator.foreign.MemoryAddress x5);
    static MemoryAddress allocate(PFNGLPATHGLYPHINDEXRANGENVPROC fi) {
        return RuntimeHelper.upcallStub(PFNGLPATHGLYPHINDEXRANGENVPROC.class, fi, constants$797.PFNGLPATHGLYPHINDEXRANGENVPROC$FUNC, "(ILjdk/incubator/foreign/MemoryAddress;IIFLjdk/incubator/foreign/MemoryAddress;)I");
    }
    static MemoryAddress allocate(PFNGLPATHGLYPHINDEXRANGENVPROC fi, ResourceScope scope) {
        return RuntimeHelper.upcallStub(PFNGLPATHGLYPHINDEXRANGENVPROC.class, fi, constants$797.PFNGLPATHGLYPHINDEXRANGENVPROC$FUNC, "(ILjdk/incubator/foreign/MemoryAddress;IIFLjdk/incubator/foreign/MemoryAddress;)I", scope);
    }
    static PFNGLPATHGLYPHINDEXRANGENVPROC ofAddress(MemoryAddress addr) {
        return (int x0, jdk.incubator.foreign.MemoryAddress x1, int x2, int x3, float x4, jdk.incubator.foreign.MemoryAddress x5) -> {
            try {
                return (int)constants$797.PFNGLPATHGLYPHINDEXRANGENVPROC$MH.invokeExact((Addressable)addr, x0, x1, x2, x3, x4, x5);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


