/*******************************************************************************
 * Copyright (c) 2000, 2017 IBM Corporation and others.
 *
 * This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License 2.0
 * which accompanies this distribution, and is available at
 * https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/
package org.eclipse.swt.widgets;

import java.util.*;
import java.util.function.*;

/**
 * Classes which implement this interface provide methods that deal with the
 * events that are generated by the TabFolder control.
 * <p>
 * After creating an instance of a class that implements this interface it can
 * be added to a TabFolder using the <code>addCTabFolder2Listener</code> method
 * and removed using the <code>removeCTabFolder2Listener</code> method. When
 * events occurs in a TabFolder the appropriate method will be invoked.
 * </p>
 *
 * @see TabFolder2Adapter
 * @see TabFolderEvent
 *
 * @since 3.0
 */
public interface TabFolder2Listener extends EventListener {

/**
 * Sent when the user clicks on the close button of an item in the TabFolder.
 * The item being closed is specified in the event.item field. Setting the
 * event.doit field to false will stop the CTabItem from closing. When the
 * CTabItem is closed, it is disposed. The contents of the CTabItem (see
 * CTabItem.setControl) will be made not visible when the CTabItem is closed.
 *
 * @param event an event indicating the item being closed
 */
public void close(TabFolderEvent event);

/**
 * Sent when the user clicks on the minimize button of a TabFolder. The state of
 * the TabFolder does not change automatically - it is up to the application to
 * change the state of the TabFolder in response to this event using
 * TabFolder.setMinimized(true).
 *
 * @param event an event containing information about the minimize
 *
 * @see TabFolder#getMinimized()
 * @see TabFolder#setMinimized(boolean)
 * @see TabFolder#setMinimizeVisible(boolean)
 */
public void minimize(TabFolderEvent event);

/**
 * Sent when the user clicks on the maximize button of a TabFolder. The state of
 * the TabFolder does not change automatically - it is up to the application to
 * change the state of the TabFolder in response to this event using
 * TabFolder.setMaximized(true).
 *
 * @param event an event containing information about the maximize
 *
 * @see TabFolder#getMaximized()
 * @see TabFolder#setMaximized(boolean)
 * @see TabFolder#setMaximizeVisible(boolean)
 */
public void maximize(TabFolderEvent event);

/**
 * Sent when the user clicks on the restore button of a TabFolder. This event is
 * sent either to restore the TabFolder from the minimized state or from the
 * maximized state. To determine which restore is requested, use
 * TabFolder.getMinimized() or TabFolder.getMaximized() to determine the current
 * state. The state of the TabFolder does not change automatically - it is up to
 * the application to change the state of the TabFolder in response to this
 * event using TabFolder.setMaximized(false) or TabFolder.setMinimized(false).
 *
 * @param event an event containing information about the restore
 *
 * @see TabFolder#getMinimized()
 * @see TabFolder#getMaximized()
 * @see TabFolder#setMinimized(boolean)
 * @see TabFolder#setMinimizeVisible(boolean)
 * @see TabFolder#setMaximized(boolean)
 * @see TabFolder#setMaximizeVisible(boolean)
 */
public void restore(TabFolderEvent event);

/**
 * Sent when the user clicks on the chevron button of the TabFolder. A chevron
 * appears in the TabFolder when there are more tabs than can be displayed at
 * the current widget size. To select a tab that is not currently visible, the
 * user clicks on the chevron and selects a tab item from a list. By default,
 * the TabFolder provides a list of all the items that are not currently
 * visible, however, the application can provide its own list by setting the
 * event.doit field to <code>false</code> and displaying a selection list.
 *
 * @param event an event containing information about the show list
 *
 * @see TabFolder#setSelection(TabItem)
 */
public void showList(TabFolderEvent event);

/**
 * Sent when the tab items count changes
 *
 * @param event from observed tab folder
 * @since 3.124
 */
public default void itemsCount(TabFolderEvent event) {
	// do nothing by default
}

/**
 * Static helper method to create a <code>CTabFolder2Listener</code> for the
 * {@link #itemsCount(TabFolderEvent e)}) method, given a lambda expression or
 * a method reference.
 *
 * @param c the consumer of the event
 * @return CTabFolder2Listener
 * @since 3.124
 */
public static TabFolder2Listener itemsCountAdapter(Consumer<TabFolderEvent> c) {
	return new TabFolder2Adapter() {
		@Override
		public void itemsCount(TabFolderEvent e) {
			c.accept(e);
		}
	};
}

/**
 * Static helper method to create a <code>CTabFolder2Listener</code> for the
 * {@link #close(TabFolderEvent e)}) method, given a lambda expression or a method reference.
 *
 * @param c the consumer of the event
 * @return CTabFolder2Listener
 * @since 3.107
 */
public static TabFolder2Listener closeAdapter(Consumer<TabFolderEvent> c) {
	return new TabFolder2Adapter() {
		@Override
		public void close(TabFolderEvent e) {
			c.accept(e);
		}
	};
}

/**
 * Static helper method to create a <code>CTabFolder2Listener</code> for the
 * {@link #minimize(TabFolderEvent e)}) method, given a lambda expression or a method reference.
 *
 * @param c the consumer of the event
 * @return CTabFolder2Listener
 * @since 3.107
 */
public static TabFolder2Listener minimizeAdapter(Consumer<TabFolderEvent> c) {
	return new TabFolder2Adapter() {
		@Override
		public void minimize(TabFolderEvent e) {
			c.accept(e);
		}
	};
}

/**
 * Static helper method to create a <code>CTabFolder2Listener</code> for the
 * {@link #maximize(TabFolderEvent e)}) method, given a lambda expression or a method reference.
 *
 * @param c the consumer of the event
 * @return CTabFolder2Listener
 * @since 3.107
 */
public static TabFolder2Listener maximizeAdapter(Consumer<TabFolderEvent> c) {
	return new TabFolder2Adapter() {
		@Override
		public void maximize(TabFolderEvent e) {
			c.accept(e);
		}
	};
}

/**
 * Static helper method to create a <code>CTabFolder2Listener</code> for the
 * {@link #restore(TabFolderEvent e)}) method, given a lambda expression or a method reference.
 *
 * @param c the consumer of the event
 * @return CTabFolder2Listener
 * @since 3.107
 */
public static TabFolder2Listener restoreAdapter(Consumer<TabFolderEvent> c) {
	return new TabFolder2Adapter() {
		@Override
		public void restore(TabFolderEvent e) {
			c.accept(e);
		}
	};
}

/**
 * Static helper method to create a <code>CTabFolder2Listener</code> for the
 * {@link #showList(TabFolderEvent e)}) method, given a lambda expression or a method reference.
 *
 * @param c the consumer of the event
 * @return CTabFolder2Listener
 * @since 3.107
 */
public static TabFolder2Listener showListAdapter(Consumer<TabFolderEvent> c) {
	return new TabFolder2Adapter() {
		@Override
		public void showList(TabFolderEvent e) {
			c.accept(e);
		}
	};
}
}
